{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./contribs/gmf/src/query/gridComponent.js","webpack:///./contribs/gmf/examples/displayquerygrid.js","webpack:///./contribs/gmf/src/query/gridComponent.html"],"names":["webpackJsonpCallback","data","chunkIds","moreModules","executeModules","moduleId","chunkId","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","26","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","getDefault","getModuleExports","object","property","p","jsonpArray","window","oldJsonpFunction","bind","slice","angular","ngeoDownloadCsv","ngeoDownloadService","ngeoGridComponent","ngeoGridConfig","ngeoMapFeatureOverlayMgr","ngeoQueryMapQuerent","$element","$attrs","templateUrl","undefined","run","$templateCache","put","require","gmfDisplayquerygridTemplateUrl","component_","controller","bindings","active","featuresStyleFn","selectedFeatureStyleFn","getMapFn","removeEmptyColumnsFn","maxResultsFn","maxRecenterZoomFn","mergeTabs","component","Controller_","$injector","$scope","ngeoQueryResult","ngeoMapQuerent","ngeoFeatureOverlayMgr","$timeout","ngeoCsvDownload","_this","this","queryOptions","has","$scope_","$timeout_","ngeoMapQuerent_","ngeoCsvDownload_","$element_","maxResults","limit","pending","gridSources","loadedGridSources","selectedTab","removeEmptyColumns_","maxRecenterZoom","featuresForSources_","features_","olCollection","ngeoFeatureOverlayMgr_","highlightFeatures_","filename_","map_","$watchCollection","newQueryResult","oldQueryResult","updateData_","unregisterSelectWatcher_","$onInit","featuresOverlay","getFeatureOverlay","setFeatures","featuresStyle","googAsserts","assertInstanceof","olStyleStyle","setStyle","highlightFeaturesOverlay","highlightFeatureStyle","fill","olStyleFill","color","stroke","olStyleStroke","width","image","olStyleCircle","radius","zIndex","mapFn","map","olMap","getGridSources","_this2","sourceLabel","_this3","total","hasOneWithTooManyResults_","oldActive","clear","sources","keys","getMergedSources_","forEach","source","tooManyResults","makeGrid_","id","escapeValue","features","collectData_","firstSourceId","selectTab","some","Number","isInteger","toEscape","match","replace","isSelected","gridSource","label","_this4","allSources","mergedSources","mergedSource","getMergedSource_","mergedSourceId","mergeSourceId","currentMergeSourceId","sourceLabels","containsSource","mergeSource","queried","totalFeatureCount","feature","allProperties","featureGeometriesNames","featuresForSource","properties","featureGeometryName","getProperties","getGeometryName","indexOf","getRowUid","cleanProperties_","gridCreated","removeEmptyColumnsFn_","keysToKeep","key","keyToRemove","gridConfig","getGridConfiguration_","configuration","assert","clone","assign","ol_uid","columns","columnDefs","column","_this5","selectedRows","newSelected","oldSelectedRows","onSelectionChanged_","updateFeatures_","reflowGrid_","activePane","find","removeClass","addClass","rowId","getActiveGridSource","isOneSelected","getSelectedCount","getSelectedRowCount","selectAll","unselectAll","invertSelection","zoomToSelection","extent","olExtent","getGeometry","getExtent","size","getSize","maxZoom","getView","fit","downloadCsv","getSelectedRows","startDownload","gmfDatasourceManager","gmfLayertreeComponent","gmfMapComponent","gmfQueryGridComponent","gmfThemeThemes","ngeoGridModule","ngeoMapModule","ngeoMiscBtnComponent","ngeoQueryBboxQueryComponent","ngeoQueryMapQueryComponent","constant","queryCountFirst","queryresultComponent","template","QueryresultController","MainController","gmfThemes","gmfDataSourcesManager","loadThemes","featureStyle","layers","olLayerTile","olSourceOSM","view","olView","projection","EPSG21781","resolutions","center","zoom","setDatasourceMap","themes","treeSource","queryActive","queryGridActive","getThemesObject","then","init"],"mappings":"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","file":"displayquerygrid.94e87d.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t26: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([460,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","/**\n * @module gmf.query.gridComponent\n */\nimport googAsserts from 'goog/asserts.js';\n\n/** @suppress {extraRequire} */\nimport ngeoDownloadCsv from 'ngeo/download/Csv.js';\n\n/** @suppress {extraRequire} */\nimport ngeoDownloadService from 'ngeo/download/service.js';\n\n/** @suppress {extraRequire} */\nimport ngeoGridComponent from 'ngeo/grid/component.js';\n\nimport ngeoGridConfig from 'ngeo/grid/Config.js';\nimport ngeoMapFeatureOverlayMgr from 'ngeo/map/FeatureOverlayMgr.js';\n\n/** @suppress {extraRequire} - required for `ngeoQueryResult` */\nimport ngeoQueryMapQuerent from 'ngeo/query/MapQuerent.js';\n\nimport olCollection from 'ol/Collection.js';\nimport * as olExtent from 'ol/extent.js';\nimport olMap from 'ol/Map.js';\nimport olStyleCircle from 'ol/style/Circle.js';\nimport olStyleFill from 'ol/style/Fill.js';\nimport olStyleStroke from 'ol/style/Stroke.js';\nimport olStyleStyle from 'ol/style/Style.js';\n\nimport 'bootstrap/js/dropdown.js';\n\n\n/**\n * @type {!angular.Module}\n */\nconst exports = angular.module('gmfQueryGridComponent', [\n  ngeoDownloadCsv.module.name,\n  ngeoDownloadService.name,\n  ngeoGridComponent.name,\n  ngeoGridConfig.module.name,\n  ngeoMapFeatureOverlayMgr.module.name,\n  ngeoQueryMapQuerent.module.name,\n]);\n\n\nexports.value('gmfDisplayquerygridTemplateUrl',\n  /**\n   * @param {!angular.JQLite} $element Element.\n   * @param {!angular.Attributes} $attrs Attributes.\n   * @return {string} Template URL.\n   */\n  ($element, $attrs) => {\n    const templateUrl = $attrs['gmfDisplayquerygridTemplateurl'];\n    return templateUrl !== undefined ? templateUrl :\n      'gmf/query/gridComponent';\n  }\n);\n\nexports.run(/* @ngInject */ ($templateCache) => {\n  $templateCache.put('gmf/query/gridComponent', require('./gridComponent.html'));\n});\n\n\n/**\n * @param {!angular.JQLite} $element Element.\n * @param {!angular.Attributes} $attrs Attributes.\n * @param {!function(!angular.JQLite, !angular.Attributes): string} gmfDisplayquerygridTemplateUrl Template function.\n * @return {string} Template URL.\n * @ngInject\n */\nfunction gmfDisplayquerygridTemplateUrl($element, $attrs, gmfDisplayquerygridTemplateUrl) {\n  return gmfDisplayquerygridTemplateUrl($element, $attrs);\n}\n\n\n/**\n * Provides a component to display results of the {@link ngeo.queryResult} in a\n * grid and shows related features on the map using\n * the {@link ngeo.map.FeatureOverlayMgr}.\n *\n * You can override the default component's template by setting the\n * value `gmfDisplayquerygridTemplateUrl`.\n *\n * Features displayed on the map use a default style but you can override these\n * styles by passing ol.style.Style objects as attributes of this component.\n *\n * Note: the following ng-class need to be present in the interface <body> element to display the footer\n * when the grid is active (initially there should be the code for the profile tool):\n *      <body ng-class=\"{'gmf-profile-chart-active': !!profileChartActive, 'gmf-query-grid-active': !!queryGridActive}\">\n *\n * Example:\n *\n *      <gmf-displayquerygrid\n *        gmf-displayquerygrid-map=\"ctrl.map\"\n *        gmf-displayquerygrid-featuresstyle=\"ctrl.styleForAllFeatures\"\n *        gmf-displayquerygrid-selectedfeaturestyle=\"ctrl.styleForTheCurrentFeature\">\n *      </gmf-displayquerygrid>\n *\n * @htmlAttribute {boolean} gmf-displayquerygrid-active The active state of the component.\n * @htmlAttribute {ol.style.Style} gmf-displayquerygrid-featuresstyle A style\n *     object for all features from the result of the query.\n * @htmlAttribute {ol.style.Style} gmf-displayquerygrid-selectedfeaturestyle A style\n *     object for the currently selected features.\n * @htmlAttribute {ol.Map} gmf-displayquerygrid-map The map.\n * @htmlAttribute {boolean?} gmf-displayquerygrid-removeemptycolumns Optional. Should\n *     empty columns be hidden? Default: `false`.\n * @htmlAttribute {number?} gmf-displayquerygrid-maxrecenterzoom Optional. Maximum\n *     zoom-level to use when zooming to selected features.\n * @htmlAttribute {gmfx.GridMergeTabs?} gmf-displayquerygrid-gridmergetabs Optional.\n *     Configuration to merge grids with the same attributes into a single grid.\n *\n * @ngdoc component\n * @ngname gmfDisplayquerygrid\n */\nexports.component_ = {\n  controller: 'GmfDisplayquerygridController as ctrl',\n  bindings: {\n    'active': '=?gmfDisplayquerygridActive',\n    'featuresStyleFn': '&gmfDisplayquerygridFeaturesstyle',\n    'selectedFeatureStyleFn': '&gmfDisplayquerygridSelectedfeaturestyle',\n    'getMapFn': '&gmfDisplayquerygridMap',\n    'removeEmptyColumnsFn': '&?gmfDisplayquerygridRemoveemptycolumns',\n    'maxResultsFn': '&?gmfDisplayquerygridMaxresults',\n    'maxRecenterZoomFn': '&?gmfDisplayquerygridMaxrecenterzoom',\n    'mergeTabs': '<?gmfDisplayquerygridMergetabs'\n  },\n  templateUrl: gmfDisplayquerygridTemplateUrl\n};\n\n\nexports.component('gmfDisplayquerygrid', exports.component_);\n\n\n/**\n * Controller for the query grid.\n *\n * @param {!angular.$injector} $injector Main injector.\n * @param {!angular.Scope} $scope Angular scope.\n * @param {!ngeox.QueryResult} ngeoQueryResult ngeo query result.\n * @param {!ngeo.query.MapQuerent} ngeoMapQuerent ngeo map querent service.\n * @param {!ngeo.map.FeatureOverlayMgr} ngeoFeatureOverlayMgr The ngeo feature\n *     overlay manager service.\n * @param {!angular.$timeout} $timeout Angular timeout service.\n * @param {!ngeo.download.Csv} ngeoCsvDownload CSV download service.\n * @param {!angular.JQLite} $element Element.\n * @constructor\n * @private\n * @ngInject\n * @ngdoc controller\n * @ngname GmfDisplayquerygridController\n */\nexports.Controller_ = function($injector, $scope, ngeoQueryResult, ngeoMapQuerent,\n  ngeoFeatureOverlayMgr, $timeout, ngeoCsvDownload, $element) {\n\n  const queryOptions = /** @type {ngeox.QueryOptions} */ (\n    $injector.has('ngeoQueryOptions') ?\n      $injector.get('ngeoQueryOptions') : {});\n\n  /**\n   * @type {!angular.Scope}\n   * @private\n   */\n  this.$scope_ = $scope;\n\n  /**\n   * @type {!angular.$timeout}\n   * @private\n   */\n  this.$timeout_ = $timeout;\n\n  /**\n   * @type {!ngeox.QueryResult}\n   * @export\n   */\n  this.ngeoQueryResult = ngeoQueryResult;\n\n  /**\n   * @type {!ngeo.query.MapQuerent}\n   * @private\n   */\n  this.ngeoMapQuerent_ = ngeoMapQuerent;\n\n  /**\n   * @type {!ngeo.download.Csv}\n   * @private\n   */\n  this.ngeoCsvDownload_ = ngeoCsvDownload;\n\n  /**\n   * @type {!angular.JQLite}\n   * @private\n   */\n  this.$element_ = $element;\n\n  /**\n   * @type {number}\n   * @export\n   */\n  this.maxResults = queryOptions.limit !== undefined ? queryOptions.limit : 50;\n\n  /**\n   * @type {boolean}\n   * @export\n   */\n  this.active = false;\n\n  /**\n   * @type {boolean}\n   * @export\n   */\n  this.pending = false;\n\n  /**\n   * @type {!Object.<string, gmfx.GridSource>}\n   * @export\n   */\n  this.gridSources = {};\n\n  /**\n   * IDs of the grid sources in the order they were loaded.\n   * @type {!Array.<string>}\n   * @export\n   */\n  this.loadedGridSources = [];\n\n  /**\n   * The id of the currently shown query source.\n   * @type {string|number|null}\n   * @export\n   */\n  this.selectedTab = null;\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.removeEmptyColumns_ = false;\n\n  /**\n   * @type {number|undefined}\n   * @export\n   */\n  this.maxRecenterZoom;\n\n  /**\n   * @type {!gmfx.GridMergeTabs}\n   * @export\n   */\n  this.mergeTabs = {};\n\n  /**\n   * A mapping between row uid and the corresponding feature for each\n   * source.\n   * @type {!Object.<string, Object.<string, ol.Feature>>}\n   * @private\n   */\n  this.featuresForSources_ = {};\n\n  // Styles for displayed features (features) and selected features\n  // (highlightFeatures_) (user can set both styles).\n  /**\n   * @type {!ol.Collection}\n   * @private\n   */\n  this.features_ = new olCollection();\n\n  /**\n   * @type {!ngeo.map.FeatureOverlayMgr}\n   * @private\n   */\n  this.ngeoFeatureOverlayMgr_ = ngeoFeatureOverlayMgr;\n\n  /**\n   * @type {!ol.Collection}\n   * @private\n   */\n  this.highlightFeatures_ = new olCollection();\n\n  /**\n   * Filename\n   * @type {string}\n   * @private\n   */\n  this.filename_ = $injector.has('gmfCsvFilename') ?\n    $injector.get('gmfCsvFilename') : 'query-results.csv';\n\n  /**\n   * @type {ol.Map}\n   * @private\n   */\n  this.map_ = null;\n\n  // Watch the ngeo query result service.\n  this.$scope_.$watchCollection(\n    () => ngeoQueryResult,\n    (newQueryResult, oldQueryResult) => {\n      if (newQueryResult !== oldQueryResult) {\n        this.updateData_();\n      }\n    });\n\n  /**\n   * An unregister function returned from `$scope.$watchCollection` for\n   * \"on-select\" changes (when rows are selected/unselected).\n   * @type {?function()}\n   * @private\n   */\n  this.unregisterSelectWatcher_ = null;\n};\n\n/**\n * Init the controller\n */\nexports.Controller_.prototype.$onInit = function() {\n  this.removeEmptyColumns_ = this['removeEmptyColumnsFn'] ? this['removeEmptyColumnsFn']() === true : false;\n  this.maxRecenterZoom = this['maxRecenterZoomFn'] ? this['maxRecenterZoomFn']() : undefined;\n\n  const featuresOverlay = this.ngeoFeatureOverlayMgr_.getFeatureOverlay();\n  featuresOverlay.setFeatures(this.features_);\n  const featuresStyle = this['featuresStyleFn']();\n  if (featuresStyle !== undefined) {\n    googAsserts.assertInstanceof(featuresStyle, olStyleStyle);\n    featuresOverlay.setStyle(featuresStyle);\n  }\n\n  const highlightFeaturesOverlay = this.ngeoFeatureOverlayMgr_.getFeatureOverlay();\n  highlightFeaturesOverlay.setFeatures(this.highlightFeatures_);\n  let highlightFeatureStyle = this['selectedFeatureStyleFn']();\n  if (highlightFeatureStyle !== undefined) {\n    googAsserts.assertInstanceof(highlightFeatureStyle, olStyleStyle);\n  } else {\n    const fill = new olStyleFill({color: [255, 0, 0, 0.6]});\n    const stroke = new olStyleStroke({color: [255, 0, 0, 1], width: 2});\n    highlightFeatureStyle = new olStyleStyle({\n      fill: fill,\n      image: new olStyleCircle({\n        fill: fill,\n        radius: 5,\n        stroke: stroke\n      }),\n      stroke: stroke,\n      zIndex: 10\n    });\n  }\n  highlightFeaturesOverlay.setStyle(highlightFeatureStyle);\n\n  const mapFn = this['getMapFn'];\n  if (mapFn) {\n    const map = mapFn();\n    googAsserts.assertInstanceof(map, olMap);\n    this.map_ = map;\n  }\n};\n\n/**\n * Returns a list of grid sources in the order they were loaded.\n * @export\n * @return {Array.<gmfx.GridSource>} Grid sources.\n */\nexports.Controller_.prototype.getGridSources = function() {\n  return this.loadedGridSources.map(sourceLabel => this.gridSources[sourceLabel]);\n};\n\n\n/**\n * @private\n */\nexports.Controller_.prototype.updateData_ = function() {\n  // close if there are no results\n  if (this.ngeoQueryResult.total === 0 && !this.hasOneWithTooManyResults_()) {\n    const oldActive = this.active;\n    this.clear();\n    if (oldActive) {\n      // don't close if there are pending queries\n      this.active = this.ngeoQueryResult.pending;\n      this.pending = this.ngeoQueryResult.pending;\n    }\n    return;\n  }\n\n  this.active = true;\n  this.pending = false;\n  let sources = this.ngeoQueryResult.sources;\n  // merge sources if requested\n  if (Object.keys(this.mergeTabs).length > 0) {\n    sources = this.getMergedSources_(sources);\n  }\n\n  // create grids (only for source with features or with too many results)\n  sources.forEach((source) => {\n    if (source.tooManyResults) {\n      this.makeGrid_(null, source);\n    } else {\n      source.id = this.escapeValue(source.id);\n      const features = source.features;\n      if (features.length > 0) {\n        this.collectData_(source);\n      }\n    }\n  });\n\n  if (this.loadedGridSources.length === 0) {\n    // if no grids were created, do not show\n    this.active = false;\n    return;\n  }\n\n  // keep the first existing navigation tab open\n  if (this.selectedTab === null || !((`${this.selectedTab}`) in this.gridSources)) {\n    // selecting the tab is done in a timeout, because otherwise in rare cases\n    // `ng-class` might set the `active` class on multiple tabs.\n    this.$timeout_(() => {\n      const firstSourceId = this.loadedGridSources[0];\n      this.selectTab(this.gridSources[firstSourceId]);\n    }, 0);\n  }\n};\n\n\n/**\n * @private\n * @return {boolean} If one of the source has too many results.\n */\nexports.Controller_.prototype.hasOneWithTooManyResults_ = function() {\n  return this.ngeoQueryResult.sources.some(source => source.tooManyResults);\n};\n\n/**\n * Returns the value with all symbols and spaces replaced by an underscore.\n * @param {string|number} value A value to escape.\n * @returns {string|number} value An escaped value.\n * @export\n */\nexports.Controller_.prototype.escapeValue = function(value) {\n  // Work-around for Number.isInteger() when not always getting a number ...\n  if (Number.isInteger(/** @type {number} */ (value))) {\n    return value;\n  } else {\n    const toEscape = /[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\ |]/g;\n    if (value.match(toEscape) !== null) {\n      return value.replace(toEscape, '_');\n    } else {\n      return value;\n    }\n  }\n};\n\n\n/**\n * Returns if the given grid source is selected?\n * @export\n * @param {gmfx.GridSource} gridSource Grid source.\n * @return {boolean} Is selected?\n */\nexports.Controller_.prototype.isSelected = function(gridSource) {\n  return this.selectedTab === gridSource.source.label;\n};\n\n\n/**\n * Try to merge the mergable sources.\n * @param {Array.<ngeox.QueryResultSource>} sources Sources.\n * @return {Array.<ngeox.QueryResultSource>} The merged sources.\n * @private\n */\nexports.Controller_.prototype.getMergedSources_ = function(sources) {\n  const allSources = [];\n  /** @type {Object.<string, ngeox.QueryResultSource>} */\n  const mergedSources = {};\n\n  sources.forEach((source) => {\n    // check if this source can be merged\n    const mergedSource = this.getMergedSource_(source, mergedSources);\n\n    if (mergedSource === null) {\n      // this source should not be merged, add as is\n      allSources.push(source);\n    }\n  });\n\n  for (const mergedSourceId in mergedSources) {\n    allSources.push(mergedSources[mergedSourceId]);\n  }\n\n  return allSources;\n};\n\n\n/**\n * Check if the given source should be merged. If so, an artificial source\n * that will contain the features of all mergable sources is returned. If not,\n * `null` is returned.\n * @param {ngeox.QueryResultSource} source Source.\n * @param {Object.<string, ngeox.QueryResultSource>} mergedSources Merged sources.\n * @return {?ngeox.QueryResultSource} A merged source of null if the source should\n *    not be merged.\n * @private\n */\nexports.Controller_.prototype.getMergedSource_ = function(source, mergedSources) {\n  let mergeSourceId = null;\n\n  for (const currentMergeSourceId in this.mergeTabs) {\n    const sourceLabels = this.mergeTabs[currentMergeSourceId];\n    const containsSource = sourceLabels.some(sourceLabel => sourceLabel == source.label);\n    if (containsSource) {\n      mergeSourceId = currentMergeSourceId;\n      break;\n    }\n  }\n\n  if (mergeSourceId === null) {\n    // this source should not be merged\n    return null;\n  }\n\n  /** @type {ngeox.QueryResultSource} */\n  let mergeSource;\n  if (mergeSourceId in mergedSources) {\n    mergeSource = mergedSources[mergeSourceId];\n  } else {\n    mergeSource = {\n      features: [],\n      id: mergeSourceId,\n      label: mergeSourceId,\n      limit: this.maxResults,\n      pending: false,\n      queried: true,\n      tooManyResults: false,\n      totalFeatureCount: undefined\n    };\n    mergedSources[mergeSourceId] = mergeSource;\n  }\n\n  // add features of source to merge source\n  source.features.forEach((feature) => {\n    mergeSource.features.push(feature);\n  });\n\n  // if one of the source has too many results, the resulting merged source will\n  // also be marked with `tooManyResults` and will not contain any features.\n  mergeSource.tooManyResults = mergeSource.tooManyResults || source.tooManyResults;\n  if (mergeSource.tooManyResults) {\n    mergeSource.totalFeatureCount = (mergeSource.totalFeatureCount !== undefined) ?\n      mergeSource.totalFeatureCount + mergeSource.features.length : mergeSource.features.length;\n    mergeSource.features = [];\n  }\n  if (source.totalFeatureCount !== undefined) {\n    mergeSource.totalFeatureCount = (mergeSource.totalFeatureCount !== undefined) ?\n      mergeSource.totalFeatureCount + source.totalFeatureCount : source.totalFeatureCount;\n  }\n\n  return mergeSource;\n};\n\n\n/**\n * Collect all features in the queryResult object.\n * @param {ngeox.QueryResultSource} source Result source.\n * @private\n */\nexports.Controller_.prototype.collectData_ = function(source) {\n  const features = source.features;\n  const allProperties = [];\n  const featureGeometriesNames = [];\n  const featuresForSource = {};\n  let properties, featureGeometryName;\n  features.forEach((feature) => {\n    properties = feature.getProperties();\n    if (properties !== undefined) {\n      // Keeps distinct geometry names to remove theme later.\n      featureGeometryName = feature.getGeometryName();\n      if (featureGeometriesNames.indexOf(featureGeometryName) === -1) {\n        featureGeometriesNames.push(featureGeometryName);\n      }\n\n      allProperties.push(properties);\n      featuresForSource[ngeoGridConfig.getRowUid(properties)] = feature;\n    }\n  });\n\n  this.cleanProperties_(allProperties, featureGeometriesNames);\n  if (allProperties.length > 0) {\n    const gridCreated = this.makeGrid_(allProperties, source);\n    if (gridCreated) {\n      this.featuresForSources_[`${source.label}`] = featuresForSource;\n    }\n  }\n};\n\n\n/**\n * Remove all unwanted columns.\n * @param {Array.<Object>} allProperties A row.\n * @param {Array.<string>} featureGeometriesNames Geometry names.\n * @private\n */\nexports.Controller_.prototype.cleanProperties_ = function(\n  allProperties, featureGeometriesNames) {\n  allProperties.forEach((properties) => {\n    featureGeometriesNames.forEach((featureGeometryName) => {\n      delete properties[featureGeometryName];\n    });\n    delete properties['boundedBy'];\n    delete properties['ngeo_feature_type_'];\n  });\n\n  if (this.removeEmptyColumns_ === true) {\n    this.removeEmptyColumnsFn_(allProperties);\n  }\n};\n\n\n/**\n * Remove columns that will be completely empty between each properties.\n * @param {Array.<Object>} allProperties A row.\n * @private\n */\nexports.Controller_.prototype.removeEmptyColumnsFn_ = function(\n  allProperties) {\n  // Keep all keys that correspond to at least one value in a properties object.\n  const keysToKeep = [];\n  let i, key;\n  for (key in allProperties[0]) {\n    for (i = 0; i < allProperties.length; i++) {\n      if (allProperties[i][key] !== undefined) {\n        keysToKeep.push(key);\n        break;\n      }\n    }\n  }\n  // Get all keys that previously always refers always to an empty value.\n  let keyToRemove;\n  allProperties.forEach((properties) => {\n    keyToRemove = [];\n    for (key in properties) {\n      if (keysToKeep.indexOf(key) === -1) {\n        keyToRemove.push(key);\n      }\n    }\n    // Remove these keys.\n    keyToRemove.forEach((key) => {\n      delete properties[key];\n    });\n  });\n};\n\n\n/**\n * @param {?Array.<Object>} data Grid rows.\n * @param {ngeox.QueryResultSource} source Query source.\n * @return {boolean} Returns true if a grid was created.\n * @private\n */\nexports.Controller_.prototype.makeGrid_ = function(data, source) {\n  const sourceLabel = `${source.label}`;\n  let gridConfig = null;\n  if (data !== null) {\n    gridConfig = this.getGridConfiguration_(data);\n    if (gridConfig === null) {\n      return false;\n    }\n  }\n  if (this.loadedGridSources.indexOf(sourceLabel) == -1) {\n    this.loadedGridSources.push(sourceLabel);\n  }\n  this.gridSources[sourceLabel] = {\n    configuration: gridConfig,\n    source: source\n  };\n  return true;\n};\n\n\n/**\n * @param {Array.<!Object>} data Grid rows.\n * @return {?ngeo.grid.Config} Grid config.\n * @private\n */\nexports.Controller_.prototype.getGridConfiguration_ = function(\n  data) {\n  googAsserts.assert(data.length > 0);\n  const clone = {};\n  Object.assign(clone, data[0]);\n  delete clone.ol_uid;\n  const columns = Object.keys(clone);\n\n  /** @type {Array.<ngeox.GridColumnDef>} */\n  const columnDefs = [];\n  columns.forEach((column) => {\n    columnDefs.push(/** @type {ngeox.GridColumnDef} */ ({\n      name: column\n    }));\n  });\n\n  if (columnDefs.length > 0) {\n    return new ngeoGridConfig(data, columnDefs);\n  } else {\n    // no columns, do not show grid\n    return null;\n  }\n};\n\n\n/**\n * Remove the current selected feature and source and remove all features\n * from the map.\n * @export\n */\nexports.Controller_.prototype.clear = function() {\n  this.active = false;\n  this.pending = false;\n  this.gridSources = {};\n  this.loadedGridSources = [];\n  this.selectedTab = null;\n  this.tooManyResults = false;\n  this.features_.clear();\n  this.highlightFeatures_.clear();\n  this.ngeoMapQuerent_.clear();\n  this.featuresForSources_ = {};\n  if (this.unregisterSelectWatcher_) {\n    this.unregisterSelectWatcher_();\n  }\n};\n\n\n/**\n * Select the tab for the given grid source.\n * @param {gmfx.GridSource} gridSource Grid source.\n * @export\n */\nexports.Controller_.prototype.selectTab = function(gridSource) {\n  const source = gridSource.source;\n  this.selectedTab = source.label;\n\n  if (this.unregisterSelectWatcher_) {\n    this.unregisterSelectWatcher_();\n    this.unregisterSelectWatcher_ = null;\n  }\n\n  if (gridSource.configuration !== null) {\n    this.unregisterSelectWatcher_ = this.$scope_.$watchCollection(\n      () => gridSource.configuration.selectedRows,\n      (newSelected, oldSelectedRows) => {\n        if (Object.keys(newSelected) !== Object.keys(oldSelectedRows)) {\n          this.onSelectionChanged_();\n        }\n      });\n  }\n  this.updateFeatures_(gridSource);\n\n  this.reflowGrid_();\n};\n\n\n/**\n * @private\n */\nexports.Controller_.prototype.reflowGrid_ = function() {\n  // This is a \"work-around\" to make sure that the grid is rendered correctly.\n  // When a pane is activated by setting `this.selectedTab`, the class `active`\n  // is not yet set on the pane. That's why the class is set manually, and\n  // after the pane is shown (in the next digest loop), the grid table can\n  // be refreshed.\n  const id = this.escapeValue(this.selectedTab || '');\n  const activePane = this.$element_.find(`div.tab-pane#${id}`);\n  activePane.removeClass('active').addClass('active');\n  this.$timeout_(() => {\n    activePane.find('div.ngeo-grid-table-container table')['trigger']('reflow');\n  });\n};\n\n\n/**\n * Called when the row selection has changed.\n * @private\n */\nexports.Controller_.prototype.onSelectionChanged_ = function() {\n  if (this.selectedTab === null) {\n    return;\n  }\n\n  const gridSource = this.gridSources[`${this.selectedTab}`];\n  this.updateFeatures_(gridSource);\n};\n\n\n/**\n * @param {gmfx.GridSource} gridSource Grid source\n * @private\n */\nexports.Controller_.prototype.updateFeatures_ = function(gridSource) {\n  this.features_.clear();\n  this.highlightFeatures_.clear();\n\n  if (gridSource.configuration === null) {\n    return;\n  }\n\n  const sourceLabel = `${gridSource.source.label}`;\n  const featuresForSource = this.featuresForSources_[sourceLabel];\n  const selectedRows = gridSource.configuration.selectedRows;\n\n  for (const rowId in featuresForSource) {\n    const feature = featuresForSource[rowId];\n    if (rowId in selectedRows) {\n      this.highlightFeatures_.push(feature);\n    } else {\n      this.features_.push(feature);\n    }\n  }\n};\n\n\n/**\n * Get the currently shown grid source.\n * @export\n * @return {gmfx.GridSource|null} Grid source.\n */\nexports.Controller_.prototype.getActiveGridSource = function() {\n  if (this.selectedTab === null) {\n    return null;\n  } else {\n    return this.gridSources[`${this.selectedTab}`];\n  }\n};\n\n\n/**\n * Returns if a row of the currently active grid is selected?\n * @export\n * @return {boolean} Is one selected?\n */\nexports.Controller_.prototype.isOneSelected = function() {\n  const source = this.getActiveGridSource();\n  if (source === null || source.configuration === null) {\n    return false;\n  } else {\n    return source.configuration.getSelectedCount() > 0;\n  }\n};\n\n\n/**\n * Returns the number of selected rows of the currently active grid.\n * @export\n * @return {number} The number of selected rows.\n */\nexports.Controller_.prototype.getSelectedRowCount = function() {\n  const source = this.getActiveGridSource();\n  if (source === null || source.configuration === null) {\n    return 0;\n  } else {\n    return source.configuration.getSelectedCount();\n  }\n};\n\n\n/**\n * Select all rows of the currently active grid.\n * @export\n */\nexports.Controller_.prototype.selectAll = function() {\n  const source = this.getActiveGridSource();\n  if (source !== null) {\n    source.configuration.selectAll();\n  }\n};\n\n\n/**\n * Deselect all rows of the currently active grid.\n * @export\n */\nexports.Controller_.prototype.unselectAll = function() {\n  const source = this.getActiveGridSource();\n  if (source !== null) {\n    source.configuration.unselectAll();\n  }\n};\n\n\n/**\n * Invert the selection of the currently active grid.\n * @export\n */\nexports.Controller_.prototype.invertSelection = function() {\n  const source = this.getActiveGridSource();\n  if (source !== null) {\n    source.configuration.invertSelection();\n  }\n};\n\n\n/**\n * Zoom to the selected features.\n * @export\n */\nexports.Controller_.prototype.zoomToSelection = function() {\n  const source = this.getActiveGridSource();\n  if (source !== null) {\n    const extent = olExtent.createEmpty();\n    this.highlightFeatures_.forEach((feature) => {\n      olExtent.extend(extent, feature.getGeometry().getExtent());\n    });\n    const size = this.map_.getSize();\n    googAsserts.assert(size !== undefined);\n    const maxZoom = this.maxRecenterZoom;\n    this.map_.getView().fit(extent, {size, maxZoom});\n  }\n};\n\n\n/**\n * Start a CSV download for the selected features.\n * @export\n */\nexports.Controller_.prototype.downloadCsv = function() {\n  const source = this.getActiveGridSource();\n  if (source !== null) {\n    const columnDefs = source.configuration.columnDefs;\n    googAsserts.assert(columnDefs !== undefined);\n    const selectedRows = source.configuration.getSelectedRows();\n\n    this.ngeoCsvDownload_.startDownload(\n      selectedRows, columnDefs, this.filename_);\n  }\n};\n\n\nexports.controller('GmfDisplayquerygridController',\n  exports.Controller_);\n\n\nexport default exports;\n","/**\n * @module gmfapp.displayquerygrid\n */\nconst exports = {};\n\nimport './displayquerygrid.css';\nimport gmfDatasourceManager from 'gmf/datasource/Manager.js';\n\nimport gmfLayertreeComponent from 'gmf/layertree/component.js';\n\n/** @suppress {extraRequire} */\nimport gmfMapComponent from 'gmf/map/component.js';\n\n/** @suppress {extraRequire} */\nimport gmfQueryGridComponent from 'gmf/query/gridComponent.js';\n\nimport gmfThemeThemes from 'gmf/theme/Themes.js';\nimport ngeoGridModule from 'ngeo/grid/module.js';\nimport ngeoMapModule from 'ngeo/map/module.js';\nimport ngeoMiscBtnComponent from 'ngeo/misc/btnComponent.js';\nimport EPSG21781 from 'ngeo/proj/EPSG21781.js';\nimport ngeoQueryBboxQueryComponent from 'ngeo/query/bboxQueryComponent.js';\nimport ngeoQueryMapQueryComponent from 'ngeo/query/mapQueryComponent.js';\nimport olMap from 'ol/Map.js';\nimport olView from 'ol/View.js';\nimport olLayerTile from 'ol/layer/Tile.js';\nimport olSourceOSM from 'ol/source/OSM.js';\nimport olStyleCircle from 'ol/style/Circle.js';\nimport olStyleFill from 'ol/style/Fill.js';\nimport olStyleStroke from 'ol/style/Stroke.js';\nimport olStyleStyle from 'ol/style/Style.js';\n\n\n/** @type {!angular.Module} **/\nexports.module = angular.module('gmfapp', [\n  'gettext',\n  gmfDatasourceManager.module.name,\n  gmfLayertreeComponent.name,\n  gmfMapComponent.name,\n  gmfQueryGridComponent.name,\n  gmfThemeThemes.module.name,\n  ngeoGridModule.name,\n  ngeoMapModule.name, // for ngeo.map.FeatureOverlay, perhaps remove me\n  ngeoMiscBtnComponent.name,\n  ngeoQueryBboxQueryComponent.name,\n  ngeoQueryMapQueryComponent.name,\n]);\n\n\nexports.module.constant('ngeoQueryOptions', {\n  'limit': 20,\n  'queryCountFirst': true\n});\n\n\nexports.module.constant(\n  'gmfTreeUrl',\n  'https://geomapfish-demo.camptocamp.com/2.3/wsgi/themes?' +\n        'version=2&background=background');\n\nexports.module.constant('defaultTheme', 'Demo');\nexports.module.constant('angularLocaleScript', '../build/angular-locale_{{locale}}.js');\n\n\n/**\n * Demo, NOT USED.\n * A sample component to display the result.\n *\n * @type {!angular.Component}\n */\nexports.queryresultComponent = {\n  controller: 'gmfappQueryresultController',\n  template: require('./partials/queryresult.html')\n};\n\nexports.module.component('gmfappQueryresult', exports.queryresultComponent);\n\n\n/**\n * Demo, NOT USED.\n * @param {ngeox.QueryResult} ngeoQueryResult Query service.\n * @constructor\n * @ngInject\n */\nexports.QueryresultController = function(ngeoQueryResult) {\n\n  /**\n   * @type {ngeox.QueryResult}\n   * @export\n   */\n  this.result = ngeoQueryResult;\n\n};\n\n\nexports.module.controller('gmfappQueryresultController', exports.QueryresultController);\n\n\n/**\n * @constructor\n * @param {gmf.theme.Themes} gmfThemes The gmf themes service.\n * @param {gmf.datasource.Manager} gmfDataSourcesManager The gmf\n *     data sources manager service.\n * @param {ngeo.map.FeatureOverlayMgr} ngeoFeatureOverlayMgr The ngeo feature\n *   overlay manager service.\n * @ngInject\n */\nexports.MainController = function(gmfThemes, gmfDataSourcesManager,\n  ngeoFeatureOverlayMgr) {\n\n  gmfThemes.loadThemes();\n\n  const fill = new olStyleFill({color: [255, 170, 0, 0.6]});\n  const stroke = new olStyleStroke({color: [255, 170, 0, 1], width: 2});\n\n  /**\n   * FeatureStyle used by the displayquerygrid directive\n   * @type {ol.style.Style}\n   * @export\n   */\n  this.featureStyle = new olStyleStyle({\n    fill: fill,\n    image: new olStyleCircle({\n      fill: fill,\n      radius: 5,\n      stroke: stroke\n    }),\n    stroke: stroke\n  });\n\n  /**\n   * @type {ol.Map}\n   * @export\n   */\n  this.map = new olMap({\n    layers: [\n      new olLayerTile({\n        source: new olSourceOSM()\n      })\n    ],\n    view: new olView({\n      projection: EPSG21781,\n      resolutions: [200, 100, 50, 20, 10, 5, 2.5, 2, 1, 0.5],\n      center: [537635, 152640],\n      zoom: 3\n    })\n  });\n\n  // Init the datasources with our map.\n  gmfDataSourcesManager.setDatasourceMap(this.map);\n\n  /**\n   * @type {Array.<Object>|undefined}\n   * export\n   */\n  this.themes = undefined;\n\n  /**\n   * @type {Object|undefined}\n   * @export\n   */\n  this.treeSource = undefined;\n\n  /**\n   * @type {boolean}\n   * @export\n   */\n  this.queryActive = true;\n\n  /**\n   * @type {boolean}\n   * @export\n   */\n  this.queryGridActive = true;\n\n  gmfThemes.getThemesObject().then((themes) => {\n    if (themes) {\n      this.themes = themes;\n      this.treeSource = themes[3];\n    }\n  });\n\n  ngeoFeatureOverlayMgr.init(this.map);\n};\n\nexports.module.controller('MainController', exports.MainController);\n\n\nexport default exports;\n","module.exports = \"<div class=\\\"gmf-displayquerygrid panel\\\" ng-show=ctrl.active> <div class=close ng-click=ctrl.clear()> &times; </div> <ul class=\\\"nav nav-pills\\\" role=tablist> <li ng-repeat=\\\"gridSource in ctrl.getGridSources() track by gridSource.source.label\\\" role=presentation ng-class=\\\"{'active' : ctrl.isSelected(gridSource)}\\\" ng-click=ctrl.selectTab(gridSource)> <a href=#{{ctrl.escapeValue(gridSource.source.label)}} data-target=#{{ctrl.escapeValue(gridSource.source.label)}} aria-controls={{ctrl.escapeValue(gridSource.source.label)}} role=tab data-toggle=tab> <span ng-if=\\\"gridSource.source.tooManyResults !== true\\\"> {{gridSource.source.label | translate}} ({{gridSource.source.features.length}}) </span> <span ng-if=\\\"gridSource.source.tooManyResults === true\\\"> {{gridSource.source.label | translate}} ({{gridSource.source.totalFeatureCount}}*) </span> </a> </li> </ul> <div class=tab-content> <div ng-repeat=\\\"gridSource in ctrl.getGridSources() track by gridSource.source.label\\\" role=tabpanel class=tab-pane ng-class=\\\"{'active' : ctrl.isSelected(gridSource)}\\\" id={{ctrl.escapeValue(gridSource.source.label)}}> <ngeo-grid ngeo-grid-configuration=gridSource.configuration ng-if=\\\"gridSource.source.tooManyResults !== true\\\"> </ngeo-grid> <div ng-if=\\\"gridSource.source.tooManyResults === true\\\"> <div class=\\\"gmf-displayquerygrid-message alert alert-warning\\\"> <p><span translate>The results can not be displayed because the maximum number has been reached</span> ({{gridSource.source.limit}}).</p> <p translate>Please refine your query.</p> </div> </div> </div> </div> <div class=navbar ng-show=\\\"!ctrl.pending && ctrl.getActiveGridSource() && ctrl.getActiveGridSource().configuration !== null\\\"> <ul class=\\\"nav navbar-nav navbar-right\\\"> <li class=ng-hide ng-show=ctrl.isOneSelected()> <p class=\\\"navbar-text ng-binding\\\"> {{ctrl.getSelectedRowCount()}} <span translate>selected element(s)</span> </p> </li> <li ng-show=ctrl.isOneSelected() class=ng-hide> <button class=\\\"btn btn-link btn-xs\\\" title=\\\"{{'Zoom to selection' | translate}}\\\" ng-click=ctrl.zoomToSelection()> <i class=\\\"fa fa-search-plus\\\"></i> <span translate>Zoom to</span> </button> </li> <li ng-show=ctrl.isOneSelected() class=ng-hide> <button class=\\\"btn btn-link btn-xs\\\" title=\\\"{{'Export selection as CSV' | translate}}\\\" ng-click=ctrl.downloadCsv()> <i class=\\\"fa fa-download\\\"></i> <span translate>Export as CSV</span> </button> </li> <li class=\\\"dropdown navbar-link dropup\\\"> <button type=button class=\\\"dropup btn btn-default btn-xs\\\" data-toggle=dropdown aria-haspopup=true aria-expanded=false> <span translate>Select</span> <span class=caret></span> </button> <ul class=dropdown-menu aria-labelledby=dLabel> <li> <a href=\\\"\\\" ng-click=ctrl.selectAll() translate>All</a> </li> <li> <a href=\\\"\\\" ng-click=ctrl.unselectAll() translate>None</a> </li> <li> <a href=\\\"\\\" ng-click=ctrl.invertSelection() translate>Reverse selection</a> </li> </ul> </li> </ul> </div> <div ng-show=ctrl.pending class=gmf-displayquerygrid-pending> <span class=\\\"fa fa-spinner fa-spin\\\"></span> </div> </div> \";"],"sourceRoot":""}