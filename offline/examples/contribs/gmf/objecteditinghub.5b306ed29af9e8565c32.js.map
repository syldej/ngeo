{"version":3,"sources":["webpack:///./node_modules/openlayers/src/ol/format/filter/Filter.js","webpack:///./node_modules/openlayers/src/ol/format/filter/LogicalNary.js","webpack:///./node_modules/openlayers/src/ol/format/filter/And.js","webpack:///./node_modules/openlayers/src/ol/format/filter/Bbox.js","webpack:///./node_modules/openlayers/src/ol/format/filter/Spatial.js","webpack:///./node_modules/openlayers/src/ol/format/filter/Contains.js","webpack:///./node_modules/openlayers/src/ol/format/filter/Comparison.js","webpack:///./node_modules/openlayers/src/ol/format/filter/During.js","webpack:///./node_modules/openlayers/src/ol/format/filter/ComparisonBinary.js","webpack:///./node_modules/openlayers/src/ol/format/filter/EqualTo.js","webpack:///./node_modules/openlayers/src/ol/format/filter/GreaterThan.js","webpack:///./node_modules/openlayers/src/ol/format/filter/GreaterThanOrEqualTo.js","webpack:///./node_modules/openlayers/src/ol/format/filter/Intersects.js","webpack:///./node_modules/openlayers/src/ol/format/filter/IsBetween.js","webpack:///./node_modules/openlayers/src/ol/format/filter/IsLike.js","webpack:///./node_modules/openlayers/src/ol/format/filter/IsNull.js","webpack:///./node_modules/openlayers/src/ol/format/filter/LessThan.js","webpack:///./node_modules/openlayers/src/ol/format/filter/LessThanOrEqualTo.js","webpack:///./node_modules/openlayers/src/ol/format/filter/Not.js","webpack:///./node_modules/openlayers/src/ol/format/filter/NotEqualTo.js","webpack:///./node_modules/openlayers/src/ol/format/filter/Or.js","webpack:///./node_modules/openlayers/src/ol/format/filter/Within.js","webpack:///./node_modules/openlayers/src/ol/format/filter.js","webpack:///./node_modules/openlayers/src/ol/format/XSD.js","webpack:///./node_modules/openlayers/src/ol/geom/MultiLineString.js","webpack:///./node_modules/openlayers/src/ol/format/JSONFeature.js","webpack:///./node_modules/openlayers/src/ol/format/GeoJSON.js","webpack:///./node_modules/openlayers/src/ol/geom/MultiPoint.js","webpack:///./node_modules/openlayers/src/ol/geom/MultiPolygon.js","webpack:///./src/format/Attribute.js","webpack:///./contribs/gmf/src/theme/Themes.js","webpack:///./contribs/gmf/src/editing/EditFeature.js","webpack:///./src/format/XSDAttribute.js","webpack:///./node_modules/openlayers/src/ol/format/XMLFeature.js","webpack:///./contribs/gmf/src/editing/XSDAttributes.js","webpack:///./contribs/gmf/src/objectediting/Manager.js","webpack:///./src/format/AttributeType.js","webpack:///./node_modules/openlayers/src/ol/format/GMLBase.js","webpack:///./src/map/LayerHelper.js","webpack:///./contribs/gmf/examples/objecteditinghub.js","webpack:///./node_modules/openlayers/src/ol/format/XML.js","webpack:///./node_modules/openlayers/src/ol/format/GML2.js","webpack:///./src/utils.js","webpack:///./node_modules/openlayers/src/ol/format/XLink.js","webpack:///./node_modules/openlayers/src/ol/Image.js","webpack:///./node_modules/openlayers/src/ol/source/ImageWMS.js","webpack:///./node_modules/openlayers/src/ol/format/WFS.js","webpack:///./node_modules/openlayers/src/ol/source/common.js","webpack:///./node_modules/openlayers/src/ol/source/WMSServerType.js","webpack:///./node_modules/openlayers/src/ol/source/TileWMS.js","webpack:///./src/statemanager/Location.js","webpack:///./node_modules/openlayers/src/ol/format/GML3.js","webpack:///./node_modules/openlayers/src/ol/geom/GeometryCollection.js","webpack:///./node_modules/openlayers/src/ol/format/OWS.js","webpack:///./node_modules/openlayers/src/ol/format/WMTSCapabilities.js"],"names":["Filter","tagName","this","tagName_","prototype","getTagName","filter_Filter","LogicalNary","conditions","call","Array","slice","arguments","Object","asserts","length","ol","filter_LogicalNary","And","params","concat","apply","filter_And","Bbox","geometryName","extent","opt_srsName","srsName","filter_Bbox","Spatial","geometry","filter_Spatial","Contains","filter_Contains","Comparison","propertyName","filter_Comparison","During","begin","end","filter_During","ComparisonBinary","expression","opt_matchCase","matchCase","filter_ComparisonBinary","EqualTo","filter_EqualTo","GreaterThan","filter_GreaterThan","GreaterThanOrEqualTo","filter_GreaterThanOrEqualTo","Intersects","filter_Intersects","IsBetween","lowerBoundary","upperBoundary","filter_IsBetween","IsLike","pattern","opt_wildCard","opt_singleChar","opt_escapeChar","wildCard","undefined","singleChar","escapeChar","filter_IsLike","IsNull","filter_IsNull","LessThan","filter_LessThan","LessThanOrEqualTo","filter_LessThanOrEqualTo","Not","condition","filter_Not","NotEqualTo","filter_NotEqualTo","Or","filter_Or","Within","filter_Within","_ol_format_filter_","and","Function","bind","or","not","bbox","contains","intersects","within","equalTo","notEqualTo","lessThan","lessThanOrEqualTo","greaterThan","greaterThanOrEqualTo","isNull","between","like","during","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_0__xml_js__","__webpack_require__","__WEBPACK_IMPORTED_MODULE_1__string_js__","XSD","readBoolean","node","s","getAllTextContent","readBooleanString","string","m","exec","readDateTime","dateTime","Date","parse","isNaN","readDecimal","readDecimalString","parseFloat","readNonNegativeInteger","readNonNegativeIntegerString","parseInt","readString","trim","writeBooleanTextNode","bool","writeStringTextNode","writeCDATASection","appendChild","DOCUMENT","createCDATASection","writeDateTimeTextNode","date","getUTCFullYear","padNumber","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","createTextNode","writeDecimalTextNode","decimal","toPrecision","writeNonNegativeIntegerTextNode","nonNegativeInteger","toString","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0__index_js__","__WEBPACK_IMPORTED_MODULE_1__array_js__","__WEBPACK_IMPORTED_MODULE_2__extent_js__","__WEBPACK_IMPORTED_MODULE_3__geom_GeometryLayout_js__","__WEBPACK_IMPORTED_MODULE_4__geom_GeometryType_js__","__WEBPACK_IMPORTED_MODULE_5__geom_LineString_js__","__WEBPACK_IMPORTED_MODULE_6__geom_SimpleGeometry_js__","__WEBPACK_IMPORTED_MODULE_7__geom_flat_closest_js__","__WEBPACK_IMPORTED_MODULE_8__geom_flat_deflate_js__","__WEBPACK_IMPORTED_MODULE_9__geom_flat_inflate_js__","__WEBPACK_IMPORTED_MODULE_10__geom_flat_interpolate_js__","__WEBPACK_IMPORTED_MODULE_11__geom_flat_intersectsextent_js__","__WEBPACK_IMPORTED_MODULE_12__geom_flat_simplify_js__","MultiLineString","coordinates","opt_layout","ends_","maxDelta_","maxDeltaRevision_","setCoordinates","appendLineString","lineString","flatCoordinates","getFlatCoordinates","push","changed","clone","multiLineString","setFlatCoordinates","layout","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","getsMaxSquaredDelta","stride","getsClosestPoint","getCoordinateAtM","opt_extrapolate","opt_interpolate","XYM","XYZM","extrapolate","interpolate","lineStringsCoordinateAtM","getCoordinates","coordinatess","getEnds","getLineString","index","getLineStrings","ends","lineStrings","i","ii","offset","getFlatMidpoints","midpoints","midpoint","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","simplifiedEnds","douglasPeuckers","simplifiedMultiLineString","XY","getType","MULTI_LINE_STRING","intersectsExtent","setLayout","setFlatCoordinatesInternal","setLineStrings","getLayout","JSONFeature","format_Feature","getObject","source","object","JSON","FormatType","readFeature","opt_options","readFeatureFromObject","getReadOptions","readFeatures","readFeaturesFromObject","readGeometry","readGeometryFromObject","readProjection","readProjectionFromObject","writeFeature","feature","stringify","writeFeatureObject","writeFeatures","features","writeFeaturesObject","writeGeometry","writeGeometryObject","format_JSONFeature","GeoJSON","options","defaultDataProjection","proj","featureProjection","defaultFeatureProjection","geometryName_","extractGeometryName_","extractGeometryName","GEOMETRY_READERS","Point","LineString","Polygon","MultiPoint","MultiPolygon","GeometryCollection","geometries","map","GEOMETRY_WRITERS","type","right","rightHanded","getGeometriesArray","obj","Circle","geometryReader","geometryWriter","geoJSONFeature","Feature","setGeometryName","geometry_name","setGeometry","id","setId","properties","setProperties","geoJSONFeatures","crs","projection","name","adaptOptions","getId","getGeometry","getProperties","getGeometryName","objects","__WEBPACK_IMPORTED_MODULE_5__geom_Point_js__","__WEBPACK_IMPORTED_MODULE_7__geom_flat_deflate_js__","__WEBPACK_IMPORTED_MODULE_8__geom_flat_inflate_js__","__WEBPACK_IMPORTED_MODULE_9__math_js__","appendPoint","point","multiPoint","j","squaredDistance","getPoint","n","getPoints","points","MULTI_POINT","__WEBPACK_IMPORTED_MODULE_5__geom_MultiPoint_js__","__WEBPACK_IMPORTED_MODULE_6__geom_Polygon_js__","__WEBPACK_IMPORTED_MODULE_7__geom_SimpleGeometry_js__","__WEBPACK_IMPORTED_MODULE_8__geom_flat_area_js__","__WEBPACK_IMPORTED_MODULE_9__geom_flat_center_js__","__WEBPACK_IMPORTED_MODULE_10__geom_flat_closest_js__","__WEBPACK_IMPORTED_MODULE_11__geom_flat_contains_js__","__WEBPACK_IMPORTED_MODULE_12__geom_flat_deflate_js__","__WEBPACK_IMPORTED_MODULE_13__geom_flat_inflate_js__","__WEBPACK_IMPORTED_MODULE_14__geom_flat_interiorpoint_js__","__WEBPACK_IMPORTED_MODULE_15__geom_flat_intersectsextent_js__","__WEBPACK_IMPORTED_MODULE_16__geom_flat_orient_js__","__WEBPACK_IMPORTED_MODULE_17__geom_flat_simplify_js__","endss_","flatInteriorPointsRevision_","flatInteriorPoints_","orientedRevision_","orientedFlatCoordinates_","appendPolygon","polygon","multiPolygon","len","newEndss","getssMaxSquaredDelta","getssClosestPoint","getOrientedFlatCoordinates","containsXY","linearRingssContainsXY","getArea","linearRingss","opt_right","orientLinearRingss","coordinatesss","getEndss","getFlatInteriorPoints","flatCenters","getInteriorPoints","interiorPoints","linearRingssAreOriented","simplifiedEndss","quantizess","simplifiedMultiPolygon","getPolygon","prevEnds","getPolygons","endss","polygons","jj","MULTI_POLYGON","lastEnds","setPolygons","_AttributeType","exports","attribute","ngeoFormatAttributeType","GEOMETRY","geomType","olBase","olArray","$http","$injector","$q","ngeoLayerHelper","gettextCatalog","gmfThemesOptions","olEventsEventTarget","addBlankBackgroundLayer_","addBlankBackgroundLayer","$q_","$http_","treeUrl_","has","get","cacheVersion_","ngeoLocation_","layerHelper_","deferred_","defer","promise_","promise","loaded","bgLayerPromise_","inherits","findGroupByLayerNodeName","themes","theme","children","group","childNodes","getFlatNodes","findObjectByName","findGroupByName","internalNodes","getFlatInternalNodes","objectName","find","findThemeByName","themeName","nodes","getBgLayers","appDimensions","_this","layerHelper","callback","item","layer","set","metadata","dimensions","ids","getIds","array","getUid","forEach","child","layerLayerCreationFn","ogcServers","gmfLayer","gmfLayerWMTS","googAsserts","assert","url","createWMTSLayerFromCapabilitites","then","response","message","console","error","resolve","gmfLayerWMS","ogcServer","server","imageType","createBasicWMSLayer","layers","credential","fail","promiseSuccessFn","data","promises","background_layers","itemType","reverse","all","collection","filter","l","olCollection","createBasicGroup","layerGroupCreationFn","values","getString","olLayerTile","label","thumbnail","getThemeObject","getThemesObject","getBackgroundLayersObject","getOgcServersObject","hasEditableLayers","hasEditableLayers_","_this2","some","hasNodeEditableLayers_","editable","getSnappingConfig","snappingConfig","getNodeMaxResolution","maxResolution","maxResolutionHint","getNodeMinResolution","minResolution","minResolutionHint","loadThemes","opt_roleId","_this3","role","cache_version","cache","withCredentials","errors","join","hasParam","window","alert","dispatchEvent","reject","NodeType","MIXED_GROUP","NOT_MIXED_GROUP","WMTS","WMS","module","angular","ngeoMapLayerHelper","service","requires","olUri","gmfLayersUrl","http_","baseUrl_","getFeaturesInExtent","layerIds","appendParams","handleGetFeatures_","getFeaturesWithComparisonFilters","filters","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","property","operator","err","return","resp","olFormatGeoJSON","insertFeatures","layerId","geoJSON","post","headers","Content-Type","updateFeature","put","deleteFeature","delete","gmfBase","olFormatXML","read","readFromDocument","doc","nodeType","Node","DOCUMENT_NODE","firstChild","nextSibling","ELEMENT_NODE","readFromNode","localName","elements","getElementsByTagName","attributes","readFromElementNode_","getAttribute","assertString","alias","nillable","required","ngeoFormatAttribute","setGeometryType","setAttributeByXsdType_","enumerations","SELECT","choices","restrictions","restrictionNode","maxLengths","maxLength","Number","BOOLEAN","DATE","DATETIME","TIME","NUMBER","numType","NumberType","FLOAT","INTEGER","TEXT","getGeometryAttribute","geomAttribute","__WEBPACK_IMPORTED_MODULE_2__format_Feature_js__","__WEBPACK_IMPORTED_MODULE_3__format_FormatType_js__","__WEBPACK_IMPORTED_MODULE_4__xml_js__","XMLFeature","xmlSerializer_","XMLSerializer","XML","isDocument","readFeatureFromDocument","isNode","readFeatureFromNode","readFeaturesFromDocument","readFeaturesFromNode","readGeometryFromDocument","readGeometryFromNode","readProjectionFromDocument","readProjectionFromNode","writeFeatureNode","serializeToString","writeFeaturesNode","writeGeometryNode","promises_","getAttributes","handleGetAttributes_","ngeoFormatXSDAttribute","gmfEditFeature","ngeoLocation","q_","gmfEditFeature_","getFeatureDefered_","getFeature","getParam","Param","GEOM_TYPE","ID","LAYER","PROPERTY","THEME","getGeomType","getLayerNodeId","getParamAsInt","key","featureProperties","olFeature","gmfEditingEditFeature","ngeoStatemanagerLocation","__WEBPACK_IMPORTED_MODULE_2__Feature_js__","__WEBPACK_IMPORTED_MODULE_3__format_Feature_js__","__WEBPACK_IMPORTED_MODULE_4__format_XMLFeature_js__","__WEBPACK_IMPORTED_MODULE_5__geom_GeometryLayout_js__","__WEBPACK_IMPORTED_MODULE_6__geom_LineString_js__","__WEBPACK_IMPORTED_MODULE_7__geom_LinearRing_js__","__WEBPACK_IMPORTED_MODULE_8__geom_MultiLineString_js__","__WEBPACK_IMPORTED_MODULE_9__geom_MultiPoint_js__","__WEBPACK_IMPORTED_MODULE_10__geom_MultiPolygon_js__","__WEBPACK_IMPORTED_MODULE_11__geom_Point_js__","__WEBPACK_IMPORTED_MODULE_12__geom_Polygon_js__","__WEBPACK_IMPORTED_MODULE_13__obj_js__","__WEBPACK_IMPORTED_MODULE_14__proj_js__","__WEBPACK_IMPORTED_MODULE_15__xml_js__","GMLBase","featureType","featureNS","schemaLocation","FEATURE_COLLECTION_PARSERS","GMLNS","featureMember","makeReplacer","readFeaturesInternal","featureMembers","ONLY_WHITESPACE_RE_","objectStack","namespaceURI","pushParseAndPop","context","prefix","defaultPrefix","ft","nodeName","split","pop","indexOf","count","uri","candidate","ns","parsersNS","featureTypes","isArray","p","parsers","makeArrayPusher","readFeatureElement","readGeometryElement","firstElementChild","GEOMETRY_PARSERS_","fid","getAttributeNS","nextElementSibling","test","readPoint","readFlatCoordinatesFromNode_","XYZ","readMultiPoint","MULTIPOINT_PARSERS_","readMultiLineString","MULTILINESTRING_PARSERS_","readMultiPolygon","MULTIPOLYGON_PARSERS_","pointMemberParser_","parseNode","POINTMEMBER_PARSERS_","lineStringMemberParser_","LINESTRINGMEMBER_PARSERS_","polygonMemberParser_","POLYGONMEMBER_PARSERS_","readLineString","readFlatLinearRing_","ring","GEOMETRY_FLAT_COORDINATES_PARSERS_","readLinearRing","readPolygon","flatLinearRings","FLAT_LINEAR_RINGS_PARSERS_","http://www.opengis.net/gml","pointMember","pointMembers","lineStringMember","lineStringMembers","polygonMember","polygonMembers","RING_PARSERS","LinearRing","olObj","GROUP_KEY","REFRESH_PARAM","sourceURL","sourceLayersName","sourceFormat","opt_serverType","opt_time","opt_params","opt_crossOrigin","FORMAT","LAYERS","olServerType","replace","olSourceImageWMS","serverType","crossOrigin","updateParams","olLayerImage","createBasicWMSLayerFromDataSource","dataSource","wmsUrl","layerNames","getOGCLayerNames","ogcServerType","ogcImageType","setVisible","visible","capabilitiesURL","layerName","opt_dimensions","parser","olFormatWMTSCapabilities","preload","Infinity","result","olSourceWMTS","optionsFromCapabilities","isEmpty","updateDimensions","setSource","elt","createWMTSLayerFromCapabilititesObj","capabilities","layerCap","capabilitiesStyles","opt_layers","olLayerGroup","setLayers","getGroupFromMap","groupName","getLayerGroup","getLayers","getArray","existingGroup","addLayer","getFlatLayers","getFlatLayers_","getLayerByName","found","sublayers","getWMTSLegendURL","styles","legendURL","getWMSLegendURL","opt_scale","opt_legendRule","queryString","TRANSPARENT","SERVICE","VERSION","REQUEST","isLayerVisible","getVisible","currentResolution","getView","getResolution","getMinResolution","getMaxResolution","refreshWMSLayer","source_","getSource","olSourceTileWMS","getParams","random","updateWMSLayerState","names","getQuerySourceIds","ngeoBase","gmfEditingXSDAttributes","gmfObjecteditingManager","gmfThemeThemes","constant","MainController","$scope","gmfThemes","gmfXSDAttributes","gmfThemes_","gmfXSDAttributes_","urls","viewerUrlDev_","viewerUrlHosted_","selectedUrl","gmfServers_","gmfServer_","gmfLayerNodes","selectedGmfLayerNode","featuresCache_","selectedFeature","geomTypeCache_","selectedGeomType","$watch","newVal","oldVal","getFeatures_","getGeometryType_","handleGetGeometryType_","groupNode","gmfServer","wfsSupport","urlWfs","identifierAttributeField","runEditor","open","runViewerDev","runViewer_","runViewerHosted","baseUrl","nodeId","nodeIdAttrFieldName","gmfLayerNode","getFeaturesDeferred_","getFeaturesFromCache_","issueGetFeatures_","TYPENAME","olFormatWFS","getGeometryTypeDeferred_","getGeometryTypeFromCache_","issueGetAttributesRequest_","geomAttr","keyParams","keys","k","encodeURIComponent","qs","controller","__WEBPACK_IMPORTED_MODULE_1__extent_js__","__WEBPACK_IMPORTED_MODULE_3__format_GMLBase_js__","__WEBPACK_IMPORTED_MODULE_4__format_XSD_js__","__WEBPACK_IMPORTED_MODULE_5__geom_Geometry_js__","__WEBPACK_IMPORTED_MODULE_6__obj_js__","__WEBPACK_IMPORTED_MODULE_7__proj_js__","__WEBPACK_IMPORTED_MODULE_8__xml_js__","GML2","schemaLocation_","readFlatCoordinates_","containerSrs","axisOrientation","getAxisOrientation","coordsGroups","z","coords","substr","readBox_","BOX_PARSERS_","innerBoundaryIsParser_","flatLinearRing","outerBoundaryIsParser_","innerBoundaryIs","outerBoundaryIs","Box","GEOMETRY_NODE_FACTORY_","opt_nodeName","multiSurface","surface","multiCurve","createElementNS","writeFeatureElement","setAttribute","serializers","makeChildAppender","writeGeometryElement","pushSerializeAndPop","makeSimpleNodeFactory","dataProjection","GEOMETRY_SERIALIZERS_","writeCurveOrLineString_","createCoordinatesNode_","writeCoordinates_","segments","writeCurveSegments_","hasZ","parts","getCoords_","line","writeSurfaceOrPolygon_","rings","getLinearRings","RING_SERIALIZERS_","RING_NODE_FACTORY_","patches","writeSurfacePatches_","parentNode","exteriorWritten","writeRing_","linearRing","writeLinearRing_","opt_hasZ","writeMultiCurveOrLineString_","curve","lines","LINESTRINGORCURVEMEMBER_SERIALIZERS_","MULTIGEOMETRY_MEMBER_NODE_FACTORY_","writePoint_","coord","writeMultiPoint_","POINTMEMBER_SERIALIZERS_","writePointMember_","writeLineStringOrCurveMember_","writeMultiSurfaceOrPolygon_","SURFACEORPOLYGONMEMBER_SERIALIZERS_","writeSurfaceOrPolygonMember_","writeEnvelope","ENVELOPE_SERIALIZERS_","OBJECT_PROPERTY_NODE_FACTORY","Curve","MultiCurve","Surface","MultiSurface","Envelope","curveMember","MULTIGEOMETRY_TO_MEMBER_NODENAME_","surfaceMember","lowerCorner","upperCorner","olExtent","multiGeom","olGeomPoint","olGeomMultiPoint","olGeomLineString","olGeomMultiLineString","olGeomPolygon","olGeomMultiPolygon","navigator","userAgent","hex","getTopLeft","getTopRight","getBottomRight","getBottomLeft","rgb","r","g","b","Error","colorZeroPadding","queryData","pairs","substring","pair","indexOfEquals","decodeURIComponent","queryItem","event","olEventsCondition","noModifierKeys","singleClick","XLink","readHref","_ol_Image_","resolution","pixelRatio","src","imageLoadFunction","ImageBase","ImageState","IDLE","src_","image_","Image","imageListenerKeys_","state","imageLoadFunction_","getImage","handleImageError_","ERROR","unlistenImage_","handleImageLoad_","ol_extent","height","LOADED","load","LOADING","events","listenOnce","EventType","LOAD","setImage","image","unlistenByKey","ol_Image","ImageWMS","source_Image","attributions","resolutions","crossOrigin_","url_","defaultImageLoadFunction","params_","v13_","updateV13_","serverType_","hidpi_","hidpi","imageSize_","renderedRevision_","ratio_","ratio","GETFEATUREINFO_IMAGE_SIZE_","getGetFeatureInfoUrl","coordinate","projectionObj","sourceProjectionObj","getProjection","reproj","calculateSourceResolution","baseParams","common","QUERY_LAYERS","floor","getRequestUrl_","getImageInternal","findNearestResolution","imageResolution","center","viewWidth","ceil","viewHeight","viewExtent","requestWidth","requestHeight","requestExtent","getPixelRatio","round","listen","CHANGE","handleImageChange","getImageLoadFunction","size","getCode","WMSServerType","GEOSERVER","dpi","MAPSERVER","CARMENTA_SERVER","QGIS","getUrl","setImageLoadFunction","setUrl","version","compareVersions","__WEBPACK_IMPORTED_MODULE_1__asserts_js__","__WEBPACK_IMPORTED_MODULE_2__format_GML2_js__","__WEBPACK_IMPORTED_MODULE_3__format_GML3_js__","__WEBPACK_IMPORTED_MODULE_4__format_GMLBase_js__","__WEBPACK_IMPORTED_MODULE_5__format_filter_js__","__WEBPACK_IMPORTED_MODULE_6__format_XMLFeature_js__","__WEBPACK_IMPORTED_MODULE_7__format_XSD_js__","__WEBPACK_IMPORTED_MODULE_8__geom_Geometry_js__","__WEBPACK_IMPORTED_MODULE_9__obj_js__","__WEBPACK_IMPORTED_MODULE_10__proj_js__","__WEBPACK_IMPORTED_MODULE_11__xml_js__","WFS","featureType_","featureNS_","gmlFormat_","gmlFormat","SCHEMA_LOCATIONS","DEFAULT_VERSION","FEATURE_PREFIX","XMLNS","OGCNS","WFSNS","FESNS","1.1.0","1.0.0","getFeatureType","setFeatureType","readTransactionResponse","readTransactionResponseFromDocument","readTransactionResponseFromNode","readFeatureCollectionMetadata","readFeatureCollectionMetadataFromDocument","readFeatureCollectionMetadataFromNode","FEATURE_COLLECTION_PARSERS_","boundedBy","makeObjectPropertySetter","TRANSACTION_SUMMARY_PARSERS_","http://www.opengis.net/wfs","totalInserted","totalUpdated","totalDeleted","readTransactionSummary_","OGC_FID_PARSERS_","http://www.opengis.net/ogc","FeatureId","fidParser_","INSERT_RESULTS_PARSERS_","readInsertResults_","TRANSACTION_RESPONSE_PARSERS_","TransactionSummary","InsertResults","QUERY_SERIALIZERS_","PropertyName","writeFeature_","gmlVersion","writeOgcFidFilter_","getTypeName_","featurePrefix","writeDelete_","typeName","setAttributeNS","writeUpdate_","getKeys","TRANSACTION_SERIALIZERS_","writeProperty_","writeNative_","nativeElement","vendorId","safeToIgnore","Insert","Update","Delete","Property","Native","writeQuery_","propertyNames","writeFilterCondition_","GETFEATURE_SERIALIZERS_","writeBboxFilter_","writeOgcPropertyName_","writeContainsFilter_","writeIntersectsFilter_","writeWithinFilter_","writeDuringFilter_","valueReference","timePeriod","writeTimeInstant_","writeLogicalFilter_","writeNotFilter_","writeComparisonFilter_","writeOgcLiteral_","writeIsNullFilter_","writeIsBetweenFilter_","writeIsLikeFilter_","writeOgcExpression_","time","timeInstant","timePosition","Query","BBOX","PropertyIsEqualTo","PropertyIsNotEqualTo","PropertyIsLessThan","PropertyIsLessThanOrEqualTo","PropertyIsGreaterThan","PropertyIsGreaterThanOrEqualTo","PropertyIsNull","PropertyIsBetween","PropertyIsLike","writeFilter","writeGetFeature_","writeGetFeature","handle","outputFormat","maxFeatures","resultType","startIndex","writeTransaction","inserts","updates","deletes","baseObj","gmlOptions","nativeElements","__WEBPACK_IMPORTED_MODULE_0__common_js__","__WEBPACK_IMPORTED_MODULE_1__index_js__","__WEBPACK_IMPORTED_MODULE_2__asserts_js__","__WEBPACK_IMPORTED_MODULE_3__extent_js__","__WEBPACK_IMPORTED_MODULE_4__obj_js__","__WEBPACK_IMPORTED_MODULE_5__math_js__","__WEBPACK_IMPORTED_MODULE_6__proj_js__","__WEBPACK_IMPORTED_MODULE_7__reproj_js__","__WEBPACK_IMPORTED_MODULE_8__size_js__","__WEBPACK_IMPORTED_MODULE_9__source_TileImage_js__","__WEBPACK_IMPORTED_MODULE_10__source_WMSServerType_js__","__WEBPACK_IMPORTED_MODULE_11__tilecoord_js__","__WEBPACK_IMPORTED_MODULE_12__string_js__","__WEBPACK_IMPORTED_MODULE_13__uri_js__","TileWMS","transparent","cacheSize","opaque","reprojectionErrorThreshold","tileClass","tileGrid","tileLoadFunction","wrapX","transition","gutter_","gutter","tmpExtent_","setKey","getKeyForParams_","getTileGrid","getTileGridForProjection","tileCoord","getTileCoordForCoordAndResolution","getResolutions","tileResolution","tileExtent","getTileCoordExtent","tileSize","toSize","getTileSize","tmpSize","buffer","getGutterInternal","tmp","hash","getTilePixelRatio","res","fixedTileUrlFunction","scale","location","history","history_","schema_","protocol","domain_","hostname","port_","port","path_","pathname","queryData_","ngeoUtils","decodeQueryString","search","fragment_","replaceState","getPath","getUriString","out","String","charAt","encodedQueryData","encodeQueryString","encodedFragment","hasFragmentParam","getFragmentParam","valueAsInt","getParamAsFloat","valueAsFloat","getFragmentParamAsInt","getParamKeys","getFragmentParamKeys","getParamKeysWithPrefix","getFragmentParamKeysWithPrefix","updateFragmentParams","deleteParam","deleteFragmentParam","refresh","setPath","path","LocationFactory","$rootScope","$window","lastUri","newUri","$evalAsync","$broadcast","MockProvider","$locationProvider","absUrl","opt_path","host","opt_search","opt_paramValue","opt_url","factory","__WEBPACK_IMPORTED_MODULE_5__format_XSD_js__","__WEBPACK_IMPORTED_MODULE_6__geom_Geometry_js__","__WEBPACK_IMPORTED_MODULE_7__geom_GeometryLayout_js__","__WEBPACK_IMPORTED_MODULE_8__geom_LineString_js__","__WEBPACK_IMPORTED_MODULE_9__geom_MultiLineString_js__","__WEBPACK_IMPORTED_MODULE_11__geom_Polygon_js__","__WEBPACK_IMPORTED_MODULE_12__obj_js__","__WEBPACK_IMPORTED_MODULE_13__proj_js__","__WEBPACK_IMPORTED_MODULE_14__xml_js__","GML3","surface_","curve_","multiCurve_","multiSurface_","readMultiCurve_","MULTICURVE_PARSERS_","readMultiSurface_","MULTISURFACE_PARSERS_","curveMemberParser_","CURVEMEMBER_PARSERS_","surfaceMemberParser_","SURFACEMEMBER_PARSERS_","readPatch_","PATCHES_PARSERS_","readSegment_","SEGMENTS_PARSERS_","readPolygonPatch_","readLineStringSegment_","interiorParser_","exteriorParser_","readSurface_","SURFACE_PARSERS_","readCurve_","CURVE_PARSERS_","readEnvelope_","ENVELOPE_PARSERS_","readFlatPos_","re","readFlatPosList_","contextDimension","dim","pos","posList","interior","exterior","curveMembers","surfaceMembers","PolygonPatch","LineStringSegment","writePos_","srsDimension","writePosList_","writeFeatureMembers_","geom","__WEBPACK_IMPORTED_MODULE_1__events_js__","__WEBPACK_IMPORTED_MODULE_2__events_EventType_js__","__WEBPACK_IMPORTED_MODULE_4__geom_Geometry_js__","__WEBPACK_IMPORTED_MODULE_5__geom_GeometryType_js__","opt_geometries","geometries_","listenGeometriesChange_","cloneGeometries_","clonedGeometries","unlistenGeometriesChange_","unlisten","geometryCollection","setGeometries","computeExtent","getGeometries","getSimplifiedGeometry","simplifiedGeometryRevision","simplifiedGeometryCache","simplifiedGeometryMaxMinSquaredTolerance","hasOwnProperty","simplifiedGeometries","simplified","simplifiedGeometry","simplifiedGeometryCollection","setGeometriesArray","GEOMETRY_COLLECTION","rotate","angle","anchor","sx","opt_sy","opt_anchor","applyTransform","transformFn","translate","deltaX","deltaY","disposeInternal","OWS","owsObject","xml","PARSERS_","readAddress_","ADDRESS_PARSERS_","readAllowedValues_","ALLOWED_VALUES_PARSERS_","readConstraint_","CONSTRAINT_PARSERS_","readContactInfo_","CONTACT_INFO_PARSERS_","readDcp_","DCP_PARSERS_","readGet_","href","REQUEST_METHOD_PARSERS_","readHttp_","HTTP_PARSERS_","readOperation_","OPERATION_PARSERS_","readOperationsMetadata_","OPERATIONS_METADATA_PARSERS_","readPhone_","PHONE_PARSERS_","readServiceIdentification_","SERVICE_IDENTIFICATION_PARSERS_","readServiceContact_","SERVICE_CONTACT_PARSERS_","readServiceProvider_","SERVICE_PROVIDER_PARSERS_","readValue_","NAMESPACE_URIS_","makeStructureNS","ServiceIdentification","ServiceProvider","OperationsMetadata","DeliveryPoint","City","AdministrativeArea","PostalCode","Country","ElectronicMailAddress","Value","makeObjectPropertyPusher","AllowedValues","Phone","Address","HTTP","Get","Post","DCP","Operation","Voice","Facsimile","Constraint","IndividualName","PositionName","ContactInfo","Abstract","AccessConstraints","Fees","Title","ServiceTypeVersion","ServiceType","ProviderName","ProviderSite","ServiceContact","format_OWS","WMTSCapabilities","owsParser_","WMTSCapabilityObject","readContents_","CONTENTS_PARSERS_","readLayer_","LAYER_PARSERS_","readTileMatrixSet_","TMS_PARSERS_","readStyle_","style","STYLE_PARSERS_","isDefault","readTileMatrixSetLink_","TMS_LINKS_PARSERS_","readDimensions_","DIMENSION_PARSERS_","readResourceUrl_","format","template","resourceType","resource","readWgs84BoundingBox_","WGS84_BBOX_READERS_","readLegendUrl_","legend","readCoordinates_","readTileMatrix_","TM_PARSERS_","readTileMatrixLimitsList_","TMS_LIMITS_LIST_PARSERS_","readTileMatrixLimits_","TMS_LIMITS_PARSERS_","OWS_NAMESPACE_URIS_","Contents","Layer","TileMatrixSet","Style","Format","TileMatrixSetLink","Dimension","ResourceURL","WGS84BoundingBox","Identifier","LegendURL","TileMatrixSetLimits","TileMatrixLimits","TileMatrix","MinTileRow","MaxTileRow","MinTileCol","MaxTileCol","Default","LowerCorner","UpperCorner","WellKnownScaleSet","SupportedCRS","TopLeftCorner","ScaleDenominator","TileWidth","TileHeight","MatrixWidth","MatrixHeight"],"mappings":"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","file":"objecteditinghub.5b306ed29af9e8565c32.js","sourcesContent":["/**\n * @module ol/format/filter/Filter\n */\n\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature filters.\n *\n * @constructor\n * @abstract\n * @param {!string} tagName The XML tag name for this filter.\n * @struct\n */\nconst Filter = function(tagName) {\n\n  /**\n   * @private\n   * @type {!string}\n   */\n  this.tagName_ = tagName;\n};\n\n/**\n * The XML tag name for a filter.\n * @returns {!string} Name.\n */\nFilter.prototype.getTagName = function() {\n  return this.tagName_;\n};\n\nexport default Filter;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Filter.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/LogicalNary\n */\nimport {inherits} from '../../index.js';\nimport {assert} from '../../asserts.js';\nimport Filter from '../filter/Filter.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature n-ary logical filters.\n *\n * @constructor\n * @abstract\n * @param {!string} tagName The XML tag name for this filter.\n * @param {...ol.format.filter.Filter} conditions Conditions.\n * @extends {ol.format.filter.Filter}\n */\nconst LogicalNary = function(tagName, conditions) {\n\n  Filter.call(this, tagName);\n\n  /**\n   * @public\n   * @type {Array.<ol.format.filter.Filter>}\n   */\n  this.conditions = Array.prototype.slice.call(arguments, 1);\n  assert(this.conditions.length >= 2, 57); // At least 2 conditions are required.\n};\n\ninherits(LogicalNary, Filter);\nexport default LogicalNary;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/LogicalNary.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/And\n */\nimport {inherits} from '../../index.js';\nimport LogicalNary from '../filter/LogicalNary.js';\n\n/**\n * @classdesc\n * Represents a logical `<And>` operator between two or more filter conditions.\n *\n * @constructor\n * @abstract\n * @param {...ol.format.filter.Filter} conditions Conditions.\n * @extends {ol.format.filter.LogicalNary}\n */\nconst And = function(conditions) {\n  const params = ['And'].concat(Array.prototype.slice.call(arguments));\n  LogicalNary.apply(this, params);\n};\n\ninherits(And, LogicalNary);\n\nexport default And;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/And.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/Bbox\n */\nimport {inherits} from '../../index.js';\nimport Filter from '../filter/Filter.js';\n\n/**\n * @classdesc\n * Represents a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @constructor\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.Extent} extent Extent.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @extends {ol.format.filter.Filter}\n * @api\n */\nconst Bbox = function(geometryName, extent, opt_srsName) {\n\n  Filter.call(this, 'BBOX');\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.geometryName = geometryName;\n\n  /**\n   * @public\n   * @type {ol.Extent}\n   */\n  this.extent = extent;\n\n  /**\n   * @public\n   * @type {string|undefined}\n   */\n  this.srsName = opt_srsName;\n};\n\ninherits(Bbox, Filter);\n\nexport default Bbox;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Bbox.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/Spatial\n */\nimport {inherits} from '../../index.js';\nimport Filter from '../filter/Filter.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Represents a spatial operator to test whether a geometry-valued property\n * relates to a given geometry.\n *\n * @constructor\n * @abstract\n * @param {!string} tagName The XML tag name for this filter.\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.geom.Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @extends {ol.format.filter.Filter}\n */\nconst Spatial = function(tagName, geometryName, geometry, opt_srsName) {\n\n  Filter.call(this, tagName);\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.geometryName = geometryName || 'the_geom';\n\n  /**\n   * @public\n   * @type {ol.geom.Geometry}\n   */\n  this.geometry = geometry;\n\n  /**\n   * @public\n   * @type {string|undefined}\n   */\n  this.srsName = opt_srsName;\n};\n\ninherits(Spatial, Filter);\n\nexport default Spatial;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Spatial.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/Contains\n */\nimport {inherits} from '../../index.js';\nimport Spatial from '../filter/Spatial.js';\n\n/**\n * @classdesc\n * Represents a `<Contains>` operator to test whether a geometry-valued property\n * contains a given geometry.\n *\n * @constructor\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.geom.Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @extends {ol.format.filter.Spatial}\n * @api\n */\nconst Contains = function(geometryName, geometry, opt_srsName) {\n\n  Spatial.call(this, 'Contains', geometryName, geometry, opt_srsName);\n\n};\n\ninherits(Contains, Spatial);\nexport default Contains;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Contains.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/Comparison\n */\nimport {inherits} from '../../index.js';\nimport Filter from '../filter/Filter.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature property comparison filters.\n *\n * @constructor\n * @abstract\n * @param {!string} tagName The XML tag name for this filter.\n * @param {!string} propertyName Name of the context property to compare.\n * @extends {ol.format.filter.Filter}\n */\nconst Comparison = function(tagName, propertyName) {\n\n  Filter.call(this, tagName);\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.propertyName = propertyName;\n};\n\ninherits(Comparison, Filter);\n\nexport default Comparison;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Comparison.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/During\n */\nimport {inherits} from '../../index.js';\nimport Comparison from '../filter/Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<During>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} begin The begin date in ISO-8601 format.\n * @param {!string} end The end date in ISO-8601 format.\n * @extends {ol.format.filter.Comparison}\n * @api\n */\nconst During = function(propertyName, begin, end) {\n  Comparison.call(this, 'During', propertyName);\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.begin = begin;\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.end = end;\n};\n\ninherits(During, Comparison);\nexport default During;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/During.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/ComparisonBinary\n */\nimport {inherits} from '../../index.js';\nimport Comparison from '../filter/Comparison.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature property binary comparison filters.\n *\n * @constructor\n * @abstract\n * @param {!string} tagName The XML tag name for this filter.\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @extends {ol.format.filter.Comparison}\n */\nconst ComparisonBinary = function(tagName, propertyName, expression, opt_matchCase) {\n\n  Comparison.call(this, tagName, propertyName);\n\n  /**\n   * @public\n   * @type {!(string|number)}\n   */\n  this.expression = expression;\n\n  /**\n   * @public\n   * @type {boolean|undefined}\n   */\n  this.matchCase = opt_matchCase;\n};\n\ninherits(ComparisonBinary, Comparison);\nexport default ComparisonBinary;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/ComparisonBinary.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/EqualTo\n */\nimport {inherits} from '../../index.js';\nimport ComparisonBinary from '../filter/ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsEqualTo>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @extends {ol.format.filter.ComparisonBinary}\n * @api\n */\nconst EqualTo = function(propertyName, expression, opt_matchCase) {\n  ComparisonBinary.call(this, 'PropertyIsEqualTo', propertyName, expression, opt_matchCase);\n};\n\ninherits(EqualTo, ComparisonBinary);\nexport default EqualTo;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/EqualTo.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/GreaterThan\n */\nimport {inherits} from '../../index.js';\nimport ComparisonBinary from '../filter/ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsGreaterThan>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @extends {ol.format.filter.ComparisonBinary}\n * @api\n */\nconst GreaterThan = function(propertyName, expression) {\n  ComparisonBinary.call(this, 'PropertyIsGreaterThan', propertyName, expression);\n};\n\ninherits(GreaterThan, ComparisonBinary);\nexport default GreaterThan;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/GreaterThan.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/GreaterThanOrEqualTo\n */\nimport {inherits} from '../../index.js';\nimport ComparisonBinary from '../filter/ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @extends {ol.format.filter.ComparisonBinary}\n * @api\n */\nconst GreaterThanOrEqualTo = function(propertyName, expression) {\n  ComparisonBinary.call(this, 'PropertyIsGreaterThanOrEqualTo', propertyName, expression);\n};\n\ninherits(GreaterThanOrEqualTo, ComparisonBinary);\nexport default GreaterThanOrEqualTo;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/GreaterThanOrEqualTo.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/Intersects\n */\nimport {inherits} from '../../index.js';\nimport Spatial from '../filter/Spatial.js';\n\n/**\n * @classdesc\n * Represents a `<Intersects>` operator to test whether a geometry-valued property\n * intersects a given geometry.\n *\n * @constructor\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.geom.Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @extends {ol.format.filter.Spatial}\n * @api\n */\nconst Intersects = function(geometryName, geometry, opt_srsName) {\n\n  Spatial.call(this, 'Intersects', geometryName, geometry, opt_srsName);\n\n};\n\ninherits(Intersects, Spatial);\nexport default Intersects;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Intersects.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/IsBetween\n */\nimport {inherits} from '../../index.js';\nimport Comparison from '../filter/Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsBetween>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} lowerBoundary The lower bound of the range.\n * @param {!number} upperBoundary The upper bound of the range.\n * @extends {ol.format.filter.Comparison}\n * @api\n */\nconst IsBetween = function(propertyName, lowerBoundary, upperBoundary) {\n  Comparison.call(this, 'PropertyIsBetween', propertyName);\n\n  /**\n   * @public\n   * @type {!number}\n   */\n  this.lowerBoundary = lowerBoundary;\n\n  /**\n   * @public\n   * @type {!number}\n   */\n  this.upperBoundary = upperBoundary;\n};\n\ninherits(IsBetween, Comparison);\nexport default IsBetween;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/IsBetween.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/IsLike\n */\nimport {inherits} from '../../index.js';\nimport Comparison from '../filter/Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLike>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} pattern Text pattern.\n * @param {string=} opt_wildCard Pattern character which matches any sequence of\n *    zero or more string characters. Default is '*'.\n * @param {string=} opt_singleChar pattern character which matches any single\n *    string character. Default is '.'.\n * @param {string=} opt_escapeChar Escape character which can be used to escape\n *    the pattern characters. Default is '!'.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @extends {ol.format.filter.Comparison}\n * @api\n */\nconst IsLike = function(propertyName, pattern, opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase) {\n  Comparison.call(this, 'PropertyIsLike', propertyName);\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.pattern = pattern;\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.wildCard = (opt_wildCard !== undefined) ? opt_wildCard : '*';\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.singleChar = (opt_singleChar !== undefined) ? opt_singleChar : '.';\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.escapeChar = (opt_escapeChar !== undefined) ? opt_escapeChar : '!';\n\n  /**\n   * @public\n   * @type {boolean|undefined}\n   */\n  this.matchCase = opt_matchCase;\n};\n\ninherits(IsLike, Comparison);\nexport default IsLike;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/IsLike.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/IsNull\n */\nimport {inherits} from '../../index.js';\nimport Comparison from '../filter/Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsNull>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @extends {ol.format.filter.Comparison}\n * @api\n */\nconst IsNull = function(propertyName) {\n  Comparison.call(this, 'PropertyIsNull', propertyName);\n};\n\ninherits(IsNull, Comparison);\nexport default IsNull;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/IsNull.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/LessThan\n */\nimport {inherits} from '../../index.js';\nimport ComparisonBinary from '../filter/ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLessThan>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @extends {ol.format.filter.ComparisonBinary}\n * @api\n */\nconst LessThan = function(propertyName, expression) {\n  ComparisonBinary.call(this, 'PropertyIsLessThan', propertyName, expression);\n};\n\ninherits(LessThan, ComparisonBinary);\nexport default LessThan;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/LessThan.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/LessThanOrEqualTo\n */\nimport {inherits} from '../../index.js';\nimport ComparisonBinary from '../filter/ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLessThanOrEqualTo>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @extends {ol.format.filter.ComparisonBinary}\n * @api\n */\nconst LessThanOrEqualTo = function(propertyName, expression) {\n  ComparisonBinary.call(this, 'PropertyIsLessThanOrEqualTo', propertyName, expression);\n};\n\ninherits(LessThanOrEqualTo, ComparisonBinary);\nexport default LessThanOrEqualTo;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/LessThanOrEqualTo.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/Not\n */\nimport {inherits} from '../../index.js';\nimport Filter from '../filter/Filter.js';\n\n/**\n * @classdesc\n * Represents a logical `<Not>` operator for a filter condition.\n *\n * @constructor\n * @param {!ol.format.filter.Filter} condition Filter condition.\n * @extends {ol.format.filter.Filter}\n * @api\n */\nconst Not = function(condition) {\n\n  Filter.call(this, 'Not');\n\n  /**\n   * @public\n   * @type {!ol.format.filter.Filter}\n   */\n  this.condition = condition;\n};\n\ninherits(Not, Filter);\nexport default Not;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Not.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/NotEqualTo\n */\nimport {inherits} from '../../index.js';\nimport ComparisonBinary from '../filter/ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsNotEqualTo>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @extends {ol.format.filter.ComparisonBinary}\n * @api\n */\nconst NotEqualTo = function(propertyName, expression, opt_matchCase) {\n  ComparisonBinary.call(this, 'PropertyIsNotEqualTo', propertyName, expression, opt_matchCase);\n};\n\ninherits(NotEqualTo, ComparisonBinary);\nexport default NotEqualTo;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/NotEqualTo.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/Or\n */\nimport {inherits} from '../../index.js';\nimport LogicalNary from '../filter/LogicalNary.js';\n\n/**\n * @classdesc\n * Represents a logical `<Or>` operator between two ore more filter conditions.\n *\n * @constructor\n * @param {...ol.format.filter.Filter} conditions Conditions.\n * @extends {ol.format.filter.LogicalNary}\n * @api\n */\nconst Or = function(conditions) {\n  const params = ['Or'].concat(Array.prototype.slice.call(arguments));\n  LogicalNary.apply(this, params);\n};\n\ninherits(Or, LogicalNary);\nexport default Or;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Or.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/Within\n */\nimport {inherits} from '../../index.js';\nimport Spatial from '../filter/Spatial.js';\n\n/**\n * @classdesc\n * Represents a `<Within>` operator to test whether a geometry-valued property\n * is within a given geometry.\n *\n * @constructor\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.geom.Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @extends {ol.format.filter.Spatial}\n * @api\n */\nconst Within = function(geometryName, geometry, opt_srsName) {\n\n  Spatial.call(this, 'Within', geometryName, geometry, opt_srsName);\n\n};\n\ninherits(Within, Spatial);\nexport default Within;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Within.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter\n */\nimport _ol_format_filter_And_ from '../format/filter/And.js';\nimport _ol_format_filter_Bbox_ from '../format/filter/Bbox.js';\nimport _ol_format_filter_Contains_ from '../format/filter/Contains.js';\nimport _ol_format_filter_During_ from '../format/filter/During.js';\nimport _ol_format_filter_EqualTo_ from '../format/filter/EqualTo.js';\nimport _ol_format_filter_GreaterThan_ from '../format/filter/GreaterThan.js';\nimport _ol_format_filter_GreaterThanOrEqualTo_ from '../format/filter/GreaterThanOrEqualTo.js';\nimport _ol_format_filter_Intersects_ from '../format/filter/Intersects.js';\nimport _ol_format_filter_IsBetween_ from '../format/filter/IsBetween.js';\nimport _ol_format_filter_IsLike_ from '../format/filter/IsLike.js';\nimport _ol_format_filter_IsNull_ from '../format/filter/IsNull.js';\nimport _ol_format_filter_LessThan_ from '../format/filter/LessThan.js';\nimport _ol_format_filter_LessThanOrEqualTo_ from '../format/filter/LessThanOrEqualTo.js';\nimport _ol_format_filter_Not_ from '../format/filter/Not.js';\nimport _ol_format_filter_NotEqualTo_ from '../format/filter/NotEqualTo.js';\nimport _ol_format_filter_Or_ from '../format/filter/Or.js';\nimport _ol_format_filter_Within_ from '../format/filter/Within.js';\nconst _ol_format_filter_ = {};\n\n\n/**\n * Create a logical `<And>` operator between two or more filter conditions.\n *\n * @param {...ol.format.filter.Filter} conditions Filter conditions.\n * @returns {!ol.format.filter.And} `<And>` operator.\n * @api\n */\n_ol_format_filter_.and = function(conditions) {\n  const params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(_ol_format_filter_And_, params));\n};\n\n\n/**\n * Create a logical `<Or>` operator between two or more filter conditions.\n *\n * @param {...ol.format.filter.Filter} conditions Filter conditions.\n * @returns {!ol.format.filter.Or} `<Or>` operator.\n * @api\n */\n_ol_format_filter_.or = function(conditions) {\n  const params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(_ol_format_filter_Or_, params));\n};\n\n\n/**\n * Represents a logical `<Not>` operator for a filter condition.\n *\n * @param {!ol.format.filter.Filter} condition Filter condition.\n * @returns {!ol.format.filter.Not} `<Not>` operator.\n * @api\n */\n_ol_format_filter_.not = function(condition) {\n  return new _ol_format_filter_Not_(condition);\n};\n\n\n/**\n * Create a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.Extent} extent Extent.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @returns {!ol.format.filter.Bbox} `<BBOX>` operator.\n * @api\n */\n_ol_format_filter_.bbox = function(geometryName, extent, opt_srsName) {\n  return new _ol_format_filter_Bbox_(geometryName, extent, opt_srsName);\n};\n\n/**\n * Create a `<Contains>` operator to test whether a geometry-valued property\n * contains a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.geom.Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @returns {!ol.format.filter.Contains} `<Contains>` operator.\n * @api\n */\n_ol_format_filter_.contains = function(geometryName, geometry, opt_srsName) {\n  return new _ol_format_filter_Contains_(geometryName, geometry, opt_srsName);\n};\n\n/**\n * Create a `<Intersects>` operator to test whether a geometry-valued property\n * intersects a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.geom.Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @returns {!ol.format.filter.Intersects} `<Intersects>` operator.\n * @api\n */\n_ol_format_filter_.intersects = function(geometryName, geometry, opt_srsName) {\n  return new _ol_format_filter_Intersects_(geometryName, geometry, opt_srsName);\n};\n\n/**\n * Create a `<Within>` operator to test whether a geometry-valued property\n * is within a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.geom.Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @returns {!ol.format.filter.Within} `<Within>` operator.\n * @api\n */\n_ol_format_filter_.within = function(geometryName, geometry, opt_srsName) {\n  return new _ol_format_filter_Within_(geometryName, geometry, opt_srsName);\n};\n\n\n/**\n * Creates a `<PropertyIsEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @returns {!ol.format.filter.EqualTo} `<PropertyIsEqualTo>` operator.\n * @api\n */\n_ol_format_filter_.equalTo = function(propertyName, expression, opt_matchCase) {\n  return new _ol_format_filter_EqualTo_(propertyName, expression, opt_matchCase);\n};\n\n\n/**\n * Creates a `<PropertyIsNotEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @returns {!ol.format.filter.NotEqualTo} `<PropertyIsNotEqualTo>` operator.\n * @api\n */\n_ol_format_filter_.notEqualTo = function(propertyName, expression, opt_matchCase) {\n  return new _ol_format_filter_NotEqualTo_(propertyName, expression, opt_matchCase);\n};\n\n\n/**\n * Creates a `<PropertyIsLessThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @returns {!ol.format.filter.LessThan} `<PropertyIsLessThan>` operator.\n * @api\n */\n_ol_format_filter_.lessThan = function(propertyName, expression) {\n  return new _ol_format_filter_LessThan_(propertyName, expression);\n};\n\n\n/**\n * Creates a `<PropertyIsLessThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @returns {!ol.format.filter.LessThanOrEqualTo} `<PropertyIsLessThanOrEqualTo>` operator.\n * @api\n */\n_ol_format_filter_.lessThanOrEqualTo = function(propertyName, expression) {\n  return new _ol_format_filter_LessThanOrEqualTo_(propertyName, expression);\n};\n\n\n/**\n * Creates a `<PropertyIsGreaterThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @returns {!ol.format.filter.GreaterThan} `<PropertyIsGreaterThan>` operator.\n * @api\n */\n_ol_format_filter_.greaterThan = function(propertyName, expression) {\n  return new _ol_format_filter_GreaterThan_(propertyName, expression);\n};\n\n\n/**\n * Creates a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @returns {!ol.format.filter.GreaterThanOrEqualTo} `<PropertyIsGreaterThanOrEqualTo>` operator.\n * @api\n */\n_ol_format_filter_.greaterThanOrEqualTo = function(propertyName, expression) {\n  return new _ol_format_filter_GreaterThanOrEqualTo_(propertyName, expression);\n};\n\n\n/**\n * Creates a `<PropertyIsNull>` comparison operator to test whether a property value\n * is null.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @returns {!ol.format.filter.IsNull} `<PropertyIsNull>` operator.\n * @api\n */\n_ol_format_filter_.isNull = function(propertyName) {\n  return new _ol_format_filter_IsNull_(propertyName);\n};\n\n\n/**\n * Creates a `<PropertyIsBetween>` comparison operator to test whether an expression\n * value lies within a range given by a lower and upper bound (inclusive).\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} lowerBoundary The lower bound of the range.\n * @param {!number} upperBoundary The upper bound of the range.\n * @returns {!ol.format.filter.IsBetween} `<PropertyIsBetween>` operator.\n * @api\n */\n_ol_format_filter_.between = function(propertyName, lowerBoundary, upperBoundary) {\n  return new _ol_format_filter_IsBetween_(propertyName, lowerBoundary, upperBoundary);\n};\n\n\n/**\n * Represents a `<PropertyIsLike>` comparison operator that matches a string property\n * value against a text pattern.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} pattern Text pattern.\n * @param {string=} opt_wildCard Pattern character which matches any sequence of\n *    zero or more string characters. Default is '*'.\n * @param {string=} opt_singleChar pattern character which matches any single\n *    string character. Default is '.'.\n * @param {string=} opt_escapeChar Escape character which can be used to escape\n *    the pattern characters. Default is '!'.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @returns {!ol.format.filter.IsLike} `<PropertyIsLike>` operator.\n * @api\n */\n_ol_format_filter_.like = function(propertyName, pattern,\n  opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase) {\n  return new _ol_format_filter_IsLike_(propertyName, pattern,\n    opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase);\n};\n\n\n/**\n * Create a `<During>` temporal operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} begin The begin date in ISO-8601 format.\n * @param {!string} end The end date in ISO-8601 format.\n * @returns {!ol.format.filter.During} `<During>` operator.\n * @api\n */\n_ol_format_filter_.during = function(propertyName, begin, end) {\n  return new _ol_format_filter_During_(propertyName, begin, end);\n};\nexport default _ol_format_filter_;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/XSD\n */\nimport _ol_xml_ from '../xml.js';\nimport _ol_string_ from '../string.js';\nconst XSD = {};\n\n\n/**\n * @param {Node} node Node.\n * @return {boolean|undefined} Boolean.\n */\nXSD.readBoolean = function(node) {\n  const s = _ol_xml_.getAllTextContent(node, false);\n  return XSD.readBooleanString(s);\n};\n\n\n/**\n * @param {string} string String.\n * @return {boolean|undefined} Boolean.\n */\nXSD.readBooleanString = function(string) {\n  const m = /^\\s*(true|1)|(false|0)\\s*$/.exec(string);\n  if (m) {\n    return m[1] !== undefined || false;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @return {number|undefined} DateTime in seconds.\n */\nXSD.readDateTime = function(node) {\n  const s = _ol_xml_.getAllTextContent(node, false);\n  const dateTime = Date.parse(s);\n  return isNaN(dateTime) ? undefined : dateTime / 1000;\n};\n\n\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Decimal.\n */\nXSD.readDecimal = function(node) {\n  const s = _ol_xml_.getAllTextContent(node, false);\n  return XSD.readDecimalString(s);\n};\n\n\n/**\n * @param {string} string String.\n * @return {number|undefined} Decimal.\n */\nXSD.readDecimalString = function(string) {\n  // FIXME check spec\n  const m = /^\\s*([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)\\s*$/i.exec(string);\n  if (m) {\n    return parseFloat(m[1]);\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Non negative integer.\n */\nXSD.readNonNegativeInteger = function(node) {\n  const s = _ol_xml_.getAllTextContent(node, false);\n  return XSD.readNonNegativeIntegerString(s);\n};\n\n\n/**\n * @param {string} string String.\n * @return {number|undefined} Non negative integer.\n */\nXSD.readNonNegativeIntegerString = function(string) {\n  const m = /^\\s*(\\d+)\\s*$/.exec(string);\n  if (m) {\n    return parseInt(m[1], 10);\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @return {string|undefined} String.\n */\nXSD.readString = function(node) {\n  return _ol_xml_.getAllTextContent(node, false).trim();\n};\n\n\n/**\n * @param {Node} node Node to append a TextNode with the boolean to.\n * @param {boolean} bool Boolean.\n */\nXSD.writeBooleanTextNode = function(node, bool) {\n  XSD.writeStringTextNode(node, (bool) ? '1' : '0');\n};\n\n\n/**\n * @param {Node} node Node to append a CDATA Section with the string to.\n * @param {string} string String.\n */\nXSD.writeCDATASection = function(node, string) {\n  node.appendChild(_ol_xml_.DOCUMENT.createCDATASection(string));\n};\n\n\n/**\n * @param {Node} node Node to append a TextNode with the dateTime to.\n * @param {number} dateTime DateTime in seconds.\n */\nXSD.writeDateTimeTextNode = function(node, dateTime) {\n  const date = new Date(dateTime * 1000);\n  const string = date.getUTCFullYear() + '-' +\n      _ol_string_.padNumber(date.getUTCMonth() + 1, 2) + '-' +\n      _ol_string_.padNumber(date.getUTCDate(), 2) + 'T' +\n      _ol_string_.padNumber(date.getUTCHours(), 2) + ':' +\n      _ol_string_.padNumber(date.getUTCMinutes(), 2) + ':' +\n      _ol_string_.padNumber(date.getUTCSeconds(), 2) + 'Z';\n  node.appendChild(_ol_xml_.DOCUMENT.createTextNode(string));\n};\n\n\n/**\n * @param {Node} node Node to append a TextNode with the decimal to.\n * @param {number} decimal Decimal.\n */\nXSD.writeDecimalTextNode = function(node, decimal) {\n  const string = decimal.toPrecision();\n  node.appendChild(_ol_xml_.DOCUMENT.createTextNode(string));\n};\n\n\n/**\n * @param {Node} node Node to append a TextNode with the decimal to.\n * @param {number} nonNegativeInteger Non negative integer.\n */\nXSD.writeNonNegativeIntegerTextNode = function(node, nonNegativeInteger) {\n  const string = nonNegativeInteger.toString();\n  node.appendChild(_ol_xml_.DOCUMENT.createTextNode(string));\n};\n\n\n/**\n * @param {Node} node Node to append a TextNode with the string to.\n * @param {string} string String.\n */\nXSD.writeStringTextNode = function(node, string) {\n  node.appendChild(_ol_xml_.DOCUMENT.createTextNode(string));\n};\nexport default XSD;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/XSD.js\n// module id = 17\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24","/**\n * @module ol/geom/MultiLineString\n */\nimport {inherits} from '../index.js';\nimport {extend} from '../array.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport LineString from '../geom/LineString.js';\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\nimport _ol_geom_flat_closest_ from '../geom/flat/closest.js';\nimport _ol_geom_flat_deflate_ from '../geom/flat/deflate.js';\nimport _ol_geom_flat_inflate_ from '../geom/flat/inflate.js';\nimport _ol_geom_flat_interpolate_ from '../geom/flat/interpolate.js';\nimport _ol_geom_flat_intersectsextent_ from '../geom/flat/intersectsextent.js';\nimport _ol_geom_flat_simplify_ from '../geom/flat/simplify.js';\n\n/**\n * @classdesc\n * Multi-linestring geometry.\n *\n * @constructor\n * @extends {ol.geom.SimpleGeometry}\n * @param {Array.<Array.<ol.Coordinate>>} coordinates Coordinates.\n * @param {ol.geom.GeometryLayout=} opt_layout Layout.\n * @api\n */\nconst MultiLineString = function(coordinates, opt_layout) {\n\n  SimpleGeometry.call(this);\n\n  /**\n   * @type {Array.<number>}\n   * @private\n   */\n  this.ends_ = [];\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.maxDelta_ = -1;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.maxDeltaRevision_ = -1;\n\n  this.setCoordinates(coordinates, opt_layout);\n\n};\n\ninherits(MultiLineString, SimpleGeometry);\n\n\n/**\n * Append the passed linestring to the multilinestring.\n * @param {ol.geom.LineString} lineString LineString.\n * @api\n */\nMultiLineString.prototype.appendLineString = function(lineString) {\n  if (!this.flatCoordinates) {\n    this.flatCoordinates = lineString.getFlatCoordinates().slice();\n  } else {\n    extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());\n  }\n  this.ends_.push(this.flatCoordinates.length);\n  this.changed();\n};\n\n\n/**\n * Make a complete copy of the geometry.\n * @return {!ol.geom.MultiLineString} Clone.\n * @override\n * @api\n */\nMultiLineString.prototype.clone = function() {\n  const multiLineString = new MultiLineString(null);\n  multiLineString.setFlatCoordinates(\n    this.layout, this.flatCoordinates.slice(), this.ends_.slice());\n  return multiLineString;\n};\n\n\n/**\n * @inheritDoc\n */\nMultiLineString.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {\n  if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n    return minSquaredDistance;\n  }\n  if (this.maxDeltaRevision_ != this.getRevision()) {\n    this.maxDelta_ = Math.sqrt(_ol_geom_flat_closest_.getsMaxSquaredDelta(\n      this.flatCoordinates, 0, this.ends_, this.stride, 0));\n    this.maxDeltaRevision_ = this.getRevision();\n  }\n  return _ol_geom_flat_closest_.getsClosestPoint(\n    this.flatCoordinates, 0, this.ends_, this.stride,\n    this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n};\n\n\n/**\n * Returns the coordinate at `m` using linear interpolation, or `null` if no\n * such coordinate exists.\n *\n * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n * M will return the first coordinate and Ms greater than the last M will\n * return the last coordinate.\n *\n * `opt_interpolate` controls interpolation between consecutive LineStrings\n * within the MultiLineString. If `opt_interpolate` is `true` the coordinates\n * will be linearly interpolated between the last coordinate of one LineString\n * and the first coordinate of the next LineString.  If `opt_interpolate` is\n * `false` then the function will return `null` for Ms falling between\n * LineStrings.\n *\n * @param {number} m M.\n * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.\n * @param {boolean=} opt_interpolate Interpolate. Default is `false`.\n * @return {ol.Coordinate} Coordinate.\n * @api\n */\nMultiLineString.prototype.getCoordinateAtM = function(m, opt_extrapolate, opt_interpolate) {\n  if ((this.layout != GeometryLayout.XYM &&\n       this.layout != GeometryLayout.XYZM) ||\n      this.flatCoordinates.length === 0) {\n    return null;\n  }\n  const extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n  const interpolate = opt_interpolate !== undefined ? opt_interpolate : false;\n  return _ol_geom_flat_interpolate_.lineStringsCoordinateAtM(this.flatCoordinates, 0,\n    this.ends_, this.stride, m, extrapolate, interpolate);\n};\n\n\n/**\n * Return the coordinates of the multilinestring.\n * @return {Array.<Array.<ol.Coordinate>>} Coordinates.\n * @override\n * @api\n */\nMultiLineString.prototype.getCoordinates = function() {\n  return _ol_geom_flat_inflate_.coordinatess(\n    this.flatCoordinates, 0, this.ends_, this.stride);\n};\n\n\n/**\n * @return {Array.<number>} Ends.\n */\nMultiLineString.prototype.getEnds = function() {\n  return this.ends_;\n};\n\n\n/**\n * Return the linestring at the specified index.\n * @param {number} index Index.\n * @return {ol.geom.LineString} LineString.\n * @api\n */\nMultiLineString.prototype.getLineString = function(index) {\n  if (index < 0 || this.ends_.length <= index) {\n    return null;\n  }\n  const lineString = new LineString(null);\n  lineString.setFlatCoordinates(this.layout, this.flatCoordinates.slice(\n    index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]));\n  return lineString;\n};\n\n\n/**\n * Return the linestrings of this multilinestring.\n * @return {Array.<ol.geom.LineString>} LineStrings.\n * @api\n */\nMultiLineString.prototype.getLineStrings = function() {\n  const flatCoordinates = this.flatCoordinates;\n  const ends = this.ends_;\n  const layout = this.layout;\n  /** @type {Array.<ol.geom.LineString>} */\n  const lineStrings = [];\n  let offset = 0;\n  let i, ii;\n  for (i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const lineString = new LineString(null);\n    lineString.setFlatCoordinates(layout, flatCoordinates.slice(offset, end));\n    lineStrings.push(lineString);\n    offset = end;\n  }\n  return lineStrings;\n};\n\n\n/**\n * @return {Array.<number>} Flat midpoints.\n */\nMultiLineString.prototype.getFlatMidpoints = function() {\n  const midpoints = [];\n  const flatCoordinates = this.flatCoordinates;\n  let offset = 0;\n  const ends = this.ends_;\n  const stride = this.stride;\n  let i, ii;\n  for (i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const midpoint = _ol_geom_flat_interpolate_.lineString(\n      flatCoordinates, offset, end, stride, 0.5);\n    extend(midpoints, midpoint);\n    offset = end;\n  }\n  return midpoints;\n};\n\n\n/**\n * @inheritDoc\n */\nMultiLineString.prototype.getSimplifiedGeometryInternal = function(squaredTolerance) {\n  const simplifiedFlatCoordinates = [];\n  const simplifiedEnds = [];\n  simplifiedFlatCoordinates.length = _ol_geom_flat_simplify_.douglasPeuckers(\n    this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance,\n    simplifiedFlatCoordinates, 0, simplifiedEnds);\n  const simplifiedMultiLineString = new MultiLineString(null);\n  simplifiedMultiLineString.setFlatCoordinates(\n    GeometryLayout.XY, simplifiedFlatCoordinates, simplifiedEnds);\n  return simplifiedMultiLineString;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nMultiLineString.prototype.getType = function() {\n  return GeometryType.MULTI_LINE_STRING;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nMultiLineString.prototype.intersectsExtent = function(extent) {\n  return _ol_geom_flat_intersectsextent_.lineStrings(\n    this.flatCoordinates, 0, this.ends_, this.stride, extent);\n};\n\n\n/**\n * Set the coordinates of the multilinestring.\n * @param {Array.<Array.<ol.Coordinate>>} coordinates Coordinates.\n * @param {ol.geom.GeometryLayout=} opt_layout Layout.\n * @override\n * @api\n */\nMultiLineString.prototype.setCoordinates = function(coordinates, opt_layout) {\n  if (!coordinates) {\n    this.setFlatCoordinates(GeometryLayout.XY, null, this.ends_);\n  } else {\n    this.setLayout(opt_layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = _ol_geom_flat_deflate_.coordinatess(\n      this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n};\n\n\n/**\n * @param {ol.geom.GeometryLayout} layout Layout.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {Array.<number>} ends Ends.\n */\nMultiLineString.prototype.setFlatCoordinates = function(layout, flatCoordinates, ends) {\n  this.setFlatCoordinatesInternal(layout, flatCoordinates);\n  this.ends_ = ends;\n  this.changed();\n};\n\n\n/**\n * @param {Array.<ol.geom.LineString>} lineStrings LineStrings.\n */\nMultiLineString.prototype.setLineStrings = function(lineStrings) {\n  let layout = this.getLayout();\n  const flatCoordinates = [];\n  const ends = [];\n  let i, ii;\n  for (i = 0, ii = lineStrings.length; i < ii; ++i) {\n    const lineString = lineStrings[i];\n    if (i === 0) {\n      layout = lineString.getLayout();\n    }\n    extend(flatCoordinates, lineString.getFlatCoordinates());\n    ends.push(flatCoordinates.length);\n  }\n  this.setFlatCoordinates(layout, flatCoordinates, ends);\n};\nexport default MultiLineString;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/geom/MultiLineString.js\n// module id = 18\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23","/**\n * @module ol/format/JSONFeature\n */\nimport {inherits} from '../index.js';\nimport FeatureFormat from '../format/Feature.js';\nimport FormatType from '../format/FormatType.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for JSON feature formats.\n *\n * @constructor\n * @abstract\n * @extends {ol.format.Feature}\n */\nconst JSONFeature = function() {\n  FeatureFormat.call(this);\n};\n\ninherits(JSONFeature, FeatureFormat);\n\n\n/**\n * @param {Document|Node|Object|string} source Source.\n * @return {Object} Object.\n */\nfunction getObject(source) {\n  if (typeof source === 'string') {\n    const object = JSON.parse(source);\n    return object ? /** @type {Object} */ (object) : null;\n  } else if (source !== null) {\n    return source;\n  } else {\n    return null;\n  }\n}\n\n\n/**\n * @inheritDoc\n */\nJSONFeature.prototype.getType = function() {\n  return FormatType.JSON;\n};\n\n\n/**\n * @inheritDoc\n */\nJSONFeature.prototype.readFeature = function(source, opt_options) {\n  return this.readFeatureFromObject(\n    getObject(source), this.getReadOptions(source, opt_options));\n};\n\n\n/**\n * @inheritDoc\n */\nJSONFeature.prototype.readFeatures = function(source, opt_options) {\n  return this.readFeaturesFromObject(\n    getObject(source), this.getReadOptions(source, opt_options));\n};\n\n\n/**\n * @abstract\n * @param {Object} object Object.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @protected\n * @return {ol.Feature} Feature.\n */\nJSONFeature.prototype.readFeatureFromObject = function(object, opt_options) {};\n\n\n/**\n * @abstract\n * @param {Object} object Object.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @protected\n * @return {Array.<ol.Feature>} Features.\n */\nJSONFeature.prototype.readFeaturesFromObject = function(object, opt_options) {};\n\n\n/**\n * @inheritDoc\n */\nJSONFeature.prototype.readGeometry = function(source, opt_options) {\n  return this.readGeometryFromObject(\n    getObject(source), this.getReadOptions(source, opt_options));\n};\n\n\n/**\n * @abstract\n * @param {Object} object Object.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @protected\n * @return {ol.geom.Geometry} Geometry.\n */\nJSONFeature.prototype.readGeometryFromObject = function(object, opt_options) {};\n\n\n/**\n * @inheritDoc\n */\nJSONFeature.prototype.readProjection = function(source) {\n  return this.readProjectionFromObject(getObject(source));\n};\n\n\n/**\n * @abstract\n * @param {Object} object Object.\n * @protected\n * @return {ol.proj.Projection} Projection.\n */\nJSONFeature.prototype.readProjectionFromObject = function(object) {};\n\n\n/**\n * @inheritDoc\n */\nJSONFeature.prototype.writeFeature = function(feature, opt_options) {\n  return JSON.stringify(this.writeFeatureObject(feature, opt_options));\n};\n\n\n/**\n * @abstract\n * @param {ol.Feature} feature Feature.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {Object} Object.\n */\nJSONFeature.prototype.writeFeatureObject = function(feature, opt_options) {};\n\n\n/**\n * @inheritDoc\n */\nJSONFeature.prototype.writeFeatures = function(features, opt_options) {\n  return JSON.stringify(this.writeFeaturesObject(features, opt_options));\n};\n\n\n/**\n * @abstract\n * @param {Array.<ol.Feature>} features Features.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {Object} Object.\n */\nJSONFeature.prototype.writeFeaturesObject = function(features, opt_options) {};\n\n\n/**\n * @inheritDoc\n */\nJSONFeature.prototype.writeGeometry = function(geometry, opt_options) {\n  return JSON.stringify(this.writeGeometryObject(geometry, opt_options));\n};\n\n\n/**\n * @abstract\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {Object} Object.\n */\nJSONFeature.prototype.writeGeometryObject = function(geometry, opt_options) {};\nexport default JSONFeature;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/JSONFeature.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/GeoJSON\n */\n// TODO: serialize dataProjection as crs member when writing\n// see https://github.com/openlayers/openlayers/issues/2078\n\nimport {inherits} from '../index.js';\nimport {assert} from '../asserts.js';\nimport Feature from '../Feature.js';\nimport {transformWithOptions} from '../format/Feature.js';\nimport JSONFeature from '../format/JSONFeature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport {assign, isEmpty} from '../obj.js';\nimport {get as getProjection} from '../proj.js';\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @constructor\n * @extends {ol.format.JSONFeature}\n * @param {olx.format.GeoJSONOptions=} opt_options Options.\n * @api\n */\nconst GeoJSON = function(opt_options) {\n\n  const options = opt_options ? opt_options : {};\n\n  JSONFeature.call(this);\n\n  /**\n   * @inheritDoc\n   */\n  this.defaultDataProjection = getProjection(\n    options.defaultDataProjection ?\n      options.defaultDataProjection : 'EPSG:4326');\n\n\n  if (options.featureProjection) {\n    this.defaultFeatureProjection = getProjection(options.featureProjection);\n  }\n\n  /**\n   * Name of the geometry attribute for features.\n   * @type {string|undefined}\n   * @private\n   */\n  this.geometryName_ = options.geometryName;\n\n  /**\n   * Look for the geometry name in the feature GeoJSON\n   * @type {boolean|undefined}\n   * @private\n   */\n  this.extractGeometryName_ = options.extractGeometryName;\n\n};\n\ninherits(GeoJSON, JSONFeature);\n\n\n/**\n * @const\n * @type {Object.<string, function(GeoJSONObject): ol.geom.Geometry>}\n */\nconst GEOMETRY_READERS = {\n  'Point': readPointGeometry,\n  'LineString': readLineStringGeometry,\n  'Polygon': readPolygonGeometry,\n  'MultiPoint': readMultiPointGeometry,\n  'MultiLineString': readMultiLineStringGeometry,\n  'MultiPolygon': readMultiPolygonGeometry,\n  'GeometryCollection': readGeometryCollectionGeometry\n};\n\n\n/**\n * @const\n * @type {Object.<string, function(ol.geom.Geometry, olx.format.WriteOptions=): (GeoJSONGeometry|GeoJSONGeometryCollection)>}\n */\nconst GEOMETRY_WRITERS = {\n  'Point': writePointGeometry,\n  'LineString': writeLineStringGeometry,\n  'Polygon': writePolygonGeometry,\n  'MultiPoint': writeMultiPointGeometry,\n  'MultiLineString': writeMultiLineStringGeometry,\n  'MultiPolygon': writeMultiPolygonGeometry,\n  'GeometryCollection': writeGeometryCollectionGeometry,\n  'Circle': writeEmptyGeometryCollectionGeometry\n};\n\n\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {ol.geom.Geometry} Geometry.\n */\nfunction readGeometry(object, opt_options) {\n  if (!object) {\n    return null;\n  }\n  const geometryReader = GEOMETRY_READERS[object.type];\n  return (\n    /** @type {ol.geom.Geometry} */ transformWithOptions(\n      geometryReader(object), false, opt_options)\n  );\n}\n\n\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {ol.geom.GeometryCollection} Geometry collection.\n */\nfunction readGeometryCollectionGeometry(object, opt_options) {\n  const geometries = object.geometries.map(\n    /**\n       * @param {GeoJSONGeometry} geometry Geometry.\n       * @return {ol.geom.Geometry} geometry Geometry.\n       */\n    function(geometry) {\n      return readGeometry(geometry, opt_options);\n    });\n  return new GeometryCollection(geometries);\n}\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {ol.geom.Point} Point.\n */\nfunction readPointGeometry(object) {\n  return new Point(object.coordinates);\n}\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {ol.geom.LineString} LineString.\n */\nfunction readLineStringGeometry(object) {\n  return new LineString(object.coordinates);\n}\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {ol.geom.MultiLineString} MultiLineString.\n */\nfunction readMultiLineStringGeometry(object) {\n  return new MultiLineString(object.coordinates);\n}\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {ol.geom.MultiPoint} MultiPoint.\n */\nfunction readMultiPointGeometry(object) {\n  return new MultiPoint(object.coordinates);\n}\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {ol.geom.MultiPolygon} MultiPolygon.\n */\nfunction readMultiPolygonGeometry(object) {\n  return new MultiPolygon(object.coordinates);\n}\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {ol.geom.Polygon} Polygon.\n */\nfunction readPolygonGeometry(object) {\n  return new Polygon(object.coordinates);\n}\n\n\n/**\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry|GeoJSONGeometryCollection} GeoJSON geometry.\n */\nfunction writeGeometry(geometry, opt_options) {\n  const geometryWriter = GEOMETRY_WRITERS[geometry.getType()];\n  return geometryWriter(/** @type {ol.geom.Geometry} */ (\n    transformWithOptions(geometry, true, opt_options)), opt_options);\n}\n\n\n/**\n * @param {ol.geom.Geometry} geometry Geometry.\n * @return {GeoJSONGeometryCollection} Empty GeoJSON geometry collection.\n */\nfunction writeEmptyGeometryCollectionGeometry(geometry) {\n  return /** @type {GeoJSONGeometryCollection} */ ({\n    type: 'GeometryCollection',\n    geometries: []\n  });\n}\n\n\n/**\n * @param {ol.geom.GeometryCollection} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\nfunction writeGeometryCollectionGeometry(geometry, opt_options) {\n  const geometries = geometry.getGeometriesArray().map(function(geometry) {\n    const options = assign({}, opt_options);\n    delete options.featureProjection;\n    return writeGeometry(geometry, options);\n  });\n  return /** @type {GeoJSONGeometryCollection} */ ({\n    type: 'GeometryCollection',\n    geometries: geometries\n  });\n}\n\n\n/**\n * @param {ol.geom.LineString} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeLineStringGeometry(geometry, opt_options) {\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'LineString',\n    coordinates: geometry.getCoordinates()\n  });\n}\n\n\n/**\n * @param {ol.geom.MultiLineString} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiLineStringGeometry(geometry, opt_options) {\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'MultiLineString',\n    coordinates: geometry.getCoordinates()\n  });\n}\n\n\n/**\n * @param {ol.geom.MultiPoint} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPointGeometry(geometry, opt_options) {\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'MultiPoint',\n    coordinates: geometry.getCoordinates()\n  });\n}\n\n\n/**\n * @param {ol.geom.MultiPolygon} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, opt_options) {\n  let right;\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'MultiPolygon',\n    coordinates: geometry.getCoordinates(right)\n  });\n}\n\n\n/**\n * @param {ol.geom.Point} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePointGeometry(geometry, opt_options) {\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'Point',\n    coordinates: geometry.getCoordinates()\n  });\n}\n\n\n/**\n * @param {ol.geom.Polygon} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePolygonGeometry(geometry, opt_options) {\n  let right;\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'Polygon',\n    coordinates: geometry.getCoordinates(right)\n  });\n}\n\n\n/**\n * Read a feature from a GeoJSON Feature source.  Only works for Feature or\n * geometry types.  Use {@link ol.format.GeoJSON#readFeatures} to read\n * FeatureCollection source. If feature at source has an id, it will be used\n * as Feature id by calling {@link ol.Feature#setId} internally.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {ol.Feature} Feature.\n * @api\n */\nGeoJSON.prototype.readFeature;\n\n\n/**\n * Read all features from a GeoJSON source.  Works for all GeoJSON types.\n * If the source includes only geometries, features will be created with those\n * geometries.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {Array.<ol.Feature>} Features.\n * @api\n */\nGeoJSON.prototype.readFeatures;\n\n\n/**\n * @inheritDoc\n */\nGeoJSON.prototype.readFeatureFromObject = function(object, opt_options) {\n  /**\n   * @type {GeoJSONFeature}\n   */\n  let geoJSONFeature = null;\n  if (object.type === 'Feature') {\n    geoJSONFeature = /** @type {GeoJSONFeature} */ (object);\n  } else {\n    geoJSONFeature = /** @type {GeoJSONFeature} */ ({\n      type: 'Feature',\n      geometry: /** @type {GeoJSONGeometry|GeoJSONGeometryCollection} */ (object)\n    });\n  }\n\n  const geometry = readGeometry(geoJSONFeature.geometry, opt_options);\n  const feature = new Feature();\n  if (this.geometryName_) {\n    feature.setGeometryName(this.geometryName_);\n  } else if (this.extractGeometryName_ && geoJSONFeature.geometry_name !== undefined) {\n    feature.setGeometryName(geoJSONFeature.geometry_name);\n  }\n  feature.setGeometry(geometry);\n  if (geoJSONFeature.id !== undefined) {\n    feature.setId(geoJSONFeature.id);\n  }\n  if (geoJSONFeature.properties) {\n    feature.setProperties(geoJSONFeature.properties);\n  }\n  return feature;\n};\n\n\n/**\n * @inheritDoc\n */\nGeoJSON.prototype.readFeaturesFromObject = function(object, opt_options) {\n  const geoJSONObject = /** @type {GeoJSONObject} */ (object);\n  /** @type {Array.<ol.Feature>} */\n  let features = null;\n  if (geoJSONObject.type === 'FeatureCollection') {\n    const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */\n        (object);\n    features = [];\n    const geoJSONFeatures = geoJSONFeatureCollection.features;\n    let i, ii;\n    for (i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n      features.push(this.readFeatureFromObject(geoJSONFeatures[i],\n        opt_options));\n    }\n  } else {\n    features = [this.readFeatureFromObject(object, opt_options)];\n  }\n  return features;\n};\n\n\n/**\n * Read a geometry from a GeoJSON source.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {ol.geom.Geometry} Geometry.\n * @api\n */\nGeoJSON.prototype.readGeometry;\n\n\n/**\n * @inheritDoc\n */\nGeoJSON.prototype.readGeometryFromObject = function(object, opt_options) {\n  return readGeometry(/** @type {GeoJSONGeometry} */ (object), opt_options);\n};\n\n\n/**\n * Read the projection from a GeoJSON source.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @return {ol.proj.Projection} Projection.\n * @api\n */\nGeoJSON.prototype.readProjection;\n\n\n/**\n * @inheritDoc\n */\nGeoJSON.prototype.readProjectionFromObject = function(object) {\n  const geoJSONObject = /** @type {GeoJSONObject} */ (object);\n  const crs = geoJSONObject.crs;\n  let projection;\n  if (crs) {\n    if (crs.type == 'name') {\n      projection = getProjection(crs.properties.name);\n    } else {\n      assert(false, 36); // Unknown SRS type\n    }\n  } else {\n    projection = this.defaultDataProjection;\n  }\n  return /** @type {ol.proj.Projection} */ (projection);\n};\n\n\n/**\n * Encode a feature as a GeoJSON Feature string.\n *\n * @function\n * @param {ol.Feature} feature Feature.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {string} GeoJSON.\n * @override\n * @api\n */\nGeoJSON.prototype.writeFeature;\n\n\n/**\n * Encode a feature as a GeoJSON Feature object.\n *\n * @param {ol.Feature} feature Feature.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONFeature} Object.\n * @override\n * @api\n */\nGeoJSON.prototype.writeFeatureObject = function(feature, opt_options) {\n  opt_options = this.adaptOptions(opt_options);\n\n  const object = /** @type {GeoJSONFeature} */ ({\n    'type': 'Feature'\n  });\n  const id = feature.getId();\n  if (id !== undefined) {\n    object.id = id;\n  }\n  const geometry = feature.getGeometry();\n  if (geometry) {\n    object.geometry = writeGeometry(geometry, opt_options);\n  } else {\n    object.geometry = null;\n  }\n  const properties = feature.getProperties();\n  delete properties[feature.getGeometryName()];\n  if (!isEmpty(properties)) {\n    object.properties = properties;\n  } else {\n    object.properties = null;\n  }\n  return object;\n};\n\n\n/**\n * Encode an array of features as GeoJSON.\n *\n * @function\n * @param {Array.<ol.Feature>} features Features.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {string} GeoJSON.\n * @api\n */\nGeoJSON.prototype.writeFeatures;\n\n\n/**\n * Encode an array of features as a GeoJSON object.\n *\n * @param {Array.<ol.Feature>} features Features.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONFeatureCollection} GeoJSON Object.\n * @override\n * @api\n */\nGeoJSON.prototype.writeFeaturesObject = function(features, opt_options) {\n  opt_options = this.adaptOptions(opt_options);\n  const objects = [];\n  let i, ii;\n  for (i = 0, ii = features.length; i < ii; ++i) {\n    objects.push(this.writeFeatureObject(features[i], opt_options));\n  }\n  return /** @type {GeoJSONFeatureCollection} */ ({\n    type: 'FeatureCollection',\n    features: objects\n  });\n};\n\n\n/**\n * Encode a geometry as a GeoJSON string.\n *\n * @function\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {string} GeoJSON.\n * @api\n */\nGeoJSON.prototype.writeGeometry;\n\n\n/**\n * Encode a geometry as a GeoJSON object.\n *\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n * @override\n * @api\n */\nGeoJSON.prototype.writeGeometryObject = function(geometry, opt_options) {\n  return writeGeometry(geometry, this.adaptOptions(opt_options));\n};\nexport default GeoJSON;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/GeoJSON.js\n// module id = null\n// module chunks = ","/**\n * @module ol/geom/MultiPoint\n */\nimport {inherits} from '../index.js';\nimport {extend} from '../array.js';\nimport {closestSquaredDistanceXY, containsXY} from '../extent.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Point from '../geom/Point.js';\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\nimport _ol_geom_flat_deflate_ from '../geom/flat/deflate.js';\nimport _ol_geom_flat_inflate_ from '../geom/flat/inflate.js';\nimport {squaredDistance as squaredDx} from '../math.js';\n\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @constructor\n * @extends {ol.geom.SimpleGeometry}\n * @param {Array.<ol.Coordinate>} coordinates Coordinates.\n * @param {ol.geom.GeometryLayout=} opt_layout Layout.\n * @api\n */\nconst MultiPoint = function(coordinates, opt_layout) {\n  SimpleGeometry.call(this);\n  this.setCoordinates(coordinates, opt_layout);\n};\n\ninherits(MultiPoint, SimpleGeometry);\n\n\n/**\n * Append the passed point to this multipoint.\n * @param {ol.geom.Point} point Point.\n * @api\n */\nMultiPoint.prototype.appendPoint = function(point) {\n  if (!this.flatCoordinates) {\n    this.flatCoordinates = point.getFlatCoordinates().slice();\n  } else {\n    extend(this.flatCoordinates, point.getFlatCoordinates());\n  }\n  this.changed();\n};\n\n\n/**\n * Make a complete copy of the geometry.\n * @return {!ol.geom.MultiPoint} Clone.\n * @override\n * @api\n */\nMultiPoint.prototype.clone = function() {\n  const multiPoint = new MultiPoint(null);\n  multiPoint.setFlatCoordinates(this.layout, this.flatCoordinates.slice());\n  return multiPoint;\n};\n\n\n/**\n * @inheritDoc\n */\nMultiPoint.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {\n  if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n    return minSquaredDistance;\n  }\n  const flatCoordinates = this.flatCoordinates;\n  const stride = this.stride;\n  let i, ii, j;\n  for (i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n    const squaredDistance = squaredDx(\n      x, y, flatCoordinates[i], flatCoordinates[i + 1]);\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n      for (j = 0; j < stride; ++j) {\n        closestPoint[j] = flatCoordinates[i + j];\n      }\n      closestPoint.length = stride;\n    }\n  }\n  return minSquaredDistance;\n};\n\n\n/**\n * Return the coordinates of the multipoint.\n * @return {Array.<ol.Coordinate>} Coordinates.\n * @override\n * @api\n */\nMultiPoint.prototype.getCoordinates = function() {\n  return _ol_geom_flat_inflate_.coordinates(\n    this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n};\n\n\n/**\n * Return the point at the specified index.\n * @param {number} index Index.\n * @return {ol.geom.Point} Point.\n * @api\n */\nMultiPoint.prototype.getPoint = function(index) {\n  const n = !this.flatCoordinates ?\n    0 : this.flatCoordinates.length / this.stride;\n  if (index < 0 || n <= index) {\n    return null;\n  }\n  const point = new Point(null);\n  point.setFlatCoordinates(this.layout, this.flatCoordinates.slice(\n    index * this.stride, (index + 1) * this.stride));\n  return point;\n};\n\n\n/**\n * Return the points of this multipoint.\n * @return {Array.<ol.geom.Point>} Points.\n * @api\n */\nMultiPoint.prototype.getPoints = function() {\n  const flatCoordinates = this.flatCoordinates;\n  const layout = this.layout;\n  const stride = this.stride;\n  /** @type {Array.<ol.geom.Point>} */\n  const points = [];\n  let i, ii;\n  for (i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n    const point = new Point(null);\n    point.setFlatCoordinates(layout, flatCoordinates.slice(i, i + stride));\n    points.push(point);\n  }\n  return points;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nMultiPoint.prototype.getType = function() {\n  return GeometryType.MULTI_POINT;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nMultiPoint.prototype.intersectsExtent = function(extent) {\n  const flatCoordinates = this.flatCoordinates;\n  const stride = this.stride;\n  let i, ii, x, y;\n  for (i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n    x = flatCoordinates[i];\n    y = flatCoordinates[i + 1];\n    if (containsXY(extent, x, y)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Set the coordinates of the multipoint.\n * @param {Array.<ol.Coordinate>} coordinates Coordinates.\n * @param {ol.geom.GeometryLayout=} opt_layout Layout.\n * @override\n * @api\n */\nMultiPoint.prototype.setCoordinates = function(coordinates, opt_layout) {\n  if (!coordinates) {\n    this.setFlatCoordinates(GeometryLayout.XY, null);\n  } else {\n    this.setLayout(opt_layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = _ol_geom_flat_deflate_.coordinates(\n      this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  }\n};\n\n\n/**\n * @param {ol.geom.GeometryLayout} layout Layout.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n */\nMultiPoint.prototype.setFlatCoordinates = function(layout, flatCoordinates) {\n  this.setFlatCoordinatesInternal(layout, flatCoordinates);\n  this.changed();\n};\nexport default MultiPoint;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/geom/MultiPoint.js\n// module id = 20\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23","/**\n * @module ol/geom/MultiPolygon\n */\nimport {inherits} from '../index.js';\nimport {extend} from '../array.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport Polygon from '../geom/Polygon.js';\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\nimport _ol_geom_flat_area_ from '../geom/flat/area.js';\nimport _ol_geom_flat_center_ from '../geom/flat/center.js';\nimport _ol_geom_flat_closest_ from '../geom/flat/closest.js';\nimport _ol_geom_flat_contains_ from '../geom/flat/contains.js';\nimport _ol_geom_flat_deflate_ from '../geom/flat/deflate.js';\nimport _ol_geom_flat_inflate_ from '../geom/flat/inflate.js';\nimport _ol_geom_flat_interiorpoint_ from '../geom/flat/interiorpoint.js';\nimport _ol_geom_flat_intersectsextent_ from '../geom/flat/intersectsextent.js';\nimport _ol_geom_flat_orient_ from '../geom/flat/orient.js';\nimport _ol_geom_flat_simplify_ from '../geom/flat/simplify.js';\n\n/**\n * @classdesc\n * Multi-polygon geometry.\n *\n * @constructor\n * @extends {ol.geom.SimpleGeometry}\n * @param {Array.<Array.<Array.<ol.Coordinate>>>} coordinates Coordinates.\n * @param {ol.geom.GeometryLayout=} opt_layout Layout.\n * @api\n */\nconst MultiPolygon = function(coordinates, opt_layout) {\n\n  SimpleGeometry.call(this);\n\n  /**\n   * @type {Array.<Array.<number>>}\n   * @private\n   */\n  this.endss_ = [];\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.flatInteriorPointsRevision_ = -1;\n\n  /**\n   * @private\n   * @type {Array.<number>}\n   */\n  this.flatInteriorPoints_ = null;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.maxDelta_ = -1;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.maxDeltaRevision_ = -1;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.orientedRevision_ = -1;\n\n  /**\n   * @private\n   * @type {Array.<number>}\n   */\n  this.orientedFlatCoordinates_ = null;\n\n  this.setCoordinates(coordinates, opt_layout);\n\n};\n\ninherits(MultiPolygon, SimpleGeometry);\n\n\n/**\n * Append the passed polygon to this multipolygon.\n * @param {ol.geom.Polygon} polygon Polygon.\n * @api\n */\nMultiPolygon.prototype.appendPolygon = function(polygon) {\n  /** @type {Array.<number>} */\n  let ends;\n  if (!this.flatCoordinates) {\n    this.flatCoordinates = polygon.getFlatCoordinates().slice();\n    ends = polygon.getEnds().slice();\n    this.endss_.push();\n  } else {\n    const offset = this.flatCoordinates.length;\n    extend(this.flatCoordinates, polygon.getFlatCoordinates());\n    ends = polygon.getEnds().slice();\n    let i, ii;\n    for (i = 0, ii = ends.length; i < ii; ++i) {\n      ends[i] += offset;\n    }\n  }\n  this.endss_.push(ends);\n  this.changed();\n};\n\n\n/**\n * Make a complete copy of the geometry.\n * @return {!ol.geom.MultiPolygon} Clone.\n * @override\n * @api\n */\nMultiPolygon.prototype.clone = function() {\n  const multiPolygon = new MultiPolygon(null);\n\n  const len = this.endss_.length;\n  const newEndss = new Array(len);\n  for (let i = 0; i < len; ++i) {\n    newEndss[i] = this.endss_[i].slice();\n  }\n\n  multiPolygon.setFlatCoordinates(\n    this.layout, this.flatCoordinates.slice(), newEndss);\n  return multiPolygon;\n};\n\n\n/**\n * @inheritDoc\n */\nMultiPolygon.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {\n  if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n    return minSquaredDistance;\n  }\n  if (this.maxDeltaRevision_ != this.getRevision()) {\n    this.maxDelta_ = Math.sqrt(_ol_geom_flat_closest_.getssMaxSquaredDelta(\n      this.flatCoordinates, 0, this.endss_, this.stride, 0));\n    this.maxDeltaRevision_ = this.getRevision();\n  }\n  return _ol_geom_flat_closest_.getssClosestPoint(\n    this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride,\n    this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n};\n\n\n/**\n * @inheritDoc\n */\nMultiPolygon.prototype.containsXY = function(x, y) {\n  return _ol_geom_flat_contains_.linearRingssContainsXY(\n    this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, x, y);\n};\n\n\n/**\n * Return the area of the multipolygon on projected plane.\n * @return {number} Area (on projected plane).\n * @api\n */\nMultiPolygon.prototype.getArea = function() {\n  return _ol_geom_flat_area_.linearRingss(\n    this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride);\n};\n\n\n/**\n * Get the coordinate array for this geometry.  This array has the structure\n * of a GeoJSON coordinate array for multi-polygons.\n *\n * @param {boolean=} opt_right Orient coordinates according to the right-hand\n *     rule (counter-clockwise for exterior and clockwise for interior rings).\n *     If `false`, coordinates will be oriented according to the left-hand rule\n *     (clockwise for exterior and counter-clockwise for interior rings).\n *     By default, coordinate orientation will depend on how the geometry was\n *     constructed.\n * @return {Array.<Array.<Array.<ol.Coordinate>>>} Coordinates.\n * @override\n * @api\n */\nMultiPolygon.prototype.getCoordinates = function(opt_right) {\n  let flatCoordinates;\n  if (opt_right !== undefined) {\n    flatCoordinates = this.getOrientedFlatCoordinates().slice();\n    _ol_geom_flat_orient_.orientLinearRingss(\n      flatCoordinates, 0, this.endss_, this.stride, opt_right);\n  } else {\n    flatCoordinates = this.flatCoordinates;\n  }\n\n  return _ol_geom_flat_inflate_.coordinatesss(\n    flatCoordinates, 0, this.endss_, this.stride);\n};\n\n\n/**\n * @return {Array.<Array.<number>>} Endss.\n */\nMultiPolygon.prototype.getEndss = function() {\n  return this.endss_;\n};\n\n\n/**\n * @return {Array.<number>} Flat interior points.\n */\nMultiPolygon.prototype.getFlatInteriorPoints = function() {\n  if (this.flatInteriorPointsRevision_ != this.getRevision()) {\n    const flatCenters = _ol_geom_flat_center_.linearRingss(\n      this.flatCoordinates, 0, this.endss_, this.stride);\n    this.flatInteriorPoints_ = _ol_geom_flat_interiorpoint_.linearRingss(\n      this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride,\n      flatCenters);\n    this.flatInteriorPointsRevision_ = this.getRevision();\n  }\n  return this.flatInteriorPoints_;\n};\n\n\n/**\n * Return the interior points as {@link ol.geom.MultiPoint multipoint}.\n * @return {ol.geom.MultiPoint} Interior points as XYM coordinates, where M is\n * the length of the horizontal intersection that the point belongs to.\n * @api\n */\nMultiPolygon.prototype.getInteriorPoints = function() {\n  const interiorPoints = new MultiPoint(null);\n  interiorPoints.setFlatCoordinates(GeometryLayout.XYM,\n    this.getFlatInteriorPoints().slice());\n  return interiorPoints;\n};\n\n\n/**\n * @return {Array.<number>} Oriented flat coordinates.\n */\nMultiPolygon.prototype.getOrientedFlatCoordinates = function() {\n  if (this.orientedRevision_ != this.getRevision()) {\n    const flatCoordinates = this.flatCoordinates;\n    if (_ol_geom_flat_orient_.linearRingssAreOriented(\n      flatCoordinates, 0, this.endss_, this.stride)) {\n      this.orientedFlatCoordinates_ = flatCoordinates;\n    } else {\n      this.orientedFlatCoordinates_ = flatCoordinates.slice();\n      this.orientedFlatCoordinates_.length =\n          _ol_geom_flat_orient_.orientLinearRingss(\n            this.orientedFlatCoordinates_, 0, this.endss_, this.stride);\n    }\n    this.orientedRevision_ = this.getRevision();\n  }\n  return this.orientedFlatCoordinates_;\n};\n\n\n/**\n * @inheritDoc\n */\nMultiPolygon.prototype.getSimplifiedGeometryInternal = function(squaredTolerance) {\n  const simplifiedFlatCoordinates = [];\n  const simplifiedEndss = [];\n  simplifiedFlatCoordinates.length = _ol_geom_flat_simplify_.quantizess(\n    this.flatCoordinates, 0, this.endss_, this.stride,\n    Math.sqrt(squaredTolerance),\n    simplifiedFlatCoordinates, 0, simplifiedEndss);\n  const simplifiedMultiPolygon = new MultiPolygon(null);\n  simplifiedMultiPolygon.setFlatCoordinates(\n    GeometryLayout.XY, simplifiedFlatCoordinates, simplifiedEndss);\n  return simplifiedMultiPolygon;\n};\n\n\n/**\n * Return the polygon at the specified index.\n * @param {number} index Index.\n * @return {ol.geom.Polygon} Polygon.\n * @api\n */\nMultiPolygon.prototype.getPolygon = function(index) {\n  if (index < 0 || this.endss_.length <= index) {\n    return null;\n  }\n  let offset;\n  if (index === 0) {\n    offset = 0;\n  } else {\n    const prevEnds = this.endss_[index - 1];\n    offset = prevEnds[prevEnds.length - 1];\n  }\n  const ends = this.endss_[index].slice();\n  const end = ends[ends.length - 1];\n  if (offset !== 0) {\n    let i, ii;\n    for (i = 0, ii = ends.length; i < ii; ++i) {\n      ends[i] -= offset;\n    }\n  }\n  const polygon = new Polygon(null);\n  polygon.setFlatCoordinates(\n    this.layout, this.flatCoordinates.slice(offset, end), ends);\n  return polygon;\n};\n\n\n/**\n * Return the polygons of this multipolygon.\n * @return {Array.<ol.geom.Polygon>} Polygons.\n * @api\n */\nMultiPolygon.prototype.getPolygons = function() {\n  const layout = this.layout;\n  const flatCoordinates = this.flatCoordinates;\n  const endss = this.endss_;\n  const polygons = [];\n  let offset = 0;\n  let i, ii, j, jj;\n  for (i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i].slice();\n    const end = ends[ends.length - 1];\n    if (offset !== 0) {\n      for (j = 0, jj = ends.length; j < jj; ++j) {\n        ends[j] -= offset;\n      }\n    }\n    const polygon = new Polygon(null);\n    polygon.setFlatCoordinates(\n      layout, flatCoordinates.slice(offset, end), ends);\n    polygons.push(polygon);\n    offset = end;\n  }\n  return polygons;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nMultiPolygon.prototype.getType = function() {\n  return GeometryType.MULTI_POLYGON;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nMultiPolygon.prototype.intersectsExtent = function(extent) {\n  return _ol_geom_flat_intersectsextent_.linearRingss(\n    this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, extent);\n};\n\n\n/**\n * Set the coordinates of the multipolygon.\n * @param {Array.<Array.<Array.<ol.Coordinate>>>} coordinates Coordinates.\n * @param {ol.geom.GeometryLayout=} opt_layout Layout.\n * @override\n * @api\n */\nMultiPolygon.prototype.setCoordinates = function(coordinates, opt_layout) {\n  if (!coordinates) {\n    this.setFlatCoordinates(GeometryLayout.XY, null, this.endss_);\n  } else {\n    this.setLayout(opt_layout, coordinates, 3);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const endss = _ol_geom_flat_deflate_.coordinatesss(\n      this.flatCoordinates, 0, coordinates, this.stride, this.endss_);\n    if (endss.length === 0) {\n      this.flatCoordinates.length = 0;\n    } else {\n      const lastEnds = endss[endss.length - 1];\n      this.flatCoordinates.length = lastEnds.length === 0 ?\n        0 : lastEnds[lastEnds.length - 1];\n    }\n    this.changed();\n  }\n};\n\n\n/**\n * @param {ol.geom.GeometryLayout} layout Layout.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {Array.<Array.<number>>} endss Endss.\n */\nMultiPolygon.prototype.setFlatCoordinates = function(layout, flatCoordinates, endss) {\n  this.setFlatCoordinatesInternal(layout, flatCoordinates);\n  this.endss_ = endss;\n  this.changed();\n};\n\n\n/**\n * @param {Array.<ol.geom.Polygon>} polygons Polygons.\n */\nMultiPolygon.prototype.setPolygons = function(polygons) {\n  let layout = this.getLayout();\n  const flatCoordinates = [];\n  const endss = [];\n  for (let i = 0, ii = polygons.length; i < ii; ++i) {\n    const polygon = polygons[i];\n    if (i === 0) {\n      layout = polygon.getLayout();\n    }\n    const offset = flatCoordinates.length;\n    const ends = polygon.getEnds();\n    for (let j = 0, jj = ends.length; j < jj; ++j) {\n      ends[j] += offset;\n    }\n    extend(flatCoordinates, polygon.getFlatCoordinates());\n    endss.push(ends);\n  }\n  this.setFlatCoordinates(layout, flatCoordinates, endss);\n};\n\nexport default MultiPolygon;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/geom/MultiPolygon.js\n// module id = 21\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23","/**\n * @module ngeo.format.Attribute\n */\nconst exports = {};\nimport ngeoFormatAttributeType from 'ngeo/format/AttributeType.js';\n\n\n/**\n * Set the `type` and `geomType` properties of an attribute if the given\n * type is a geometry one.\n *\n * @param {ngeox.AttributeBase} attribute Attribute.\n * @param {string} type Type.\n * @return {boolean} Whether both attribute type and geomType were set.\n */\nexports.setGeometryType = function(attribute, type) {\n  const geomRegex =\n    /gml:((Multi)?(Point|Line|Polygon|Curve|Surface|Geometry)).*/;\n  if (geomRegex.exec(type)) {\n    attribute.type = ngeoFormatAttributeType.GEOMETRY;\n    if (/^gml:Point/.exec(type)) {\n      attribute.geomType = 'Point';\n    } else if (/^gml:LineString|^gml:Curve/.exec(type)) {\n      attribute.geomType = 'LineString';\n    } else if (/^gml:Polygon|^gml:Surface/.exec(type)) {\n      attribute.geomType = 'Polygon';\n    } else if (/^gml:MultiPoint/.exec(type)) {\n      attribute.geomType = 'MultiPoint';\n    } else if (/^gml:MultiLineString|^gml:MultiCurve/.exec(type)) {\n      attribute.geomType = 'MultiLineString';\n    } else if (/^gml:MultiPolygon|^gml:MultiSurface/.exec(type)) {\n      attribute.geomType = 'MultiPolygon';\n    }\n  }\n  return !!attribute.type && !!attribute.geomType;\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/format/Attribute.js","/**\n * @module gmf.theme.Themes\n */\nimport googAsserts from 'goog/asserts.js';\nimport gmfBase from 'gmf/index.js';\nimport ngeoMapLayerHelper from 'ngeo/map/LayerHelper.js';\nimport * as olBase from 'ol/index.js';\nimport * as olArray from 'ol/array.js';\nimport olCollection from 'ol/Collection.js';\nimport olEventsEventTarget from 'ol/events/EventTarget.js';\nimport olLayerTile from 'ol/layer/Tile.js';\n\n/**\n * The Themes service. This service interacts\n * with c2cgeoportal's \"themes\" web service and exposes functions that return\n * objects in the tree returned by the \"themes\" web service.\n *\n * @constructor\n * @struct\n * @extends {ol.events.EventTarget}\n * @param {angular.$http} $http Angular http service.\n * @param {angular.$injector} $injector Main injector.\n * @param {angular.$q} $q Angular q service\n * @param {ngeo.map.LayerHelper} ngeoLayerHelper Ngeo Layer Helper.\n * @param {angularGettext.Catalog} gettextCatalog Gettext catalog.\n * @param {gmfx.ThemesOptions} gmfThemesOptions Themes options.\n * @ngInject\n * @ngdoc service\n * @ngname gmfThemes\n */\nconst exports = function($http, $injector, $q, ngeoLayerHelper, gettextCatalog, gmfThemesOptions) {\n\n  olEventsEventTarget.call(this);\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.addBlankBackgroundLayer_ = true;\n  if (gmfThemesOptions.addBlankBackgroundLayer !== undefined) {\n    this.addBlankBackgroundLayer_ = gmfThemesOptions.addBlankBackgroundLayer;\n  }\n\n  /**\n   * @type {angular.$q}\n   * @private\n   */\n  this.$q_ = $q;\n\n  /**\n   * @type {angular.$http}\n   * @private\n   */\n  this.$http_ = $http;\n\n  /**\n   * @type {string|undefined}\n   * @private\n   */\n  this.treeUrl_ = undefined;\n  if ($injector.has('gmfTreeUrl')) {\n    this.treeUrl_ = $injector.get('gmfTreeUrl');\n  }\n\n  this.cacheVersion_ = '0';\n  if ($injector.has('cacheVersion')) {\n    this.cacheVersion_ = $injector.get('cacheVersion');\n  }\n\n  /**\n   * @type {?ngeo.statemanager.Location}\n   * @private\n   */\n  this.ngeoLocation_ = null;\n  if ($injector.has('ngeoLocation')) {\n    this.ngeoLocation_ = $injector.get('ngeoLocation');\n  }\n\n  /**\n   * @type {ngeo.map.LayerHelper}\n   * @private\n   */\n  this.layerHelper_ = ngeoLayerHelper;\n\n  /**\n   * @type {angularGettext.Catalog}\n   * @private\n   */\n  this.gettextCatalog = gettextCatalog;\n\n  /**\n   * @type {angular.$q.Deferred}\n   * @private\n   */\n  this.deferred_ = $q.defer();\n\n  /**\n   * @type {angular.$q.Promise}\n   * @private\n   */\n  this.promise_ = this.deferred_.promise;\n\n  /**\n   * @type {boolean}\n   */\n  this.loaded = false;\n\n  /**\n   * @type {angular.$q.Promise}\n   * @private\n   */\n  this.bgLayerPromise_ = null;\n};\n\nolBase.inherits(exports, olEventsEventTarget);\n\n\n/**\n * @param {Array.<gmfThemes.GmfTheme>} themes Array of \"theme\" objects.\n * @param {string} name The layer name.\n * @return {gmfThemes.GmfGroup} The group.\n */\nexports.findGroupByLayerNodeName = function(themes, name) {\n  for (let i = 0, ii = themes.length; i < ii; i++) {\n    const theme = themes[i];\n    for (let j = 0, jj = theme.children.length; j < jj; j++) {\n      const group = theme.children[j];\n      const childNodes = [];\n      exports.getFlatNodes(group, childNodes);\n      if (exports.findObjectByName(childNodes, name)) {\n        return group;\n      }\n    }\n  }\n  return null;\n};\n\n/**\n * Find a layer group object by its name. Return null if not found.\n * @param {Array.<gmfThemes.GmfTheme>} themes Array of \"theme\" objects.\n * @param {string} name The group name.\n * @return {gmfThemes.GmfGroup} The group.\n */\nexports.findGroupByName = function(themes, name) {\n  for (let i = 0, ii = themes.length; i < ii; i++) {\n    const theme = themes[i];\n    for (let j = 0, jj = theme.children.length; j < jj; j++) {\n      const group = theme.children[j];\n      const internalNodes = [];\n      exports.getFlatInternalNodes(group, internalNodes);\n      if (exports.findObjectByName(internalNodes, name)) {\n        return group;\n      }\n    }\n  }\n  return null;\n};\n\n\n/**\n * Find an object by its name. Return null if not found.\n * @param {Array.<T>} objects Array of objects with a 'name' attribute.\n * @param {string} objectName The object name.\n * @return {T} The object or null.\n * @template T\n */\nexports.findObjectByName = function(objects, objectName) {\n  return olArray.find(objects, object => object['name'] === objectName);\n};\n\n\n/**\n * Find a theme object by its name. Return null if not found.\n * @param {Array.<gmfThemes.GmfTheme>} themes Array of \"theme\" objects.\n * @param {string} themeName The theme name.\n * @return {gmfThemes.GmfTheme} The theme object or null.\n */\nexports.findThemeByName = function(themes, themeName) {\n  return exports.findObjectByName(themes, themeName);\n};\n\n\n/**\n * Fill the given \"nodes\" array with all internal nodes (non-leaf nones) in\n * the given node.\n *\n * @param {gmfThemes.GmfGroup|gmfThemes.GmfLayer} node Layertree node.\n * @param {Array.<gmfThemes.GmfGroup|gmfThemes.GmfLayer>} nodes An array.\n */\nexports.getFlatInternalNodes = function(node, nodes) {\n  const children = node.children;\n  if (children !== undefined) {\n    nodes.push(node);\n    for (let i = 0; i < children.length; i++) {\n      exports.getFlatInternalNodes(children[i], nodes);\n    }\n  }\n};\n\n\n/**\n * Fill the given \"nodes\" array with all leaf nodes in the given node.\n *\n * @param {gmfThemes.GmfGroup|gmfThemes.GmfLayer} node Layertree node.\n * @param {Array.<gmfThemes.GmfGroup|gmfThemes.GmfLayer>} nodes An array.\n */\nexports.getFlatNodes = function(node, nodes) {\n  let i;\n  const children = node.children;\n  if (children !== undefined) {\n    for (i = 0; i < children.length; i++) {\n      exports.getFlatNodes(children[i], nodes);\n    }\n  } else {\n    nodes.push(node);\n  }\n};\n\n\n/**\n * Get background layers.\n * @param {!Object.<string, string>} appDimensions Dimensions.\n * @return {!angular.$q.Promise.<!Array.<!ol.layer.Base>>} Promise.\n */\nexports.prototype.getBgLayers = function(appDimensions) {\n  const gettextCatalog = this.gettextCatalog;\n  if (this.bgLayerPromise_) {\n    return this.bgLayerPromise_;\n  }\n  const $q = this.$q_;\n  const layerHelper = this.layerHelper_;\n\n  /**\n   * @param {gmfThemes.GmfGroup|gmfThemes.GmfLayer} item A group or a leaf.\n   * @param {Array.<number>} array Array of ids;\n   */\n  const getIds = function(item, array) {\n    array.push(olBase.getUid(item));\n    const children = item.children || [];\n    children.forEach((child) => {\n      getIds(child, array);\n    });\n  };\n\n  /**\n   * @param {gmfThemes.GmfGroup|gmfThemes.GmfLayer} item The item.\n   * @param {ol.layer.Base} layer The layer.\n   * @return {ol.layer.Base} the provided layer.\n   */\n  const callback = function(item, layer) {\n    layer.set('label', item.name);\n    layer.set('metadata', item.metadata);\n    layer.set('dimensions', item.dimensions);\n    const ids = [];\n    getIds(item, ids);\n    layer.set('querySourceIds', ids);\n    return layer;\n  };\n\n  /**\n   * @param {gmfThemes.GmfOgcServers} ogcServers The ogc servers.\n   * @param {gmfThemes.GmfGroup|gmfThemes.GmfLayer} gmfLayer The item.\n   * @return {angular.$q.Promise.<ol.layer.Base>|ol.layer.Base} the created layer.\n   */\n  const layerLayerCreationFn = function(ogcServers, gmfLayer) {\n    if (gmfLayer.type === 'WMTS') {\n      const gmfLayerWMTS = /** @type gmfThemes.GmfLayerWMTS */ (gmfLayer);\n      googAsserts.assert(gmfLayerWMTS.url, 'Layer URL is required');\n      return layerHelper.createWMTSLayerFromCapabilitites(\n        gmfLayerWMTS.url,\n        gmfLayerWMTS.layer || '',\n        gmfLayer.dimensions\n      ).then(callback.bind(null, gmfLayer)).then(null, (response) => {\n        let message = `Unable to build layer \"${gmfLayerWMTS.layer}\" from WMTSCapabilities: ${gmfLayerWMTS.url}\\n`;\n        message += `OpenLayers error is \"${response['message']}`;\n        console.error(message);\n        // Continue even if some layers have failed loading.\n        return $q.resolve(undefined);\n      });\n    } else if (gmfLayer.type === 'WMS') {\n      const gmfLayerWMS = /** @type gmfThemes.GmfLayerWMS */ (gmfLayer);\n      googAsserts.assert(gmfLayerWMS.ogcServer, 'An OGC server is required');\n      const server = ogcServers[gmfLayerWMS.ogcServer];\n      googAsserts.assert(server, 'The OGC server was not found');\n      googAsserts.assert(server.url, 'The server URL is required');\n      googAsserts.assert(server.imageType, 'The server image type is required');\n      return callback(gmfLayer, layerHelper.createBasicWMSLayer(\n        server.url,\n        gmfLayerWMS.layers || '',\n        server.imageType,\n        server.type,\n        undefined, // time\n        gmfLayer.dimensions,\n        server.credential ? 'use-credentials' : 'anonymous'\n      ));\n    }\n    googAsserts.fail(`Unsupported type: ${gmfLayer.type}`);\n  };\n\n  /**\n   * @param {gmfThemes.GmfOgcServers} ogcServers The ogc servers.\n   * @param {gmfThemes.GmfGroup} item The item.\n   * @return {angular.$q.Promise.<ol.layer.Group>} the created layer.\n   */\n  const layerGroupCreationFn = function(ogcServers, item) {\n    // We assume no child is a layer group.\n    const orderedChildren = item.children.map(x => x).reverse(); // the order of insertion in OL3 is the contrary of the theme\n    const promises = orderedChildren.map(layerLayerCreationFn.bind(null, ogcServers));\n    return $q.all(promises).then((layers) => {\n      let collection;\n      if (layers) {\n        layers = layers.filter(l => l);\n        collection = new olCollection(layers);\n      }\n      const group = layerHelper.createBasicGroup(collection);\n      callback(item, group);\n      return group;\n    });\n  };\n\n  /**\n   * @param {gmfThemes.GmfThemesResponse} data The \"themes\" web service\n   *     response.\n   * @return {angular.$q.Promise.<Array.<ol.layer.Base>>} Promise.\n   */\n  const promiseSuccessFn = function(data) {\n    const promises = data.background_layers.map((item) => {\n      const itemType = item.type;\n      if (itemType === 'WMTS' || itemType === 'WMS') {\n        return layerLayerCreationFn(data.ogcServers, item);\n      } else if (item.children) {\n        // group of layers\n        return layerGroupCreationFn(data.ogcServers, item);\n      } else {\n        return undefined;\n      }\n    }, this);\n    return $q.all(promises);\n  }.bind(this);\n\n  this.bgLayerPromise_ = this.promise_.then(promiseSuccessFn).then((values) => {\n    const layers = [];\n\n    // (1) add a blank layer\n    if (this.addBlankBackgroundLayer_) {\n      // For i18n string collection\n      gettextCatalog.getString('blank');\n      layers.push(new olLayerTile({\n        'label': 'blank',\n        'metadata': {'thumbnail': ''}\n      }));\n    }\n\n    // (2) add layers that were returned\n    values.forEach((layer) => {\n      if (layer) {\n        layers.push(layer);\n      }\n    });\n    return layers;\n  });\n\n  return this.bgLayerPromise_;\n};\n\n\n/**\n * Get a theme object by its name.\n * @param {string} themeName Theme name.\n * @return {angular.$q.Promise.<gmfThemes.GmfTheme>} Promise.\n * @export\n */\nexports.prototype.getThemeObject = function(themeName) {\n  return this.promise_.then(\n    /**\n       * @param {gmfThemes.GmfThemesResponse} data The \"themes\" web service\n       *     response.\n       * @return {gmfThemes.GmfTheme?} The theme object for themeName, or null\n       *     if not found.\n       */\n    data => exports.findThemeByName(data.themes, themeName));\n};\n\n\n/**\n * Get an array of theme objects.\n * @return {angular.$q.Promise.<!Array.<!gmfThemes.GmfTheme>>} Promise.\n * @export\n */\nexports.prototype.getThemesObject = function() {\n  return this.promise_.then(\n    /**\n       * @param {!gmfThemes.GmfThemesResponse} data The \"themes\" web service\n       *     response.\n       * @return {!Array.<!gmfThemes.GmfTheme>} The themes object.\n       */\n    data => data.themes);\n};\n\n\n/**\n * Get an array of background layer objects.\n * @return {angular.$q.Promise.<!Array.<!gmfThemes.GmfLayer>>} Promise.\n */\nexports.prototype.getBackgroundLayersObject = function() {\n  googAsserts.assert(this.promise_ !== null);\n  return this.promise_.then(\n    /**\n       * @param {!gmfThemes.GmfThemesResponse} data The \"themes\" web service\n       *     response.\n       * @return {!Array.<!gmfThemes.GmfLayer>} The background layers object.\n       */\n    data => data.background_layers\n  );\n};\n\n\n/**\n * Get the `ogcServers` object.\n * @return {angular.$q.Promise.<!gmfThemes.GmfOgcServers>} Promise.\n * @export\n */\nexports.prototype.getOgcServersObject = function() {\n  googAsserts.assert(this.promise_ !== null);\n  return this.promise_.then(\n    /**\n       * @param {gmfThemes.GmfThemesResponse} data The \"themes\" web service\n       *     response.\n       * @return {gmfThemes.GmfOgcServers} The `ogcServers` object.\n       */\n    data => data.ogcServers);\n};\n\n\n/**\n * Returns a promise to check if one of the layers in the themes is editable.\n * @return {angular.$q.Promise.<boolean>} Promise.\n */\nexports.prototype.hasEditableLayers = function() {\n  googAsserts.assert(this.promise_ !== null);\n  return this.promise_.then(this.hasEditableLayers_.bind(this));\n};\n\n\n/**\n * Returns if one of the layers in the themes is editable.\n * @param {gmfThemes.GmfThemesResponse} data The \"themes\" web service response.\n * @return {boolean} Editable layers?\n */\nexports.prototype.hasEditableLayers_ = function(data) {\n  return data.themes.some((theme) => {\n    const hasEditableLayers = theme.children.some(this.hasNodeEditableLayers_.bind(this));\n    return hasEditableLayers;\n  });\n};\n\n\n/**\n * @param {gmfThemes.GmfGroup|gmfThemes.GmfLayer} node Theme node\n * @return {boolean} Editable layers?\n */\nexports.prototype.hasNodeEditableLayers_ = function(node) {\n  if (node.editable) {\n    return true;\n  }\n\n  let hasEditableLayers = false;\n  const children = node.children;\n  if (children && children.length) {\n    hasEditableLayers = children.some(this.hasNodeEditableLayers_.bind(this));\n  }\n  return hasEditableLayers;\n};\n\n\n/**\n * Get the snapping configuration object from a Layertree controller\n * @param {gmfThemes.GmfLayer} node Layer node from the theme.\n * @return {?gmfThemes.GmfSnappingConfig} Snapping configuration, if found.\n * @export\n */\nexports.getSnappingConfig = function(node) {\n  const config = (node.metadata && node.metadata.snappingConfig !== undefined) ?\n    node.metadata.snappingConfig : null;\n  return config;\n};\n\n\n/**\n * Get the maximal resolution defined for this layer. Looks in the\n *     layer itself before to look into its metadata.\n * @param {gmfThemes.GmfLayerWMS} gmfLayer the GeoMapFish Layer. WMTS layer is\n *     also allowed (the type is defined as GmfLayerWMS only to avoid some\n *     useless tests to know if a maxResolutionHint property can exist\n *     on the node).\n * @return {number|undefined} the max resolution or undefined if any.\n */\nexports.getNodeMaxResolution = function(gmfLayer) {\n  const metadata = gmfLayer.metadata;\n  let maxResolution = gmfLayer.maxResolutionHint;\n  if (maxResolution === undefined && metadata !== undefined) {\n    maxResolution = metadata.maxResolution;\n  }\n  return maxResolution;\n};\n\n\n/**\n * Get the minimal resolution defined for this layer. Looks in the\n *     layer itself before to look into its metadata.\n * @param {gmfThemes.GmfLayerWMS} gmfLayer the GeoMapFish Layer. WMTS layer is\n *     also allowed (the type is defined as GmfLayerWMS only to avoid some\n *     useless tests to know if a minResolutionHint property can exist\n *     on the node).\n * @return {number|undefined} the min resolution or undefined if any.\n */\nexports.getNodeMinResolution = function(gmfLayer) {\n  const metadata = gmfLayer.metadata;\n  let minResolution = gmfLayer.minResolutionHint;\n  if (minResolution === undefined && metadata !== undefined) {\n    minResolution = metadata.minResolution;\n  }\n  return minResolution;\n};\n\n\n/**\n * @param {number=} opt_roleId The role id to send in the request.\n * Load themes from the \"themes\" service.\n * @export\n */\nexports.prototype.loadThemes = function(opt_roleId) {\n\n  googAsserts.assert(this.treeUrl_, 'gmfTreeUrl should be defined.');\n\n  if (this.loaded) {\n    // reload the themes\n    this.deferred_ = this.$q_.defer();\n    this.promise_ = this.deferred_.promise;\n    this.bgLayerPromise_ = null;\n    this.loaded = false;\n  }\n\n  this.$http_.get(this.treeUrl_, {\n    params: opt_roleId !== undefined ? {\n      'role': opt_roleId,\n      'cache_version': this.cacheVersion_\n    } : {\n      'cache_version': this.cacheVersion_\n    },\n    cache: false,\n    withCredentials: true\n  }).then((response) => {\n    if (response.data.errors.length != 0) {\n      const message = `The themes contain some errors:\\n${\n        response.data.errors.join('\\n')}`;\n      console.error(message);\n      if (this.ngeoLocation_ !== null && this.ngeoLocation_.hasParam('debug')) {\n        window.alert(message);\n      }\n    }\n    this.deferred_.resolve(response.data);\n    this.dispatchEvent('change');\n    this.loaded = true;\n  }, (response) => {\n    this.deferred_.reject(response);\n  });\n};\n\n\n/**\n * @enum {string}\n */\nexports.NodeType = {\n  MIXED_GROUP: 'MixedGroup',\n  NOT_MIXED_GROUP: 'NotMixedGroup',\n  WMTS: 'WMTS',\n  WMS: 'WMS'\n};\n\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('gmfThemes', [\n  ngeoMapLayerHelper.module.name,\n]);\nexports.module.value('gmfThemesOptions', {});\nexports.module.service('gmfThemes', exports);\nexports.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/src/theme/Themes.js","/**\n * @module gmf.editing.EditFeature\n */\nimport gmfBase from 'gmf/index.js';\nimport olFormatGeoJSON from 'ol/format/GeoJSON.js';\nimport * as olUri from 'ol/uri.js';\n\n/**\n * Service that provides methods to get, insert, update and delete vector\n * features with the use of a GeoMapFish Protocol as back-end.\n *\n * The GeoJSON format is used when obtaining or sending features.\n *\n * @constructor\n * @struct\n * @param {angular.$http} $http Angular http service.\n * @param {string} gmfLayersUrl Url to the GeoMapFish layers service.\n * @ngInject\n */\nconst exports = function($http, gmfLayersUrl) {\n\n  /**\n   * @type {angular.$http}\n   * @private\n   */\n  this.http_ = $http;\n\n  /**\n   * Url to the GeoMapFish layers service. Required in applications that use:\n   * - the editfeature tools\n   * - the objectediting tools\n   *\n   * @type {string}\n   * @private\n   */\n  this.baseUrl_ = gmfLayersUrl;\n\n};\n\n\n/**\n * Build a query to the MapFish protocol to fetch features from a list\n * of layer ids inside a specified extent.\n *\n * @param {Array.<number>} layerIds List of layer ids to get the features from.\n * @param {ol.Extent} extent The extent where to get the features from.\n * @return {angular.$q.Promise} Promise.\n * @export\n */\nexports.prototype.getFeaturesInExtent = function(layerIds, extent) {\n  const url = olUri.appendParams(\n    `${this.baseUrl_}/${layerIds.join(',')}`,\n    {\n      'bbox': extent.join(',')\n    }\n  );\n  return this.http_.get(url).then(this.handleGetFeatures_.bind(this));\n};\n\n\n/**\n * Build a query to the MapFish protocol to fetch features from a list\n * of layer ids and a list of comparison filters.\n *\n * This method is called in the ObjectEditing service, which is injected in\n * the permalink service, i.e. it's always called. Since we don't have to\n * define the url to the GMF Protocol (layers) a dummy promise returns an\n * empty array of features if the url is not defined.\n *\n * @param {!Array.<number>} layerIds List of layer ids to get the features from.\n * @param {!Array.<!gmfx.ComparisonFilter>} filters List of comparison filters\n * @return {angular.$q.Promise} Promise.\n */\nexports.prototype.getFeaturesWithComparisonFilters = function(\n  layerIds, filters\n) {\n  const properties = [];\n  const params = {};\n\n  for (const filter of filters) {\n    params[`${filter.property}__${filter.operator}`] = filter.value;\n    properties.push(filter.property);\n  }\n\n  params['queryable'] = properties.join(',');\n\n  const url = olUri.appendParams(`${this.baseUrl_}/${layerIds.join(',')}`, params);\n  return this.http_.get(url).then(this.handleGetFeatures_.bind(this));\n};\n\n\n/**\n * @param {angular.$http.Response} resp Ajax response.\n * @return {Array.<ol.Feature>} List of features.\n * @private\n */\nexports.prototype.handleGetFeatures_ = function(resp) {\n  return new olFormatGeoJSON().readFeatures(resp.data);\n};\n\n\n/**\n * @param {number} layerId The layer id that contains the feature.\n * @param {Array.<ol.Feature>} features List of features to insert.\n * @return {angular.$q.Promise} Promise.\n * @export\n */\nexports.prototype.insertFeatures = function(layerId, features) {\n  const url = `${this.baseUrl_}/${layerId}`;\n  const geoJSON = new olFormatGeoJSON().writeFeatures(features);\n  return this.http_.post(url, geoJSON, {\n    headers: {'Content-Type': 'application/json'},\n    withCredentials: true\n  });\n};\n\n\n/**\n * @param {number} layerId The layer id that contains the feature.\n * @param {ol.Feature} feature The feature to update.\n * @return {angular.$q.Promise} Promise.\n * @export\n */\nexports.prototype.updateFeature = function(layerId, feature) {\n  const url = `${this.baseUrl_}/${layerId.toString()}/${feature.getId()}`;\n  const geoJSON = new olFormatGeoJSON().writeFeature(feature);\n  return this.http_.put(url, geoJSON, {\n    headers: {'Content-Type': 'application/json'},\n    withCredentials: true\n  });\n};\n\n\n/**\n * @param {number} layerId The layer id that contains the feature.\n * @param {ol.Feature} feature The feature to delete.\n * @return {angular.$q.Promise} Promise.\n * @export\n */\nexports.prototype.deleteFeature = function(layerId, feature) {\n  const url = `${this.baseUrl_}/${layerId.toString()}/${feature.getId()}`;\n  return this.http_.delete(url, {\n    headers: {'Content-Type': 'application/json'},\n    withCredentials: true\n  });\n};\n\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('gmfEditFeature', []);\nexports.module.service('gmfEditFeature', exports);\ngmfBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/src/editing/EditFeature.js","/**\n * @module ngeo.format.XSDAttribute\n */\nimport googAsserts from 'goog/asserts.js';\nimport ngeoBase from 'ngeo/index.js';\nimport ngeoFormatAttribute from 'ngeo/format/Attribute.js';\nimport ngeoFormatAttributeType from 'ngeo/format/AttributeType.js';\nimport * as olBase from 'ol/index.js';\nimport olFormatXML from 'ol/format/XML.js';\n\n/**\n * @classdesc\n * Reads attributes that are defined in XSD format and return them as a list.\n *\n * @constructor\n * @struct\n * @extends {ol.format.XML}\n */\nconst exports = function() {\n  olFormatXML.call(this);\n};\n\nolBase.inherits(exports, olFormatXML);\n\n\n/**\n * @param {Document|Node|string} source Source.\n * @return {Array.<ngeox.Attribute>} The parsed result.\n * @override\n */\nexports.prototype.read = function(source) {\n  return (\n    /** @type {Array.<ngeox.Attribute>} */ olFormatXML.prototype.read.call(this, source)\n  );\n};\n\n\n/**\n * @param {Document} doc Document.\n * @return {Array.<ngeox.Attribute>} List of attributes.\n * @override\n */\nexports.prototype.readFromDocument = function(doc) {\n  googAsserts.assert(doc.nodeType == Node.DOCUMENT_NODE,\n    'doc.nodeType should be DOCUMENT');\n  for (let n = doc.firstChild; n; n = n.nextSibling) {\n    if (n.nodeType == Node.ELEMENT_NODE) {\n      return this.readFromNode(n);\n    }\n  }\n  return null;\n};\n\n\n/**\n * @param {Node} node Node.\n * @return {Array.<ngeox.Attribute>} List of attributes.\n * @override\n */\nexports.prototype.readFromNode = function(node) {\n  googAsserts.assert(node.nodeType == Node.ELEMENT_NODE,\n    'node.nodeType should be ELEMENT');\n  googAsserts.assert(node.localName == 'schema',\n    'localName should be schema');\n\n  let elements = node.getElementsByTagName('element');\n  if (!elements.length) {\n    elements = node.getElementsByTagName('xsd:element');\n  }\n  const attributes = [];\n\n  let attribute;\n  for (let i = 0, ii = elements.length; i < ii; i++) {\n    attribute = this.readFromElementNode_(elements[i]);\n    if (attribute) {\n      attributes.push(attribute);\n    }\n  }\n\n  return attributes;\n};\n\n\n/**\n * @param {Node} node Node.\n * @return {?ngeox.Attribute} An attribute object.\n * @private\n */\nexports.prototype.readFromElementNode_ = function(node) {\n\n  const name = node.getAttribute('name');\n  googAsserts.assertString(name, 'name should be defined in element node.');\n\n  const alias = node.getAttribute('alias');\n  const nillable = node.getAttribute('nillable');\n  const required = !(nillable === true || nillable === 'true');\n\n  const attribute = {\n    name,\n    alias,\n    required\n  };\n\n  const type = node.getAttribute('type');\n  if (type) {\n    if (!ngeoFormatAttribute.setGeometryType(attribute, type)) {\n      this.setAttributeByXsdType_(attribute, type);\n    }\n  } else {\n\n    // Attribute has no type defined on 'element' node.  Try:\n\n    // (1) Enumerations\n    let enumerations = node.getElementsByTagName('enumeration');\n    if (!enumerations.length) {\n      enumerations = node.getElementsByTagName('xsd:enumeration');\n    }\n    if (enumerations.length) {\n      attribute.type = ngeoFormatAttributeType.SELECT;\n      const choices = [];\n      for (let i = 0, ii = enumerations.length; i < ii; i++) {\n        choices.push(enumerations[i].getAttribute('value'));\n      }\n      attribute.choices = choices;\n    } else {\n      // (2) Other types with restrictions\n      let restrictions = node.getElementsByTagName('restriction');\n      if (!restrictions.length) {\n        restrictions = node.getElementsByTagName('xsd:restriction');\n      }\n      if (restrictions.length && restrictions[0]) {\n        const restrictionNode = restrictions[0];\n        this.setAttributeByXsdType_(\n          attribute,\n          restrictionNode.getAttribute('base')\n        );\n        // MaxLength\n        let maxLengths = node.getElementsByTagName('maxLength');\n        if (!maxLengths.length) {\n          maxLengths = node.getElementsByTagName('xsd:maxLength');\n        }\n        if (maxLengths.length && maxLengths[0]) {\n          attribute.maxLength = Number(maxLengths[0].getAttribute('value'));\n        }\n      }\n    }\n  }\n\n  if (!attribute.type) {\n    return null;\n  }\n\n  googAsserts.assert(attribute.type);\n\n  return attribute;\n};\n\n\n/**\n * Set the `type` and `numType` properties of an attribute depending on the\n * given xsdType.\n *\n * @param {ngeox.AttributeBase} attribute Attribute.\n * @param {string} type The xsd type.\n * @private\n */\nexports.prototype.setAttributeByXsdType_ = function(\n  attribute, type\n) {\n  if (type === 'xsd:boolean') {\n    attribute.type = ngeoFormatAttributeType.BOOLEAN;\n  } else if (type === 'xsd:date') {\n    attribute.type = ngeoFormatAttributeType.DATE;\n  } else if (type === 'xsd:dateTime') {\n    attribute.type = ngeoFormatAttributeType.DATETIME;\n  } else if (type === 'xsd:time') {\n    attribute.type = ngeoFormatAttributeType.TIME;\n  } else if (type === 'xsd:decimal') {\n    attribute.type = ngeoFormatAttributeType.NUMBER;\n    attribute.numType = exports.NumberType.FLOAT;\n  } else if (type === 'xsd:integer') {\n    attribute.type = ngeoFormatAttributeType.NUMBER;\n    attribute.numType = exports.NumberType.INTEGER;\n  } else if (type === 'xsd:string') {\n    attribute.type = ngeoFormatAttributeType.TEXT;\n  }\n};\n\n\n/**\n * Returns the first geometry attribute among a given list of attributes.\n * @param {Array.<ngeox.Attribute>} attributes The list of attributes.\n * @return {?ngeox.Attribute} A geometry attribute object.\n */\nexports.getGeometryAttribute = function(attributes) {\n  let geomAttribute = null;\n  for (let i = 0, ii = attributes.length; i < ii; i++) {\n    if (attributes[i].type === ngeoFormatAttributeType.GEOMETRY) {\n      geomAttribute = attributes[i];\n      break;\n    }\n  }\n  return geomAttribute;\n};\n\n\n/**\n * @enum {string}\n * @export\n */\nexports.NumberType = {\n  /**\n   * @type {string}\n   * @export\n   */\n  FLOAT: 'float',\n  /**\n   * @type {string}\n   * @export\n   */\n  INTEGER: 'integer'\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/format/XSDAttribute.js","/**\n * @module ol/format/XMLFeature\n */\nimport {inherits} from '../index.js';\nimport {extend} from '../array.js';\nimport FeatureFormat from '../format/Feature.js';\nimport FormatType from '../format/FormatType.js';\nimport _ol_xml_ from '../xml.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for XML feature formats.\n *\n * @constructor\n * @abstract\n * @extends {ol.format.Feature}\n */\nconst XMLFeature = function() {\n\n  /**\n   * @type {XMLSerializer}\n   * @private\n   */\n  this.xmlSerializer_ = new XMLSerializer();\n\n  FeatureFormat.call(this);\n};\n\ninherits(XMLFeature, FeatureFormat);\n\n\n/**\n * @inheritDoc\n */\nXMLFeature.prototype.getType = function() {\n  return FormatType.XML;\n};\n\n\n/**\n * @inheritDoc\n */\nXMLFeature.prototype.readFeature = function(source, opt_options) {\n  if (_ol_xml_.isDocument(source)) {\n    return this.readFeatureFromDocument(\n      /** @type {Document} */ (source), opt_options);\n  } else if (_ol_xml_.isNode(source)) {\n    return this.readFeatureFromNode(/** @type {Node} */ (source), opt_options);\n  } else if (typeof source === 'string') {\n    const doc = _ol_xml_.parse(source);\n    return this.readFeatureFromDocument(doc, opt_options);\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * @param {Document} doc Document.\n * @param {olx.format.ReadOptions=} opt_options Options.\n * @return {ol.Feature} Feature.\n */\nXMLFeature.prototype.readFeatureFromDocument = function(\n  doc, opt_options) {\n  const features = this.readFeaturesFromDocument(doc, opt_options);\n  if (features.length > 0) {\n    return features[0];\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {olx.format.ReadOptions=} opt_options Options.\n * @return {ol.Feature} Feature.\n */\nXMLFeature.prototype.readFeatureFromNode = function(node, opt_options) {\n  return null; // not implemented\n};\n\n\n/**\n * @inheritDoc\n */\nXMLFeature.prototype.readFeatures = function(source, opt_options) {\n  if (_ol_xml_.isDocument(source)) {\n    return this.readFeaturesFromDocument(\n      /** @type {Document} */ (source), opt_options);\n  } else if (_ol_xml_.isNode(source)) {\n    return this.readFeaturesFromNode(/** @type {Node} */ (source), opt_options);\n  } else if (typeof source === 'string') {\n    const doc = _ol_xml_.parse(source);\n    return this.readFeaturesFromDocument(doc, opt_options);\n  } else {\n    return [];\n  }\n};\n\n\n/**\n * @param {Document} doc Document.\n * @param {olx.format.ReadOptions=} opt_options Options.\n * @protected\n * @return {Array.<ol.Feature>} Features.\n */\nXMLFeature.prototype.readFeaturesFromDocument = function(\n  doc, opt_options) {\n  /** @type {Array.<ol.Feature>} */\n  const features = [];\n  let n;\n  for (n = doc.firstChild; n; n = n.nextSibling) {\n    if (n.nodeType == Node.ELEMENT_NODE) {\n      extend(features, this.readFeaturesFromNode(n, opt_options));\n    }\n  }\n  return features;\n};\n\n\n/**\n * @abstract\n * @param {Node} node Node.\n * @param {olx.format.ReadOptions=} opt_options Options.\n * @protected\n * @return {Array.<ol.Feature>} Features.\n */\nXMLFeature.prototype.readFeaturesFromNode = function(node, opt_options) {};\n\n\n/**\n * @inheritDoc\n */\nXMLFeature.prototype.readGeometry = function(source, opt_options) {\n  if (_ol_xml_.isDocument(source)) {\n    return this.readGeometryFromDocument(\n      /** @type {Document} */ (source), opt_options);\n  } else if (_ol_xml_.isNode(source)) {\n    return this.readGeometryFromNode(/** @type {Node} */ (source), opt_options);\n  } else if (typeof source === 'string') {\n    const doc = _ol_xml_.parse(source);\n    return this.readGeometryFromDocument(doc, opt_options);\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * @param {Document} doc Document.\n * @param {olx.format.ReadOptions=} opt_options Options.\n * @protected\n * @return {ol.geom.Geometry} Geometry.\n */\nXMLFeature.prototype.readGeometryFromDocument = function(doc, opt_options) {\n  return null; // not implemented\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {olx.format.ReadOptions=} opt_options Options.\n * @protected\n * @return {ol.geom.Geometry} Geometry.\n */\nXMLFeature.prototype.readGeometryFromNode = function(node, opt_options) {\n  return null; // not implemented\n};\n\n\n/**\n * @inheritDoc\n */\nXMLFeature.prototype.readProjection = function(source) {\n  if (_ol_xml_.isDocument(source)) {\n    return this.readProjectionFromDocument(/** @type {Document} */ (source));\n  } else if (_ol_xml_.isNode(source)) {\n    return this.readProjectionFromNode(/** @type {Node} */ (source));\n  } else if (typeof source === 'string') {\n    const doc = _ol_xml_.parse(source);\n    return this.readProjectionFromDocument(doc);\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * @param {Document} doc Document.\n * @protected\n * @return {ol.proj.Projection} Projection.\n */\nXMLFeature.prototype.readProjectionFromDocument = function(doc) {\n  return this.defaultDataProjection;\n};\n\n\n/**\n * @param {Node} node Node.\n * @protected\n * @return {ol.proj.Projection} Projection.\n */\nXMLFeature.prototype.readProjectionFromNode = function(node) {\n  return this.defaultDataProjection;\n};\n\n\n/**\n * @inheritDoc\n */\nXMLFeature.prototype.writeFeature = function(feature, opt_options) {\n  const node = this.writeFeatureNode(feature, opt_options);\n  return this.xmlSerializer_.serializeToString(node);\n};\n\n\n/**\n * @param {ol.Feature} feature Feature.\n * @param {olx.format.WriteOptions=} opt_options Options.\n * @protected\n * @return {Node} Node.\n */\nXMLFeature.prototype.writeFeatureNode = function(feature, opt_options) {\n  return null; // not implemented\n};\n\n\n/**\n * @inheritDoc\n */\nXMLFeature.prototype.writeFeatures = function(features, opt_options) {\n  const node = this.writeFeaturesNode(features, opt_options);\n  return this.xmlSerializer_.serializeToString(node);\n};\n\n\n/**\n * @param {Array.<ol.Feature>} features Features.\n * @param {olx.format.WriteOptions=} opt_options Options.\n * @return {Node} Node.\n */\nXMLFeature.prototype.writeFeaturesNode = function(features, opt_options) {\n  return null; // not implemented\n};\n\n\n/**\n * @inheritDoc\n */\nXMLFeature.prototype.writeGeometry = function(geometry, opt_options) {\n  const node = this.writeGeometryNode(geometry, opt_options);\n  return this.xmlSerializer_.serializeToString(node);\n};\n\n\n/**\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Options.\n * @return {Node} Node.\n */\nXMLFeature.prototype.writeGeometryNode = function(geometry, opt_options) {\n  return null; // not implemented\n};\nexport default XMLFeature;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/XMLFeature.js\n// module id = 29\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22","/**\n * @module gmf.editing.XSDAttributes\n */\nimport gmfBase from 'gmf/index.js';\nimport ngeoFormatXSDAttribute from 'ngeo/format/XSDAttribute.js';\n\n/**\n * An service used to fetch the XSD attribute definition of layers using their\n * id from a GeoMapFish server.\n *\n * @constructor\n * @struct\n * @param {angular.$http} $http Angular http service.\n * @param {string} gmfLayersUrl Url to the GeoMapFish layers service.\n * @ngInject\n */\nconst exports = function($http, gmfLayersUrl) {\n\n  /**\n   * @type {angular.$http}\n   * @private\n   */\n  this.http_ = $http;\n\n  /**\n   * @type {string}\n   * @private\n   */\n  this.baseUrl_ = gmfLayersUrl;\n\n  /**\n   * @type {Object.<number, !angular.$q.Promise>}\n   * @private\n   */\n  this.promises_ = {};\n\n};\n\n\n/**\n * @param {number} id Layer id.\n * @return {angular.$q.Promise} Promise.\n * @export\n */\nexports.prototype.getAttributes = function(id) {\n  if (!this.promises_[id]) {\n    const url = `${this.baseUrl_}/${id}/md.xsd`;\n    this.promises_[id] = this.http_.get(url).then(\n      this.handleGetAttributes_.bind(this));\n  }\n  return this.promises_[id];\n};\n\n/**\n * @param {angular.$http.Response} resp Ajax response.\n * @return {Array.<ngeox.Attribute>} List of attributes.\n * @export\n */\nexports.prototype.handleGetAttributes_ = function(resp) {\n  return new ngeoFormatXSDAttribute().read(resp.data);\n};\n\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('gmfXSDAttributes', []);\nexports.module.service('gmfXSDAttributes', exports);\ngmfBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/src/editing/XSDAttributes.js","/**\n * @module gmf.objectediting.Manager\n */\nimport gmfEditingEditFeature from 'gmf/editing/EditFeature.js';\nimport ngeoStatemanagerLocation from 'ngeo/statemanager/Location.js';\nimport olFeature from 'ol/Feature.js';\n\n/**\n * A service that looks for certain parameters in the url and use them to fetch\n * a feature using the GMF protocol.\n *\n * @param {angular.$q} $q Angular $q service.\n * @param {gmf.editing.EditFeature} gmfEditFeature Gmf edit feature service.\n * @param {ngeo.statemanager.Location} ngeoLocation ngeo location service.\n * @constructor\n * @struct\n * @ngInject\n */\nconst exports = function($q, gmfEditFeature, ngeoLocation) {\n\n  /**\n   * @type {angular.$q}\n   * @private\n   */\n  this.q_ = $q;\n\n  /**\n   * @type {gmf.editing.EditFeature}\n   * @private\n   */\n  this.gmfEditFeature_ = gmfEditFeature;\n\n  /**\n   * @type {ngeo.statemanager.Location}\n   * @private\n   */\n  this.ngeoLocation_ = ngeoLocation;\n\n  /**\n   * @type {angular.$q.Deferred|null}\n   * @private\n   */\n  this.getFeatureDefered_ = null;\n\n};\n\n\n/**\n * Use the EditFeature service to fetch a single feature using parameters in\n * the url. The method returns a promise that has the feature as argument in\n * the callback method. If any parameter in the url is missing, `null` is\n * returned, otherwise the query is made. If the query returns a feature, it\n * is returned, otherwise one is created with empty geometry and with the\n * property set.\n *\n * @return {angular.$q.Promise} Promise.\n * @export\n */\nexports.prototype.getFeature = function() {\n\n  if (!this.getFeatureDefered_) {\n    this.getFeatureDefered_ = this.q_.defer();\n\n    const geomType = this.ngeoLocation_.getParam(\n      exports.Param.GEOM_TYPE);\n    const id = this.ngeoLocation_.getParam(\n      exports.Param.ID);\n    const layer = this.ngeoLocation_.getParam(\n      exports.Param.LAYER);\n    const property = this.ngeoLocation_.getParam(\n      exports.Param.PROPERTY);\n    const theme = this.ngeoLocation_.getParam(\n      exports.Param.THEME);\n\n    if (geomType && id && layer && property && theme) {\n      this.gmfEditFeature_.getFeaturesWithComparisonFilters(\n        [layer],\n        [{\n          operator: 'eq',\n          property: property,\n          value: id\n        }]\n      ).then(this.handleGetFeatures_.bind(this, property, id));\n    } else {\n      this.getFeatureDefered_.resolve(null);\n    }\n  }\n\n  return this.getFeatureDefered_.promise;\n\n};\n\n\n/**\n * @return {string|undefined} The geometry type.\n * @export\n */\nexports.prototype.getGeomType = function() {\n  return this.ngeoLocation_.getParam(\n    exports.Param.GEOM_TYPE);\n};\n\n\n/**\n * @return {number|undefined} The gmf layer node id.\n * @export\n */\nexports.prototype.getLayerNodeId = function() {\n  return this.ngeoLocation_.getParamAsInt(\n    exports.Param.LAYER);\n};\n\n\n/**\n * Called after getting features with comparison filters. Resolve the defered\n * promise with the first returned feature (if any), otherwise resolve it\n * with a feature created with an empty geometry and the property key + value\n * that was used in the attempt to fetch it.\n *\n * @param {string} key Property key.\n * @param {string} value Property value.\n * @param {Array.<ol.Feature>} features List of features.\n * @private\n */\nexports.prototype.handleGetFeatures_ = function(key, value, features) {\n  let feature;\n\n  if (features.length) {\n    feature = features[0];\n  } else {\n    const featureProperties = {};\n    featureProperties[key] = value;\n    featureProperties['geometry'] = null;\n    feature = new olFeature(featureProperties);\n  }\n\n  this.getFeatureDefered_.resolve(feature);\n};\n\n\n/**\n * @enum {string}\n * @export\n */\nexports.Param = {\n  /**\n   * @type {string}\n   * @export\n   */\n  GEOM_TYPE: 'objectediting_geomtype',\n  /**\n   * @type {string}\n   * @export\n   */\n  ID: 'objectediting_id',\n  /**\n   * @type {string}\n   * @export\n   */\n  LAYER: 'objectediting_layer',\n  /**\n   * @type {string}\n   * @export\n   */\n  PROPERTY: 'objectediting_property',\n  /**\n   * @type {string}\n   * @export\n   */\n  THEME: 'objectediting_theme'\n};\n\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('gmfObjectEditingManager', [\n  gmfEditingEditFeature.module.name,\n  ngeoStatemanagerLocation.module.name,\n]);\nexports.module.service('gmfObjectEditingManager', exports);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/src/objectediting/Manager.js","/**\n * @module ngeo.format.AttributeType\n */\n/**\n * @enum {string}\n * @export\n */\nconst exports = {\n  /**\n   * @type {string}\n   */\n  BOOLEAN: 'boolean',\n  /**\n   * @type {string}\n   */\n  DATE: 'date',\n  /**\n   * @type {string}\n   */\n  DATETIME: 'datetime',\n  /**\n   * @type {string}\n   */\n  TIME: 'time',\n  /**\n   * @type {string}\n   */\n  GEOMETRY: 'geometry',\n  /**\n   * @type {string}\n   */\n  NUMBER: 'number',\n  /**\n   * @type {string}\n   */\n  SELECT: 'select',\n  /**\n   * @type {string}\n   */\n  TEXT: 'text'\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/format/AttributeType.js","/**\n * @module ol/format/GMLBase\n */\n// FIXME Envelopes should not be treated as geometries! readEnvelope_ is part\n// of GEOMETRY_PARSERS_ and methods using GEOMETRY_PARSERS_ do not expect\n// envelopes/extents, only geometries!\nimport {inherits} from '../index.js';\nimport {extend} from '../array.js';\nimport Feature from '../Feature.js';\nimport {transformWithOptions} from '../format/Feature.js';\nimport XMLFeature from '../format/XMLFeature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport LinearRing from '../geom/LinearRing.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection} from '../proj.js';\nimport _ol_xml_ from '../xml.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Feature base format for reading and writing data in the GML format.\n * This class cannot be instantiated, it contains only base content that\n * is shared with versioned format classes ol.format.GML2 and\n * ol.format.GML3.\n *\n * @constructor\n * @abstract\n * @param {olx.format.GMLOptions=} opt_options\n *     Optional configuration object.\n * @extends {ol.format.XMLFeature}\n */\nconst GMLBase = function(opt_options) {\n  const options = /** @type {olx.format.GMLOptions} */\n      (opt_options ? opt_options : {});\n\n  /**\n   * @protected\n   * @type {Array.<string>|string|undefined}\n   */\n  this.featureType = options.featureType;\n\n  /**\n   * @protected\n   * @type {Object.<string, string>|string|undefined}\n   */\n  this.featureNS = options.featureNS;\n\n  /**\n   * @protected\n   * @type {string}\n   */\n  this.srsName = options.srsName;\n\n  /**\n   * @protected\n   * @type {string}\n   */\n  this.schemaLocation = '';\n\n  /**\n   * @type {Object.<string, Object.<string, Object>>}\n   */\n  this.FEATURE_COLLECTION_PARSERS = {};\n  this.FEATURE_COLLECTION_PARSERS[GMLBase.GMLNS] = {\n    'featureMember': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readFeaturesInternal),\n    'featureMembers': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readFeaturesInternal)\n  };\n\n  XMLFeature.call(this);\n};\n\ninherits(GMLBase, XMLFeature);\n\n\n/**\n * @const\n * @type {string}\n */\nGMLBase.GMLNS = 'http://www.opengis.net/gml';\n\n\n/**\n * A regular expression that matches if a string only contains whitespace\n * characters. It will e.g. match `''`, `' '`, `'\\n'` etc. The non-breaking\n * space (0xa0) is explicitly included as IE doesn't include it in its\n * definition of `\\s`.\n *\n * Information from `goog.string.isEmptyOrWhitespace`: https://github.com/google/closure-library/blob/e877b1e/closure/goog/string/string.js#L156-L160\n *\n * @const\n * @type {RegExp}\n * @private\n */\nGMLBase.ONLY_WHITESPACE_RE_ = /^[\\s\\xa0]*$/;\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Array.<ol.Feature> | undefined} Features.\n */\nGMLBase.prototype.readFeaturesInternal = function(node, objectStack) {\n  const localName = node.localName;\n  let features = null;\n  if (localName == 'FeatureCollection') {\n    if (node.namespaceURI === 'http://www.opengis.net/wfs') {\n      features = _ol_xml_.pushParseAndPop([],\n        this.FEATURE_COLLECTION_PARSERS, node,\n        objectStack, this);\n    } else {\n      features = _ol_xml_.pushParseAndPop(null,\n        this.FEATURE_COLLECTION_PARSERS, node,\n        objectStack, this);\n    }\n  } else if (localName == 'featureMembers' || localName == 'featureMember') {\n    const context = objectStack[0];\n    let featureType = context['featureType'];\n    let featureNS = context['featureNS'];\n    let i, ii;\n    const prefix = 'p';\n    const defaultPrefix = 'p0';\n    if (!featureType && node.childNodes) {\n      featureType = [], featureNS = {};\n      for (i = 0, ii = node.childNodes.length; i < ii; ++i) {\n        const child = node.childNodes[i];\n        if (child.nodeType === 1) {\n          const ft = child.nodeName.split(':').pop();\n          if (featureType.indexOf(ft) === -1) {\n            let key = '';\n            let count = 0;\n            const uri = child.namespaceURI;\n            for (const candidate in featureNS) {\n              if (featureNS[candidate] === uri) {\n                key = candidate;\n                break;\n              }\n              ++count;\n            }\n            if (!key) {\n              key = prefix + count;\n              featureNS[key] = uri;\n            }\n            featureType.push(key + ':' + ft);\n          }\n        }\n      }\n      if (localName != 'featureMember') {\n        // recheck featureType for each featureMember\n        context['featureType'] = featureType;\n        context['featureNS'] = featureNS;\n      }\n    }\n    if (typeof featureNS === 'string') {\n      const ns = featureNS;\n      featureNS = {};\n      featureNS[defaultPrefix] = ns;\n    }\n    const parsersNS = {};\n    const featureTypes = Array.isArray(featureType) ? featureType : [featureType];\n    for (const p in featureNS) {\n      const parsers = {};\n      for (i = 0, ii = featureTypes.length; i < ii; ++i) {\n        const featurePrefix = featureTypes[i].indexOf(':') === -1 ?\n          defaultPrefix : featureTypes[i].split(':')[0];\n        if (featurePrefix === p) {\n          parsers[featureTypes[i].split(':').pop()] =\n              (localName == 'featureMembers') ?\n                _ol_xml_.makeArrayPusher(this.readFeatureElement, this) :\n                _ol_xml_.makeReplacer(this.readFeatureElement, this);\n        }\n      }\n      parsersNS[featureNS[p]] = parsers;\n    }\n    if (localName == 'featureMember') {\n      features = _ol_xml_.pushParseAndPop(undefined, parsersNS, node, objectStack);\n    } else {\n      features = _ol_xml_.pushParseAndPop([], parsersNS, node, objectStack);\n    }\n  }\n  if (features === null) {\n    features = [];\n  }\n  return features;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.geom.Geometry|undefined} Geometry.\n */\nGMLBase.prototype.readGeometryElement = function(node, objectStack) {\n  const context = /** @type {Object} */ (objectStack[0]);\n  context['srsName'] = node.firstElementChild.getAttribute('srsName');\n  context['srsDimension'] = node.firstElementChild.getAttribute('srsDimension');\n  /** @type {ol.geom.Geometry} */\n  const geometry = _ol_xml_.pushParseAndPop(null,\n    this.GEOMETRY_PARSERS_, node, objectStack, this);\n  if (geometry) {\n    return (\n      /** @type {ol.geom.Geometry} */ transformWithOptions(geometry, false, context)\n    );\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.Feature} Feature.\n */\nGMLBase.prototype.readFeatureElement = function(node, objectStack) {\n  let n;\n  const fid = node.getAttribute('fid') ||\n      _ol_xml_.getAttributeNS(node, GMLBase.GMLNS, 'id');\n  const values = {};\n  let geometryName;\n  for (n = node.firstElementChild; n; n = n.nextElementSibling) {\n    const localName = n.localName;\n    // Assume attribute elements have one child node and that the child\n    // is a text or CDATA node (to be treated as text).\n    // Otherwise assume it is a geometry node.\n    if (n.childNodes.length === 0 ||\n        (n.childNodes.length === 1 &&\n        (n.firstChild.nodeType === 3 || n.firstChild.nodeType === 4))) {\n      let value = _ol_xml_.getAllTextContent(n, false);\n      if (GMLBase.ONLY_WHITESPACE_RE_.test(value)) {\n        value = undefined;\n      }\n      values[localName] = value;\n    } else {\n      // boundedBy is an extent and must not be considered as a geometry\n      if (localName !== 'boundedBy') {\n        geometryName = localName;\n      }\n      values[localName] = this.readGeometryElement(n, objectStack);\n    }\n  }\n  const feature = new Feature(values);\n  if (geometryName) {\n    feature.setGeometryName(geometryName);\n  }\n  if (fid) {\n    feature.setId(fid);\n  }\n  return feature;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.geom.Point|undefined} Point.\n */\nGMLBase.prototype.readPoint = function(node, objectStack) {\n  const flatCoordinates =\n      this.readFlatCoordinatesFromNode_(node, objectStack);\n  if (flatCoordinates) {\n    const point = new Point(null);\n    point.setFlatCoordinates(GeometryLayout.XYZ, flatCoordinates);\n    return point;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.geom.MultiPoint|undefined} MultiPoint.\n */\nGMLBase.prototype.readMultiPoint = function(node, objectStack) {\n  /** @type {Array.<Array.<number>>} */\n  const coordinates = _ol_xml_.pushParseAndPop([],\n    this.MULTIPOINT_PARSERS_, node, objectStack, this);\n  if (coordinates) {\n    return new MultiPoint(coordinates);\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.geom.MultiLineString|undefined} MultiLineString.\n */\nGMLBase.prototype.readMultiLineString = function(node, objectStack) {\n  /** @type {Array.<ol.geom.LineString>} */\n  const lineStrings = _ol_xml_.pushParseAndPop([],\n    this.MULTILINESTRING_PARSERS_, node, objectStack, this);\n  if (lineStrings) {\n    const multiLineString = new MultiLineString(null);\n    multiLineString.setLineStrings(lineStrings);\n    return multiLineString;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.geom.MultiPolygon|undefined} MultiPolygon.\n */\nGMLBase.prototype.readMultiPolygon = function(node, objectStack) {\n  /** @type {Array.<ol.geom.Polygon>} */\n  const polygons = _ol_xml_.pushParseAndPop([],\n    this.MULTIPOLYGON_PARSERS_, node, objectStack, this);\n  if (polygons) {\n    const multiPolygon = new MultiPolygon(null);\n    multiPolygon.setPolygons(polygons);\n    return multiPolygon;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGMLBase.prototype.pointMemberParser_ = function(node, objectStack) {\n  _ol_xml_.parseNode(this.POINTMEMBER_PARSERS_,\n    node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGMLBase.prototype.lineStringMemberParser_ = function(node, objectStack) {\n  _ol_xml_.parseNode(this.LINESTRINGMEMBER_PARSERS_,\n    node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGMLBase.prototype.polygonMemberParser_ = function(node, objectStack) {\n  _ol_xml_.parseNode(this.POLYGONMEMBER_PARSERS_, node,\n    objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.geom.LineString|undefined} LineString.\n */\nGMLBase.prototype.readLineString = function(node, objectStack) {\n  const flatCoordinates =\n      this.readFlatCoordinatesFromNode_(node, objectStack);\n  if (flatCoordinates) {\n    const lineString = new LineString(null);\n    lineString.setFlatCoordinates(GeometryLayout.XYZ, flatCoordinates);\n    return lineString;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<number>|undefined} LinearRing flat coordinates.\n */\nGMLBase.prototype.readFlatLinearRing_ = function(node, objectStack) {\n  const ring = _ol_xml_.pushParseAndPop(null,\n    this.GEOMETRY_FLAT_COORDINATES_PARSERS_, node,\n    objectStack, this);\n  if (ring) {\n    return ring;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.geom.LinearRing|undefined} LinearRing.\n */\nGMLBase.prototype.readLinearRing = function(node, objectStack) {\n  const flatCoordinates =\n      this.readFlatCoordinatesFromNode_(node, objectStack);\n  if (flatCoordinates) {\n    const ring = new LinearRing(null);\n    ring.setFlatCoordinates(GeometryLayout.XYZ, flatCoordinates);\n    return ring;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.geom.Polygon|undefined} Polygon.\n */\nGMLBase.prototype.readPolygon = function(node, objectStack) {\n  /** @type {Array.<Array.<number>>} */\n  const flatLinearRings = _ol_xml_.pushParseAndPop([null],\n    this.FLAT_LINEAR_RINGS_PARSERS_, node, objectStack, this);\n  if (flatLinearRings && flatLinearRings[0]) {\n    const polygon = new Polygon(null);\n    const flatCoordinates = flatLinearRings[0];\n    const ends = [flatCoordinates.length];\n    let i, ii;\n    for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n      extend(flatCoordinates, flatLinearRings[i]);\n      ends.push(flatCoordinates.length);\n    }\n    polygon.setFlatCoordinates(\n      GeometryLayout.XYZ, flatCoordinates, ends);\n    return polygon;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<number>} Flat coordinates.\n */\nGMLBase.prototype.readFlatCoordinatesFromNode_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop(null,\n    this.GEOMETRY_FLAT_COORDINATES_PARSERS_, node,\n    objectStack, this);\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGMLBase.prototype.MULTIPOINT_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'pointMember': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.pointMemberParser_),\n    'pointMembers': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.pointMemberParser_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGMLBase.prototype.MULTILINESTRING_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.lineStringMemberParser_),\n    'lineStringMembers': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.lineStringMemberParser_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGMLBase.prototype.MULTIPOLYGON_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'polygonMember': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.polygonMemberParser_),\n    'polygonMembers': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.polygonMemberParser_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGMLBase.prototype.POINTMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'Point': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.readFlatCoordinatesFromNode_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGMLBase.prototype.LINESTRINGMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'LineString': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.readLineString)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGMLBase.prototype.POLYGONMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'Polygon': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.readPolygon)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @protected\n */\nGMLBase.prototype.RING_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LinearRing': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readFlatLinearRing_)\n  }\n};\n\n\n/**\n * @inheritDoc\n */\nGMLBase.prototype.readGeometryFromNode = function(node, opt_options) {\n  const geometry = this.readGeometryElement(node,\n    [this.getReadOptions(node, opt_options ? opt_options : {})]);\n  return geometry ? geometry : null;\n};\n\n\n/**\n * Read all features from a GML FeatureCollection.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {olx.format.ReadOptions=} opt_options Options.\n * @return {Array.<ol.Feature>} Features.\n * @api\n */\nGMLBase.prototype.readFeatures;\n\n\n/**\n * @inheritDoc\n */\nGMLBase.prototype.readFeaturesFromNode = function(node, opt_options) {\n  const options = {\n    featureType: this.featureType,\n    featureNS: this.featureNS\n  };\n  if (opt_options) {\n    assign(options, this.getReadOptions(node, opt_options));\n  }\n  const features = this.readFeaturesInternal(node, [options]);\n  return features || [];\n};\n\n\n/**\n * @inheritDoc\n */\nGMLBase.prototype.readProjectionFromNode = function(node) {\n  return getProjection(this.srsName ? this.srsName :\n    node.firstElementChild.getAttribute('srsName'));\n};\nexport default GMLBase;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/GMLBase.js\n// module id = 45\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22","/**\n * @module ngeo.map.LayerHelper\n */\nimport googAsserts from 'goog/asserts.js';\nimport ngeoBase from 'ngeo/index.js';\nimport * as olArray from 'ol/array.js';\nimport olFormatWMTSCapabilities from 'ol/format/WMTSCapabilities.js';\nimport olLayerGroup from 'ol/layer/Group.js';\nimport olLayerImage from 'ol/layer/Image.js';\nimport olLayerTile from 'ol/layer/Tile.js';\nimport * as olObj from 'ol/obj.js';\nimport olSourceImageWMS from 'ol/source/ImageWMS.js';\nimport olSourceTileWMS from 'ol/source/TileWMS.js';\nimport olSourceWMTS from 'ol/source/WMTS.js';\nimport * as olUri from 'ol/uri.js';\n\n/**\n * Provides help functions that helps you to create and manage layers.\n * @param {angular.$q} $q Angular promises/deferred service.\n * @param {angular.$http} $http Angular http service.\n * @constructor\n * @struct\n * @ngdoc service\n * @ngname ngeoLayerHelper\n * @ngInject\n */\nconst exports = function($q, $http) {\n\n  /**\n   * @type {angular.$q}\n   * @private\n   */\n  this.$q_ = $q;\n\n  /**\n   * @type {angular.$http}\n   * @private\n   */\n  this.$http_ = $http;\n};\n\n\n/**\n * @const\n */\nexports.GROUP_KEY = 'groupName';\n\n\n/**\n * @const\n */\nexports.REFRESH_PARAM = 'random';\n\n\n/**\n * Create and return a basic WMS layer with only a source URL and a comma\n * separated layers names (see {@link ol.source.ImageWMS}).\n *\n * @param {string} sourceURL The source URL.\n * @param {string} sourceLayersName A comma separated names string.\n * @param {string} sourceFormat Image format, for example 'image/png'.\n * @param {string=} opt_serverType Type of the server (\"mapserver\",\n *     \"geoserver\", \"qgisserver\", …).\n * @param {string=} opt_time time parameter for layer queryable by time/periode\n * @param {Object.<string, string>=} opt_params WMS parameters.\n * @param {string=} opt_crossOrigin crossOrigin.\n * @return {ol.layer.Image} WMS Layer.\n * @export\n */\nexports.prototype.createBasicWMSLayer = function(sourceURL,\n  sourceLayersName, sourceFormat, opt_serverType, opt_time, opt_params, opt_crossOrigin) {\n\n  const params = {\n    'FORMAT': sourceFormat,\n    'LAYERS': sourceLayersName\n  };\n  let olServerType;\n  if (opt_time) {\n    params['TIME'] = opt_time;\n  }\n  if (opt_serverType) {\n    params['SERVERTYPE'] = opt_serverType;\n    // OpenLayers expects 'qgis' insteads of 'qgisserver'\n    olServerType = opt_serverType.replace('qgisserver', 'qgis');\n  }\n  const source = new olSourceImageWMS({\n    url: sourceURL,\n    params: params,\n    serverType: olServerType,\n    crossOrigin: opt_crossOrigin\n  });\n  if (opt_params) {\n    source.updateParams(opt_params);\n  }\n\n  return new olLayerImage({source});\n};\n\n\n/**\n * Create and return a basic WMS layer using an OGC data source.\n *\n * @param {ngeo.datasource.OGC} dataSource OGC data source.\n * @param {string=} opt_crossOrigin crossOrigin.\n * @return {ol.layer.Image} WMS Layer.\n * @export\n */\nexports.prototype.createBasicWMSLayerFromDataSource = function(\n  dataSource, opt_crossOrigin\n) {\n  const url = dataSource.wmsUrl;\n  googAsserts.assert(url);\n\n  const layerNames = dataSource.getOGCLayerNames().join(',');\n  const serverType = dataSource.ogcServerType;\n  const imageType = dataSource.ogcImageType;\n\n  // (1) Layer creation\n  const layer = this.createBasicWMSLayer(\n    url,\n    layerNames,\n    imageType,\n    serverType,\n    undefined,\n    undefined,\n    opt_crossOrigin\n  );\n\n  // (2) Manage visibility\n  layer.setVisible(dataSource.visible);\n\n  // (3) Reference to the data source\n  layer.set('querySourceIds', [dataSource.id]);\n\n  return layer;\n};\n\n\n/**\n * Create and return a promise that provides a WMTS layer with source on\n * success, no layer else.\n * The WMTS layer source will be configured by the capabilities that are\n * loaded from the given capabilitiesUrl.\n * The style object described in the capabilities for this layer will be added\n * as key 'capabilitiesStyles' as param of the new layer.\n * @param {string} capabilitiesURL The getCapabilities url.\n * @param {string} layerName The name of the layer.\n * @param {Object.<string, string>=} opt_dimensions WMTS dimensions.\n * @return {angular.$q.Promise.<ol.layer.Tile>} A Promise with a layer (with source) on success,\n *     no layer else.\n * @export\n */\nexports.prototype.createWMTSLayerFromCapabilitites = function(capabilitiesURL, layerName, opt_dimensions) {\n  const parser = new olFormatWMTSCapabilities();\n  const layer = new olLayerTile({\n    preload: Infinity\n  });\n  const $q = this.$q_;\n\n  return this.$http_.get(capabilitiesURL, {cache: true}).then((response) => {\n    let result;\n    if (response.data) {\n      result = parser.read(response.data);\n    }\n    if (result) {\n      const options = olSourceWMTS.optionsFromCapabilities(result, {\n        crossOrigin: 'anonymous',\n        layer: layerName\n      });\n      googAsserts.assert(options);\n      const source = new olSourceWMTS(/** @type {olx.source.WMTSOptions} */ (options));\n      if (opt_dimensions && !olObj.isEmpty(opt_dimensions)) {\n        source.updateDimensions(opt_dimensions);\n      }\n      layer.setSource(source);\n\n      // Add styles from capabilities as param of the layer\n      const layers = result['Contents']['Layer'];\n      const l = olArray.find(layers, (elt, index, array) => elt['Identifier'] == layerName);\n      layer.set('capabilitiesStyles', l['Style']);\n\n      return $q.resolve(layer);\n    }\n    return $q.reject(`Failed to get WMTS capabilities from ${capabilitiesURL}`);\n  });\n};\n\n\n/**\n * Create and return a WMTS layer using a formatted capabilities response\n * and a capability layer.\n *\n * @param {!Object} capabilities The complete capabilities object of the service\n * @param {!Object} layerCap The layer capability object\n * @param {Object.<string, string>=} opt_dimensions WMTS dimensions.\n * @return {!ol.layer.Tile} WMTS layer\n * @export\n */\nexports.prototype.createWMTSLayerFromCapabilititesObj = function(\n  capabilities, layerCap, opt_dimensions\n) {\n\n  const options = olSourceWMTS.optionsFromCapabilities(capabilities, {\n    crossOrigin: 'anonymous',\n    layer: layerCap['Identifier']\n  });\n\n  googAsserts.assert(options);\n  const source = new olSourceWMTS(\n    /** @type {olx.source.WMTSOptions} */ (options));\n\n  if (opt_dimensions && !olObj.isEmpty(opt_dimensions)) {\n    source.updateDimensions(opt_dimensions);\n  }\n\n  return new olLayerTile({\n    'capabilitiesStyles': layerCap['Style'],\n    preload: Infinity,\n    source: source\n  });\n};\n\n\n/**\n * Create and return an ol.layer.Group. You can pass a collection of layers to\n * directly add them in the returned group.\n * @param {ol.Collection.<ol.layer.Base>=} opt_layers The layer to add to the\n * returned Group.\n * @return {ol.layer.Group} Layer group.\n * @export\n */\nexports.prototype.createBasicGroup = function(opt_layers) {\n  const group = new olLayerGroup();\n  if (opt_layers) {\n    group.setLayers(opt_layers);\n  }\n  return group;\n};\n\n\n/**\n * Retrieve (or create if it doesn't exist) and return a group of layer from\n * the base array of layers of a map. The given name is used as unique\n * identifier. If the group is created, it will be automatically added to\n * the map.\n * @param {ol.Map} map A map.\n * @param {string} groupName The name of the group.\n * @return {ol.layer.Group} The group corresponding to the given name.\n * @export\n */\nexports.prototype.getGroupFromMap = function(map, groupName) {\n  const groups = map.getLayerGroup().getLayers();\n  let group;\n  groups.getArray().some((existingGroup) => {\n    if (existingGroup.get(exports.GROUP_KEY) === groupName) {\n      group = /** @type {ol.layer.Group} */ (existingGroup);\n      return true;\n    } else {\n      return false;\n    }\n  });\n  if (!group) {\n    group = this.createBasicGroup();\n    group.set(exports.GROUP_KEY, groupName);\n    map.addLayer(group);\n  }\n  return group;\n};\n\n\n/**\n * Get an array of all layers in a group. The group can contain multiple levels\n * of others groups.\n * @param {ol.layer.Base} layer The base layer, mostly a group of layers.\n * @return {Array.<ol.layer.Layer>} Layers.\n * @export\n */\nexports.prototype.getFlatLayers = function(layer) {\n  return this.getFlatLayers_(layer, []);\n};\n\n\n/**\n * Get an array of all layers in a group. The group can contain multiple levels\n * of others groups.\n * @param {ol.layer.Base} layer The base layer, mostly a group of layers.\n * @param {Array.<ol.layer.Base>} array An array to add layers.\n * @return {Array.<ol.layer.Layer>} Layers.\n * @private\n */\nexports.prototype.getFlatLayers_ = function(layer, array) {\n  if (layer instanceof olLayerGroup) {\n    const sublayers = layer.getLayers();\n    sublayers.forEach(function(l) {\n      this.getFlatLayers_(l, array);\n    }, this);\n  } else {\n    if (array.indexOf(layer) < 0) {\n      array.push(layer);\n    }\n  }\n  return array;\n};\n\n\n/**\n * Get a layer that has a `layerName` property equal to a given layer name from\n * an array of layers. If one of the layers in the array is a group, then the\n * layers contained in that group are searched as well.\n * @param {string} layerName The name of the layer we're looking for.\n * @param {Array.<ol.layer.Base>} layers Layers.\n * @return {?ol.layer.Base} Layer.\n * @export\n */\nexports.prototype.getLayerByName = function(layerName, layers) {\n  let found = null;\n  layers.some(function(layer) {\n    if (layer instanceof olLayerGroup) {\n      const sublayers = layer.getLayers().getArray();\n      found = this.getLayerByName(layerName, sublayers);\n    } else if (layer.get('layerNodeName') === layerName) {\n      found = layer;\n    }\n    return !!found;\n  }, this);\n\n  return found;\n};\n\n\n/**\n * Get the WMTS legend URL for the given layer.\n * @param {ol.layer.Tile} layer Tile layer as returned by the\n * ngeo layerHelper service.\n * @return {string|undefined} The legend URL or undefined.\n * @export\n */\nexports.prototype.getWMTSLegendURL = function(layer) {\n  // FIXME case of multiple styles ?  case of multiple legendUrl ?\n  let url;\n  const styles = layer.get('capabilitiesStyles');\n  if (styles !== undefined) {\n    const legendURL = styles[0]['legendURL'];\n    if (legendURL !== undefined) {\n      url = legendURL[0]['href'];\n    }\n  }\n  return url;\n};\n\n\n/**\n * Get the WMS legend URL for the given node.\n * @param {string|undefined} url The base url of the wms service.\n * @param {string} layerName The name of a wms layer.\n * @param {number=} opt_scale A scale.\n * @param {string=} opt_legendRule rule parameters to add to the returned URL.\n * @return {string|undefined} The legend URL or undefined.\n * @export\n */\nexports.prototype.getWMSLegendURL = function(url,\n  layerName, opt_scale, opt_legendRule) {\n  if (!url) {\n    return undefined;\n  }\n  const queryString = {\n    'FORMAT': 'image/png',\n    'TRANSPARENT': true,\n    'SERVICE': 'WMS',\n    'VERSION': '1.1.1',\n    'REQUEST': 'GetLegendGraphic',\n    'LAYER': layerName\n  };\n  if (opt_scale !== undefined) {\n    queryString['SCALE'] = opt_scale;\n  }\n  if (opt_legendRule !== undefined) {\n    queryString['RULE'] = opt_legendRule;\n  }\n  return olUri.appendParams(url, queryString);\n};\n\n\n/**\n * Returns if this layer is visible at the current resolution.\n * @param {ol.layer.Base} layer Layer.\n * @param {ol.Map} map Map.\n * @return {boolean} Is the layer currently visible?\n */\nexports.prototype.isLayerVisible = function(layer, map) {\n  if (!layer.getVisible()) {\n    return false;\n  }\n\n  const currentResolution = map.getView().getResolution();\n  return currentResolution > layer.getMinResolution() &&\n      currentResolution < layer.getMaxResolution();\n};\n\n\n/**\n * Force a WMS layer to refresh using a random value.\n * @param {ol.layer.Image|ol.layer.Tile} layer Layer to refresh.\n */\nexports.prototype.refreshWMSLayer = function(layer) {\n  const source_ = layer.getSource();\n  googAsserts.assert(\n    source_ instanceof olSourceImageWMS ||\n    source_ instanceof olSourceTileWMS\n  );\n  const source = /** @type {ol.source.ImageWMS|ol.source.TileWMS} */ (source_);\n  const params = source.getParams();\n  params[exports.REFRESH_PARAM] = Math.random();\n  source.updateParams(params);\n};\n\n\n/**\n * Update the LAYERS parameter of the source of the given WMS layer.\n * @param {ol.layer.Image} layer The WMS layer.\n * @param {string} names The names that will be used to set\n * the LAYERS parameter.\n * @param {string=} opt_time The start\n * and optionally the end datetime (for time range selection) selected by user\n * in a ISO-8601 string datetime or time interval format\n * @export\n */\nexports.prototype.updateWMSLayerState = function(layer, names, opt_time) {\n  // Don't send layer without parameters, hide layer instead;\n  if (names.length <= 0) {\n    layer.setVisible(false);\n  } else {\n    layer.setVisible(true);\n    const source = /** @type {ol.source.ImageWMS} */ (layer.getSource());\n    if (opt_time) {\n      source.updateParams({'LAYERS': names, 'TIME': opt_time});\n    } else {\n      source.updateParams({'LAYERS': names});\n    }\n  }\n};\n\n\n/**\n * @param {ol.layer.Image} layer The WMS layer.\n * @return {Array.<number>|undefined} List of query source ids, a.k.a.\n *     the data source ids this layer is composed of.\n * @export\n */\nexports.prototype.getQuerySourceIds = function(layer) {\n  return /** @type {Array.<number>|undefined} */ (\n    layer.get('querySourceIds'));\n};\n\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('ngeoLayerHelper', []);\nexports.module.service('ngeoLayerHelper', exports);\nngeoBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/map/LayerHelper.js","/**\n * @module gmfapp.objecteditinghub\n */\nconst exports = {};\n\nimport './objecteditinghub.css';\nimport './common_dependencies.js';\nimport googAsserts from 'goog/asserts.js';\n\nimport gmfBase from 'gmf/index.js';\nimport gmfEditingXSDAttributes from 'gmf/editing/XSDAttributes.js';\nimport gmfObjecteditingManager from 'gmf/objectediting/Manager.js';\nimport gmfThemeThemes from 'gmf/theme/Themes.js';\nimport olFormatWFS from 'ol/format/WFS.js';\nimport ngeoFormatXSDAttribute from 'ngeo/format/XSDAttribute.js';\n\n\n/** @type {!angular.Module} **/\nexports.module = angular.module('gmfapp', [\n  gmfBase.module.name,\n  gmfEditingXSDAttributes.module.name,\n  gmfObjecteditingManager.module.name,\n  gmfThemeThemes.module.name,\n]);\n\n\nexports.module.value('gmfTreeUrl',\n  'https://geomapfish-demo.camptocamp.net/2.2/wsgi/themes?version=2&background=background');\n\n\nexports.module.value('gmfLayersUrl',\n  'https://geomapfish-demo.camptocamp.net/2.2/wsgi/layers/');\n\nexports.constant('defaultTheme', 'Demo');\nexports.constant('angularLocaleScript', '../build/angular-locale_{{locale}}.js');\n\n\n/**\n * @param {angular.$http} $http Angular $http service.\n * @param {angular.$q} $q Angular $q service.\n * @param {!angular.Scope} $scope Angular scope.\n * @param {gmf.theme.Themes} gmfThemes The gmf themes service.\n * @param {gmf.editing.XSDAttributes} gmfXSDAttributes The gmf XSDAttributes service.\n * @constructor\n * @ngInject\n */\nexports.MainController = function($http, $q, $scope, gmfThemes, gmfXSDAttributes) {\n\n  /**\n   * @type {angular.$http}\n   * @private\n   */\n  this.http_ = $http;\n\n  /**\n   * @type {angular.$q}\n   * @private\n   */\n  this.q_ = $q;\n\n  /**\n   * @type {gmf.theme.Themes}\n   * @private\n   */\n  this.gmfThemes_ = gmfThemes;\n\n  /**\n   * @type {gmf.editing.XSDAttributes}\n   * @private\n   */\n  this.gmfXSDAttributes_ = gmfXSDAttributes;\n\n  /**\n   * @type {Array.<string>} List of example and application urls that contain\n   *     ObjectEditing tools.\n   * @export\n   */\n  this.urls = [\n    {\n      'name': 'oeedit app. (hosted)',\n      'url': 'apps/oeedit/'\n    },\n    {\n      'name': 'oeedit app. (dev)',\n      'url': '../apps/oeedit/'\n    },\n    {\n      'name': 'example',\n      'url': 'objectediting.html'\n    }\n  ];\n\n  /**\n   * @type {string} OE viewer application base url when developping.\n   * @private\n   */\n  this.viewerUrlDev_ = '../apps/oeview/';\n\n  /**\n   * @type {string} OE viewer application base url when hosted.\n   * @private\n   */\n  this.viewerUrlHosted_ = 'apps/oeview/';\n\n  /**\n   * @type {Object.<string, string>}\n   * @export\n   */\n  this.selectedUrl = this.urls[0];\n\n  /**\n   * @type {gmfThemes.GmfOgcServers} ogcServers OGC servers.\n   * @private\n   */\n  this.gmfServers_;\n\n  /**\n   * @type {gmfThemes.GmfOgcServer} ogcServer OGC server to use.\n   * @private\n   */\n  this.gmfServer_;\n\n  /**\n   * @type {Array.<gmfThemes.GmfLayerWMS>}\n   * @export\n   */\n  this.gmfLayerNodes = [];\n\n  /**\n   * @type {?gmfThemes.GmfLayerWMS}\n   * @export\n   */\n  this.selectedGmfLayerNode = null;\n\n  /**\n   * @type {Object.<number, Array.<ol.Feature>>}\n   * @export\n   */\n  this.featuresCache_ = {};\n\n  /**\n   * @type {Array.<ol.Feature>}\n   * @export\n   */\n  this.features = null;\n\n  /**\n   * @type {?ol.Feature}\n   * @export\n   */\n  this.selectedFeature = null;\n\n  /**\n   * @type {Object.<number, string>}\n   * @private\n   */\n  this.geomTypeCache_ = {};\n\n  /**\n   * @type {string|undefined}\n   * @export\n   */\n  this.selectedGeomType = undefined;\n\n  $scope.$watch(\n    () => this.selectedGmfLayerNode,\n    (newVal, oldVal) => {\n      this.selectedFeature = null;\n\n      if (newVal) {\n        this.getFeatures_(newVal).then(\n          this.handleGetFeatures_.bind(this, newVal)\n        );\n        this.getGeometryType_(newVal).then(\n          this.handleGetGeometryType_.bind(this, newVal)\n        );\n      }\n    }\n  );\n\n  /**\n   * @type {string}\n   * @export\n   */\n  this.themeName = 'ObjectEditing';\n\n  this.gmfThemes_.loadThemes();\n\n  this.gmfThemes_.getOgcServersObject().then((ogcServers) => {\n\n    // (1) Set OGC servers\n    this.gmfServers_ = ogcServers;\n\n    this.gmfThemes_.getThemesObject().then((themes) => {\n      if (!themes) {\n        return;\n      }\n\n      let i, ii;\n\n      // (2) Find OE theme\n      let theme;\n      for (i = 0, ii = themes.length; i < ii; i++) {\n        if (themes[i].name === this.themeName) {\n          theme = themes[i];\n          break;\n        }\n      }\n\n      if (!theme) {\n        return;\n      }\n\n      // (3) Get first group node\n      const groupNode = theme.children[0];\n\n      // (4) Set OGC server, which must support WFS for this example to work\n      googAsserts.assert(groupNode.ogcServer);\n      const gmfServer = this.gmfServers_[groupNode.ogcServer];\n      if (gmfServer && gmfServer.wfsSupport === true && gmfServer.urlWfs) {\n        this.gmfServer_ = gmfServer;\n      } else {\n        return;\n      }\n\n      const gmfLayerNodes = [];\n      for (i = 0, ii = groupNode.children.length; i < ii; i++) {\n        if (groupNode.children[i].metadata.identifierAttributeField) {\n          gmfLayerNodes.push(groupNode.children[i]);\n        }\n      }\n\n      // (5) Set layer nodes\n      this.gmfLayerNodes = gmfLayerNodes;\n\n      // (6) Select 'polygon' for the purpose of simplifying the demo\n      this.selectedGmfLayerNode = this.gmfLayerNodes[1];\n\n    });\n  });\n\n};\n\n\n/**\n * @export\n */\nexports.MainController.prototype.runEditor = function() {\n\n  const geomType = this.selectedGeomType;\n  const feature = this.selectedFeature;\n  const layer = this.selectedGmfLayerNode.id;\n  const property = this.selectedGmfLayerNode.metadata.identifierAttributeField;\n  googAsserts.assert(property !== undefined);\n  const id = feature.get(property);\n\n  const params = {};\n  params[gmfObjecteditingManager.Param.GEOM_TYPE] = geomType;\n  params[gmfObjecteditingManager.Param.ID] = id;\n  params[gmfObjecteditingManager.Param.LAYER] = layer;\n  params[gmfObjecteditingManager.Param.THEME] = this.themeName;\n  params[gmfObjecteditingManager.Param.PROPERTY] = property;\n\n  const url = exports.MainController.appendParams(this.selectedUrl['url'], params);\n  window.open(url);\n};\n\n\n/**\n * @export\n */\nexports.MainController.prototype.runViewerDev = function() {\n  this.runViewer_(this.viewerUrlDev_);\n};\n\n\n/**\n * @export\n */\nexports.MainController.prototype.runViewerHosted = function() {\n  this.runViewer_(this.viewerUrlHosted_);\n};\n\n\n/**\n * @param {string} baseUrl Base url of the viewer.\n * @private\n */\nexports.MainController.prototype.runViewer_ = function(baseUrl) {\n\n  const node = this.selectedGmfLayerNode;\n  const nodeId = node.id;\n  const nodeName = node.name;\n  const nodeIdAttrFieldName = node.metadata.identifierAttributeField;\n  googAsserts.assert(nodeIdAttrFieldName !== undefined);\n  const ids = [];\n\n  const features = this.featuresCache_[nodeId];\n  for (let i = 0, ii = features.length; i < ii; i++) {\n    ids.push(\n      features[i].get(nodeIdAttrFieldName)\n    );\n  }\n\n  const params = {};\n  params['wfs_layer'] = nodeName;\n  params[`wfs_${nodeIdAttrFieldName}`] = ids.join(',');\n\n  const url = exports.MainController.appendParams(baseUrl, params);\n  window.open(url);\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @return {angular.$q.Promise} The promise attached to the deferred object.\n * @private\n */\nexports.MainController.prototype.getFeatures_ = function(gmfLayerNode) {\n\n  this.getFeaturesDeferred_ = this.q_.defer();\n\n  const features = this.getFeaturesFromCache_(gmfLayerNode);\n\n  if (features) {\n    this.getFeaturesDeferred_.resolve();\n  } else {\n    this.issueGetFeatures_(gmfLayerNode);\n  }\n\n  return this.getFeaturesDeferred_.promise;\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @private\n */\nexports.MainController.prototype.issueGetFeatures_ = function(gmfLayerNode) {\n\n  const id = gmfLayerNode.id;\n\n  const url = exports.MainController.appendParams(\n    this.gmfServer_.urlWfs,\n    {\n      'SERVICE': 'WFS',\n      'REQUEST': 'GetFeature',\n      'VERSION': '1.1.0',\n      'TYPENAME': gmfLayerNode.layers\n    }\n  );\n\n  this.http_.get(url).then((response) => {\n    const features = new olFormatWFS().readFeatures(response.data);\n    this.featuresCache_[id] = features;\n    this.getFeaturesDeferred_.resolve();\n  });\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @private\n */\nexports.MainController.prototype.handleGetFeatures_ = function(gmfLayerNode) {\n  const features = /** @type Array.<ol.Feature> */ (\n    this.getFeaturesFromCache_(gmfLayerNode));\n  this.features = features;\n  this.selectedFeature = this.features[0];\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @return {?Array.<ol.Feature>} List of features\n * @private\n */\nexports.MainController.prototype.getFeaturesFromCache_ = function(gmfLayerNode) {\n  const id = gmfLayerNode.id;\n  const features = this.featuresCache_[id] || null;\n  return features;\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @return {angular.$q.Promise} The promise attached to the deferred object.\n * @private\n */\nexports.MainController.prototype.getGeometryType_ = function(gmfLayerNode) {\n\n  this.getGeometryTypeDeferred_ = this.q_.defer();\n\n  const geomType = this.getGeometryTypeFromCache_(gmfLayerNode);\n\n  if (geomType) {\n    this.getGeometryTypeDeferred_.resolve();\n  } else {\n    this.issueGetAttributesRequest_(gmfLayerNode);\n  }\n\n  return this.getGeometryTypeDeferred_.promise;\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @private\n */\nexports.MainController.prototype.issueGetAttributesRequest_ = function(\n  gmfLayerNode\n) {\n\n  this.gmfXSDAttributes_.getAttributes(gmfLayerNode.id).then(\n    function(gmfLayerNode, attributes) {\n      // Get geom type from attributes and set\n      const geomAttr = ngeoFormatXSDAttribute.getGeometryAttribute(attributes);\n      if (geomAttr && geomAttr.geomType) {\n        this.geomTypeCache_[gmfLayerNode.id] = geomAttr.geomType;\n        this.getGeometryTypeDeferred_.resolve();\n      }\n    }.bind(this, gmfLayerNode)\n  );\n\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @private\n */\nexports.MainController.prototype.handleGetGeometryType_ = function(gmfLayerNode) {\n  const geomType = this.getGeometryTypeFromCache_(gmfLayerNode);\n  this.selectedGeomType = geomType;\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @return {string|undefined} The type of geometry.\n * @private\n */\nexports.MainController.prototype.getGeometryTypeFromCache_ = function(\n  gmfLayerNode\n) {\n  const id = gmfLayerNode.id;\n  const geomType = this.geomTypeCache_[id];\n  return geomType;\n};\n\n\n/**\n * Appends query parameters to a URI.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {!Object} params An object where keys are URI-encoded parameter keys,\n *     and the values are arbitrary types or arrays.\n * @return {string} The new URI.\n */\nexports.MainController.appendParams = function(uri, params) {\n  const keyParams = [];\n  // Skip any null or undefined parameter values\n  Object.keys(params).forEach((k) => {\n    if (params[k] !== null && params[k] !== undefined) {\n      keyParams.push(`${k}=${encodeURIComponent(params[k])}`);\n    }\n  });\n  const qs = keyParams.join('&');\n  // remove any trailing ? or &\n  uri = uri.replace(/[?&]$/, '');\n  // append ? or & depending on whether uri has existing parameters\n  uri = uri.indexOf('?') === -1 ? `${uri}?` : `${uri}&`;\n  return uri + qs;\n};\n\n\nexports.module.controller('MainController', exports.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/examples/objecteditinghub.js","/**\n * @module ol/format/XML\n */\nimport _ol_xml_ from '../xml.js';\n\n/**\n * @classdesc\n * Generic format for reading non-feature XML data\n *\n * @constructor\n * @abstract\n * @struct\n */\nconst XML = function() {\n};\n\n\n/**\n * @param {Document|Node|string} source Source.\n * @return {Object} The parsed result.\n */\nXML.prototype.read = function(source) {\n  if (_ol_xml_.isDocument(source)) {\n    return this.readFromDocument(/** @type {Document} */ (source));\n  } else if (_ol_xml_.isNode(source)) {\n    return this.readFromNode(/** @type {Node} */ (source));\n  } else if (typeof source === 'string') {\n    const doc = _ol_xml_.parse(source);\n    return this.readFromDocument(doc);\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * @abstract\n * @param {Document} doc Document.\n * @return {Object} Object\n */\nXML.prototype.readFromDocument = function(doc) {};\n\n\n/**\n * @abstract\n * @param {Node} node Node.\n * @return {Object} Object\n */\nXML.prototype.readFromNode = function(node) {};\nexport default XML;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/XML.js\n// module id = 50\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24","/**\n * @module ol/format/GML2\n */\nimport {inherits} from '../index.js';\nimport {createOrUpdate} from '../extent.js';\nimport {transformWithOptions} from '../format/Feature.js';\nimport GMLBase from '../format/GMLBase.js';\nimport XSD from '../format/XSD.js';\nimport Geometry from '../geom/Geometry.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection, transformExtent} from '../proj.js';\nimport _ol_xml_ from '../xml.js';\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format,\n * version 2.1.2.\n *\n * @constructor\n * @param {olx.format.GMLOptions=} opt_options Optional configuration object.\n * @extends {ol.format.GMLBase}\n * @api\n */\nconst GML2 = function(opt_options) {\n  const options = /** @type {olx.format.GMLOptions} */\n      (opt_options ? opt_options : {});\n\n  GMLBase.call(this, options);\n\n  this.FEATURE_COLLECTION_PARSERS[GMLBase.GMLNS][\n    'featureMember'] =\n      _ol_xml_.makeArrayPusher(GMLBase.prototype.readFeaturesInternal);\n\n  /**\n   * @inheritDoc\n   */\n  this.schemaLocation = options.schemaLocation ?\n    options.schemaLocation : GML2.schemaLocation_;\n\n};\n\ninherits(GML2, GMLBase);\n\n\n/**\n * @const\n * @type {string}\n * @private\n */\nGML2.schemaLocation_ = GMLBase.GMLNS +\n    ' http://schemas.opengis.net/gml/2.1.2/feature.xsd';\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<number>|undefined} Flat coordinates.\n */\nGML2.prototype.readFlatCoordinates_ = function(node, objectStack) {\n  const s = _ol_xml_.getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n  const context = /** @type {ol.XmlNodeStackItem} */ (objectStack[0]);\n  const containerSrs = context['srsName'];\n  let axisOrientation = 'enu';\n  if (containerSrs) {\n    const proj = getProjection(containerSrs);\n    if (proj) {\n      axisOrientation = proj.getAxisOrientation();\n    }\n  }\n  const coordsGroups = s.trim().split(/\\s+/);\n  let x, y, z;\n  const flatCoordinates = [];\n  for (let i = 0, ii = coordsGroups.length; i < ii; i++) {\n    const coords = coordsGroups[i].split(/,+/);\n    x = parseFloat(coords[0]);\n    y = parseFloat(coords[1]);\n    z = (coords.length === 3) ? parseFloat(coords[2]) : 0;\n    if (axisOrientation.substr(0, 2) === 'en') {\n      flatCoordinates.push(x, y, z);\n    } else {\n      flatCoordinates.push(y, x, z);\n    }\n  }\n  return flatCoordinates;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {ol.Extent|undefined} Envelope.\n */\nGML2.prototype.readBox_ = function(node, objectStack) {\n  /** @type {Array.<number>} */\n  const flatCoordinates = _ol_xml_.pushParseAndPop([null],\n    this.BOX_PARSERS_, node, objectStack, this);\n  return createOrUpdate(flatCoordinates[1][0],\n    flatCoordinates[1][1], flatCoordinates[1][3],\n    flatCoordinates[1][4]);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGML2.prototype.innerBoundaryIsParser_ = function(node, objectStack) {\n  /** @type {Array.<number>|undefined} */\n  const flatLinearRing = _ol_xml_.pushParseAndPop(undefined,\n    this.RING_PARSERS, node, objectStack, this);\n  if (flatLinearRing) {\n    const flatLinearRings = /** @type {Array.<Array.<number>>} */\n        (objectStack[objectStack.length - 1]);\n    flatLinearRings.push(flatLinearRing);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGML2.prototype.outerBoundaryIsParser_ = function(node, objectStack) {\n  /** @type {Array.<number>|undefined} */\n  const flatLinearRing = _ol_xml_.pushParseAndPop(undefined,\n    this.RING_PARSERS, node, objectStack, this);\n  if (flatLinearRing) {\n    const flatLinearRings = /** @type {Array.<Array.<number>>} */\n        (objectStack[objectStack.length - 1]);\n    flatLinearRings[0] = flatLinearRing;\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML2.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'coordinates': _ol_xml_.makeReplacer(\n      GML2.prototype.readFlatCoordinates_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML2.prototype.FLAT_LINEAR_RINGS_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'innerBoundaryIs': GML2.prototype.innerBoundaryIsParser_,\n    'outerBoundaryIs': GML2.prototype.outerBoundaryIsParser_\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML2.prototype.BOX_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'coordinates': _ol_xml_.makeArrayPusher(\n      GML2.prototype.readFlatCoordinates_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML2.prototype.GEOMETRY_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'Point': _ol_xml_.makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readMultiPoint),\n    'LineString': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readLineString),\n    'MultiLineString': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readMultiLineString),\n    'LinearRing': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readLinearRing),\n    'Polygon': _ol_xml_.makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readMultiPolygon),\n    'Box': _ol_xml_.makeReplacer(GML2.prototype.readBox_)\n  }\n};\n\n\n/**\n * @const\n * @param {*} value Value.\n * @param {Array.<*>} objectStack Object stack.\n * @param {string=} opt_nodeName Node name.\n * @return {Node|undefined} Node.\n * @private\n */\nGML2.prototype.GEOMETRY_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {\n  const context = objectStack[objectStack.length - 1];\n  const multiSurface = context['multiSurface'];\n  const surface = context['surface'];\n  const multiCurve = context['multiCurve'];\n  let nodeName;\n  if (!Array.isArray(value)) {\n    nodeName = /** @type {ol.geom.Geometry} */ (value).getType();\n    if (nodeName === 'MultiPolygon' && multiSurface === true) {\n      nodeName = 'MultiSurface';\n    } else if (nodeName === 'Polygon' && surface === true) {\n      nodeName = 'Surface';\n    } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n      nodeName = 'MultiCurve';\n    }\n  } else {\n    nodeName = 'Envelope';\n  }\n  return _ol_xml_.createElementNS('http://www.opengis.net/gml',\n    nodeName);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.Feature} feature Feature.\n * @param {Array.<*>} objectStack Node stack.\n */\nGML2.prototype.writeFeatureElement = function(node, feature, objectStack) {\n  const fid = feature.getId();\n  if (fid) {\n    node.setAttribute('fid', fid);\n  }\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const featureNS = context['featureNS'];\n  const geometryName = feature.getGeometryName();\n  if (!context.serializers) {\n    context.serializers = {};\n    context.serializers[featureNS] = {};\n  }\n  const properties = feature.getProperties();\n  const keys = [];\n  const values = [];\n  for (const key in properties) {\n    const value = properties[key];\n    if (value !== null) {\n      keys.push(key);\n      values.push(value);\n      if (key == geometryName || value instanceof Geometry) {\n        if (!(key in context.serializers[featureNS])) {\n          context.serializers[featureNS][key] = _ol_xml_.makeChildAppender(\n            this.writeGeometryElement, this);\n        }\n      } else {\n        if (!(key in context.serializers[featureNS])) {\n          context.serializers[featureNS][key] = _ol_xml_.makeChildAppender(\n            XSD.writeStringTextNode);\n        }\n      }\n    }\n  }\n  const item = assign({}, context);\n  item.node = node;\n  _ol_xml_.pushSerializeAndPop(/** @type {ol.XmlNodeStackItem} */\n    (item), context.serializers,\n    _ol_xml_.makeSimpleNodeFactory(undefined, featureNS),\n    values,\n    objectStack, keys);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Geometry|ol.Extent} geometry Geometry.\n * @param {Array.<*>} objectStack Node stack.\n */\nGML2.prototype.writeGeometryElement = function(node, geometry, objectStack) {\n  const context = /** @type {olx.format.WriteOptions} */ (objectStack[objectStack.length - 1]);\n  const item = assign({}, context);\n  item.node = node;\n  let value;\n  if (Array.isArray(geometry)) {\n    if (context.dataProjection) {\n      value = transformExtent(\n        geometry, context.featureProjection, context.dataProjection);\n    } else {\n      value = geometry;\n    }\n  } else {\n    value = transformWithOptions(/** @type {ol.geom.Geometry} */ (geometry), true, context);\n  }\n  _ol_xml_.pushSerializeAndPop(/** @type {ol.XmlNodeStackItem} */\n    (item), GML2.GEOMETRY_SERIALIZERS_,\n    this.GEOMETRY_NODE_FACTORY_, [value],\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LineString} geometry LineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeCurveOrLineString_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  if (node.nodeName !== 'LineStringSegment' && srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (node.nodeName === 'LineString' ||\n      node.nodeName === 'LineStringSegment') {\n    const coordinates = this.createCoordinatesNode_(node.namespaceURI);\n    node.appendChild(coordinates);\n    this.writeCoordinates_(coordinates, geometry, objectStack);\n  } else if (node.nodeName === 'Curve') {\n    const segments = _ol_xml_.createElementNS(node.namespaceURI, 'segments');\n    node.appendChild(segments);\n    this.writeCurveSegments_(segments,\n      geometry, objectStack);\n  }\n};\n\n\n/**\n * @param {string} namespaceURI XML namespace.\n * @returns {Node} coordinates node.\n * @private\n */\nGML2.prototype.createCoordinatesNode_ = function(namespaceURI) {\n  const coordinates = _ol_xml_.createElementNS(namespaceURI, 'coordinates');\n  coordinates.setAttribute('decimal', '.');\n  coordinates.setAttribute('cs', ',');\n  coordinates.setAttribute('ts', ' ');\n\n  return coordinates;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LineString|ol.geom.LinearRing} value Geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeCoordinates_ = function(node, value, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  // only 2d for simple features profile\n  const points = value.getCoordinates();\n  const len = points.length;\n  const parts = new Array(len);\n  let point;\n  for (let i = 0; i < len; ++i) {\n    point = points[i];\n    parts[i] = this.getCoords_(point, srsName, hasZ);\n  }\n  XSD.writeStringTextNode(node, parts.join(' '));\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LineString} line LineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeCurveSegments_ = function(node, line, objectStack) {\n  const child = _ol_xml_.createElementNS(node.namespaceURI,\n    'LineStringSegment');\n  node.appendChild(child);\n  this.writeCurveOrLineString_(child, line, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Polygon} geometry Polygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeSurfaceOrPolygon_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  if (node.nodeName !== 'PolygonPatch' && srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n    const rings = geometry.getLinearRings();\n    _ol_xml_.pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName},\n      GML2.RING_SERIALIZERS_,\n      this.RING_NODE_FACTORY_,\n      rings, objectStack, undefined, this);\n  } else if (node.nodeName === 'Surface') {\n    const patches = _ol_xml_.createElementNS(node.namespaceURI, 'patches');\n    node.appendChild(patches);\n    this.writeSurfacePatches_(\n      patches, geometry, objectStack);\n  }\n};\n\n\n/**\n * @param {*} value Value.\n * @param {Array.<*>} objectStack Object stack.\n * @param {string=} opt_nodeName Node name.\n * @return {Node} Node.\n * @private\n */\nGML2.prototype.RING_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {\n  const context = objectStack[objectStack.length - 1];\n  const parentNode = context.node;\n  const exteriorWritten = context['exteriorWritten'];\n  if (exteriorWritten === undefined) {\n    context['exteriorWritten'] = true;\n  }\n  return _ol_xml_.createElementNS(parentNode.namespaceURI,\n    exteriorWritten !== undefined ? 'innerBoundaryIs' : 'outerBoundaryIs');\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Polygon} polygon Polygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeSurfacePatches_ = function(node, polygon, objectStack) {\n  const child = _ol_xml_.createElementNS(node.namespaceURI, 'PolygonPatch');\n  node.appendChild(child);\n  this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LinearRing} ring LinearRing geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeRing_ = function(node, ring, objectStack) {\n  const linearRing = _ol_xml_.createElementNS(node.namespaceURI, 'LinearRing');\n  node.appendChild(linearRing);\n  this.writeLinearRing_(linearRing, ring, objectStack);\n};\n\n\n/**\n * @param {Array.<number>} point Point geometry.\n * @param {string=} opt_srsName Optional srsName\n * @param {boolean=} opt_hasZ whether the geometry has a Z coordinate (is 3D) or not.\n * @return {string} The coords string.\n * @private\n */\nGML2.prototype.getCoords_ = function(point, opt_srsName, opt_hasZ) {\n  let axisOrientation = 'enu';\n  if (opt_srsName) {\n    axisOrientation = getProjection(opt_srsName).getAxisOrientation();\n  }\n  let coords = ((axisOrientation.substr(0, 2) === 'en') ?\n    point[0] + ',' + point[1] :\n    point[1] + ',' + point[0]);\n  if (opt_hasZ) {\n    // For newly created points, Z can be undefined.\n    const z = point[2] || 0;\n    coords += ',' + z;\n  }\n\n  return coords;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.MultiLineString} geometry MultiLineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeMultiCurveOrLineString_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  const curve = context['curve'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const lines = geometry.getLineStrings();\n  _ol_xml_.pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName, curve: curve},\n    GML2.LINESTRINGORCURVEMEMBER_SERIALIZERS_,\n    this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines,\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Point} geometry Point geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writePoint_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const coordinates = this.createCoordinatesNode_(node.namespaceURI);\n  node.appendChild(coordinates);\n  const point = geometry.getCoordinates();\n  const coord = this.getCoords_(point, srsName, hasZ);\n  XSD.writeStringTextNode(coordinates, coord);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.MultiPoint} geometry MultiPoint geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeMultiPoint_ = function(node, geometry,\n  objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const points = geometry.getPoints();\n  _ol_xml_.pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName},\n    GML2.POINTMEMBER_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory('pointMember'), points,\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Point} point Point geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writePointMember_ = function(node, point, objectStack) {\n  const child = _ol_xml_.createElementNS(node.namespaceURI, 'Point');\n  node.appendChild(child);\n  this.writePoint_(child, point, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LineString} line LineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeLineStringOrCurveMember_ = function(node, line, objectStack) {\n  const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n  if (child) {\n    node.appendChild(child);\n    this.writeCurveOrLineString_(child, line, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LinearRing} geometry LinearRing geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeLinearRing_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const coordinates = this.createCoordinatesNode_(node.namespaceURI);\n  node.appendChild(coordinates);\n  this.writeCoordinates_(coordinates, geometry, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.MultiPolygon} geometry MultiPolygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeMultiSurfaceOrPolygon_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  const surface = context['surface'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const polygons = geometry.getPolygons();\n  _ol_xml_.pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName, surface: surface},\n    GML2.SURFACEORPOLYGONMEMBER_SERIALIZERS_,\n    this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons,\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Polygon} polygon Polygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeSurfaceOrPolygonMember_ = function(node, polygon, objectStack) {\n  const child = this.GEOMETRY_NODE_FACTORY_(\n    polygon, objectStack);\n  if (child) {\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.Extent} extent Extent.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeEnvelope = function(node, extent, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const keys = ['lowerCorner', 'upperCorner'];\n  const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n  _ol_xml_.pushSerializeAndPop(/** @type {ol.XmlNodeStackItem} */\n    ({node: node}), GML2.ENVELOPE_SERIALIZERS_,\n    _ol_xml_.OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack, keys, this);\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML2.GEOMETRY_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'Curve': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeCurveOrLineString_),\n    'MultiCurve': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeMultiCurveOrLineString_),\n    'Point': _ol_xml_.makeChildAppender(GML2.prototype.writePoint_),\n    'MultiPoint': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeMultiPoint_),\n    'LineString': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeCurveOrLineString_),\n    'MultiLineString': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeMultiCurveOrLineString_),\n    'LinearRing': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeLinearRing_),\n    'Polygon': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeSurfaceOrPolygon_),\n    'MultiPolygon': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeMultiSurfaceOrPolygon_),\n    'Surface': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeSurfaceOrPolygon_),\n    'MultiSurface': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeMultiSurfaceOrPolygon_),\n    'Envelope': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeEnvelope)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML2.RING_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'outerBoundaryIs': _ol_xml_.makeChildAppender(GML2.prototype.writeRing_),\n    'innerBoundaryIs': _ol_xml_.makeChildAppender(GML2.prototype.writeRing_)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML2.POINTMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'pointMember': _ol_xml_.makeChildAppender(\n      GML2.prototype.writePointMember_)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML2.LINESTRINGORCURVEMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeLineStringOrCurveMember_),\n    'curveMember': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeLineStringOrCurveMember_)\n  }\n};\n\n\n/**\n * @const\n * @param {*} value Value.\n * @param {Array.<*>} objectStack Object stack.\n * @param {string=} opt_nodeName Node name.\n * @return {Node|undefined} Node.\n * @private\n */\nGML2.prototype.MULTIGEOMETRY_MEMBER_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {\n  const parentNode = objectStack[objectStack.length - 1].node;\n  return _ol_xml_.createElementNS('http://www.opengis.net/gml',\n    GML2.MULTIGEOMETRY_TO_MEMBER_NODENAME_[parentNode.nodeName]);\n};\n\n/**\n * @const\n * @type {Object.<string, string>}\n * @private\n */\nGML2.MULTIGEOMETRY_TO_MEMBER_NODENAME_ = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember'\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML2.SURFACEORPOLYGONMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeSurfaceOrPolygonMember_),\n    'polygonMember': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeSurfaceOrPolygonMember_)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML2.ENVELOPE_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': _ol_xml_.makeChildAppender(XSD.writeStringTextNode),\n    'upperCorner': _ol_xml_.makeChildAppender(XSD.writeStringTextNode)\n  }\n};\nexport default GML2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/GML2.js\n// module id = 51\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22","/**\n * @module ngeo.utils\n */\nconst exports = {};\nimport olEventsCondition from 'ol/events/condition.js';\nimport * as olExtent from 'ol/extent.js';\nimport olGeomLineString from 'ol/geom/LineString.js';\nimport olGeomMultiPoint from 'ol/geom/MultiPoint.js';\nimport olGeomMultiLineString from 'ol/geom/MultiLineString.js';\nimport olGeomMultiPolygon from 'ol/geom/MultiPolygon.js';\nimport olGeomPoint from 'ol/geom/Point.js';\nimport olGeomPolygon from 'ol/geom/Polygon.js';\n\n\n/**\n * Utility method that converts a simple geometry to its multi equivalent. If\n * the geometry itself is already multi, it is returned as-is.\n * @param {ol.geom.Geometry} geometry A geometry\n * @return {ol.geom.Geometry} A multi geometry\n */\nexports.toMulti = function(geometry) {\n  let multiGeom;\n  if (geometry instanceof olGeomPoint) {\n    multiGeom = new olGeomMultiPoint([]);\n    multiGeom.appendPoint(geometry);\n  } else if (geometry instanceof olGeomLineString) {\n    multiGeom = new olGeomMultiLineString([]);\n    multiGeom.appendLineString(geometry);\n  } else if (geometry instanceof olGeomPolygon) {\n    multiGeom = new olGeomMultiPolygon([]);\n    multiGeom.appendPolygon(geometry);\n  } else {\n    multiGeom = geometry;\n  }\n  return multiGeom;\n};\n\n/**\n * Checks if on Safari.\n * @return {boolean} True if on Safari.\n */\nexports.isSafari = function() {\n  return navigator.userAgent.indexOf('Safari') != -1 && navigator.userAgent.indexOf('Chrome') == -1;\n};\n\n/**\n * Takes a hex value and prepends a zero if it's a single digit.\n * @param {string} hex Hex value to prepend if single digit.\n * @return {string} hex value prepended with zero if it was single digit,\n *     otherwise the same value that was passed in.\n */\nexports.colorZeroPadding = function(hex) {\n  return hex.length == 1 ? `0${hex}` : hex;\n};\n\n/**\n * Takes an ol.Extent and return an Array of ol.Coordinate representing a rectangle polygon.\n * @param {ol.Extent} extent The extent.\n * @return {Array.<ol.Coordinate>} The Array of coordinate of the rectangle.\n */\nexports.extentToRectangle = function(extent) {\n  return [\n    olExtent.getTopLeft(extent),\n    olExtent.getTopRight(extent),\n    olExtent.getBottomRight(extent),\n    olExtent.getBottomLeft(extent),\n    olExtent.getTopLeft(extent),\n  ];\n};\n\n/**\n * Converts a color from RGB to hex representation.\n * @param {!Array.<number>} rgb rgb representation of the color.\n * @return {string} hex representation of the color.\n */\nexports.rgbArrayToHex = function(rgb) {\n  const r = rgb[0];\n  const g = rgb[1];\n  const b = rgb[2];\n  if (r != (r & 255) || g != (g & 255) || b != (b & 255)) {\n    throw Error(`\"(${r},${g},${b})\" is not a valid RGB color`);\n  }\n  const hexR = exports.colorZeroPadding(r.toString(16));\n  const hexG = exports.colorZeroPadding(g.toString(16));\n  const hexB = exports.colorZeroPadding(b.toString(16));\n  return `#${hexR}${hexG}${hexB}`;\n};\n\n/**\n * Decode the encoded query string into a query data dictionary.\n * @param {string|undefined} queryString The queryString.\n * @return {!Object.<string, string>} The result.\n */\nexports.decodeQueryString = function(queryString) {\n  const queryData = {};\n  if (queryString) {\n    const pairs = queryString.substring(1).split('&');\n    for (const pair of pairs) {\n      const indexOfEquals = pair.indexOf('=');\n      if (indexOfEquals >= 0) {\n        const name = pair.substring(0, indexOfEquals);\n        const value = pair.substring(indexOfEquals + 1);\n        queryData[decodeURIComponent(name)] = decodeURIComponent(value);\n      } else {\n        queryData[pair] = '';\n      }\n    }\n  }\n  return queryData;\n};\n\n/**\n * Encode the query data dictionary into an encoded query string.\n * @param {!Object.<string, string>} queryData The queryData,\n * @return {string} The result.\n */\nexports.encodeQueryString = function(queryData) {\n  const queryItem = [];\n  for (const key in queryData) {\n    const value = queryData[key];\n    queryItem.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);\n  }\n  return queryItem.join('&');\n};\n\n\n/**\n * Delete condition passed to the modify interaction\n * @param {ol.MapBrowserEvent} event Browser event.\n * @return {boolean} The result.\n */\nexports.deleteCondition = function(event) {\n  return olEventsCondition.noModifierKeys(event) && olEventsCondition.singleClick(event);\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils.js","/**\n * @module ol/format/XLink\n */\nconst XLink = {};\n\n\n/**\n * @const\n * @type {string}\n */\nconst NAMESPACE_URI = 'http://www.w3.org/1999/xlink';\n\n\n/**\n * @param {Node} node Node.\n * @return {boolean|undefined} Boolean.\n */\nXLink.readHref = function(node) {\n  return node.getAttributeNS(NAMESPACE_URI, 'href');\n};\nexport default XLink;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/XLink.js\n// module id = 60\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24","/**\n * @module ol/Image\n */\nimport {inherits} from './index.js';\nimport _ol_ImageBase_ from './ImageBase.js';\nimport ImageState from './ImageState.js';\nimport _ol_events_ from './events.js';\nimport EventType from './events/EventType.js';\nimport {getHeight} from './extent.js';\n\n/**\n * @constructor\n * @extends {ol.ImageBase}\n * @param {ol.Extent} extent Extent.\n * @param {number|undefined} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {string} src Image source URI.\n * @param {?string} crossOrigin Cross origin.\n * @param {ol.ImageLoadFunctionType} imageLoadFunction Image load function.\n */\nconst _ol_Image_ = function(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction) {\n\n  _ol_ImageBase_.call(this, extent, resolution, pixelRatio, ImageState.IDLE);\n\n  /**\n   * @private\n   * @type {string}\n   */\n  this.src_ = src;\n\n  /**\n   * @private\n   * @type {HTMLCanvasElement|Image|HTMLVideoElement}\n   */\n  this.image_ = new Image();\n  if (crossOrigin !== null) {\n    this.image_.crossOrigin = crossOrigin;\n  }\n\n  /**\n   * @private\n   * @type {Array.<ol.EventsKey>}\n   */\n  this.imageListenerKeys_ = null;\n\n  /**\n   * @protected\n   * @type {ol.ImageState}\n   */\n  this.state = ImageState.IDLE;\n\n  /**\n   * @private\n   * @type {ol.ImageLoadFunctionType}\n   */\n  this.imageLoadFunction_ = imageLoadFunction;\n\n};\n\ninherits(_ol_Image_, _ol_ImageBase_);\n\n\n/**\n * @inheritDoc\n * @api\n */\n_ol_Image_.prototype.getImage = function() {\n  return this.image_;\n};\n\n\n/**\n * Tracks loading or read errors.\n *\n * @private\n */\n_ol_Image_.prototype.handleImageError_ = function() {\n  this.state = ImageState.ERROR;\n  this.unlistenImage_();\n  this.changed();\n};\n\n\n/**\n * Tracks successful image load.\n *\n * @private\n */\n_ol_Image_.prototype.handleImageLoad_ = function() {\n  if (this.resolution === undefined) {\n    this.resolution = getHeight(this.extent) / this.image_.height;\n  }\n  this.state = ImageState.LOADED;\n  this.unlistenImage_();\n  this.changed();\n};\n\n\n/**\n * Load the image or retry if loading previously failed.\n * Loading is taken care of by the tile queue, and calling this method is\n * only needed for preloading or for reloading in case of an error.\n * @override\n * @api\n */\n_ol_Image_.prototype.load = function() {\n  if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {\n    this.state = ImageState.LOADING;\n    this.changed();\n    this.imageListenerKeys_ = [\n      _ol_events_.listenOnce(this.image_, EventType.ERROR,\n        this.handleImageError_, this),\n      _ol_events_.listenOnce(this.image_, EventType.LOAD,\n        this.handleImageLoad_, this)\n    ];\n    this.imageLoadFunction_(this, this.src_);\n  }\n};\n\n\n/**\n * @param {HTMLCanvasElement|Image|HTMLVideoElement} image Image.\n */\n_ol_Image_.prototype.setImage = function(image) {\n  this.image_ = image;\n};\n\n\n/**\n * Discards event handlers which listen for load completion or errors.\n *\n * @private\n */\n_ol_Image_.prototype.unlistenImage_ = function() {\n  this.imageListenerKeys_.forEach(_ol_events_.unlistenByKey);\n  this.imageListenerKeys_ = null;\n};\nexport default _ol_Image_;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/Image.js\n// module id = null\n// module chunks = ","/**\n * @module ol/source/ImageWMS\n */\n\nimport {DEFAULT_WMS_VERSION} from './common.js';\nimport {inherits} from '../index.js';\nimport _ol_Image_ from '../Image.js';\nimport {assert} from '../asserts.js';\nimport _ol_events_ from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {containsExtent, getCenter, getForViewAndSize, getHeight, getWidth} from '../extent.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection, transform} from '../proj.js';\nimport _ol_reproj_ from '../reproj.js';\nimport ImageSource from '../source/Image.js';\nimport WMSServerType from '../source/WMSServerType.js';\nimport _ol_string_ from '../string.js';\nimport {appendParams} from '../uri.js';\n\n/**\n * @classdesc\n * Source for WMS servers providing single, untiled images.\n *\n * @constructor\n * @fires ol.source.Image.Event\n * @extends {ol.source.Image}\n * @param {olx.source.ImageWMSOptions=} opt_options Options.\n * @api\n */\nconst ImageWMS = function(opt_options) {\n\n  const options = opt_options || {};\n\n  ImageSource.call(this, {\n    attributions: options.attributions,\n    projection: options.projection,\n    resolutions: options.resolutions\n  });\n\n  /**\n   * @private\n   * @type {?string}\n   */\n  this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n  this.url_ = options.url;\n\n  /**\n   * @private\n   * @type {ol.ImageLoadFunctionType}\n   */\n  this.imageLoadFunction_ = options.imageLoadFunction !== undefined ?\n    options.imageLoadFunction : ImageSource.defaultImageLoadFunction;\n\n  /**\n   * @private\n   * @type {!Object}\n   */\n  this.params_ = options.params || {};\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.v13_ = true;\n  this.updateV13_();\n\n  /**\n   * @private\n   * @type {ol.source.WMSServerType|undefined}\n   */\n  this.serverType_ = /** @type {ol.source.WMSServerType|undefined} */ (options.serverType);\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n  /**\n   * @private\n   * @type {ol.Image}\n   */\n  this.image_ = null;\n\n  /**\n   * @private\n   * @type {ol.Size}\n   */\n  this.imageSize_ = [0, 0];\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.renderedRevision_ = 0;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n\n};\n\ninherits(ImageWMS, ImageSource);\n\n\n/**\n * @const\n * @type {ol.Size}\n * @private\n */\nImageWMS.GETFEATUREINFO_IMAGE_SIZE_ = [101, 101];\n\n\n/**\n * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n * constructed.\n * @param {ol.Coordinate} coordinate Coordinate.\n * @param {number} resolution Resolution.\n * @param {ol.ProjectionLike} projection Projection.\n * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n *     in the `LAYERS` parameter will be used. `VERSION` should not be\n *     specified here.\n * @return {string|undefined} GetFeatureInfo URL.\n * @api\n */\nImageWMS.prototype.getGetFeatureInfoUrl = function(coordinate, resolution, projection, params) {\n  if (this.url_ === undefined) {\n    return undefined;\n  }\n  const projectionObj = getProjection(projection);\n  const sourceProjectionObj = this.getProjection();\n\n  if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n    resolution = _ol_reproj_.calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, resolution);\n    coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n  }\n\n  const extent = getForViewAndSize(coordinate, resolution, 0,\n    ImageWMS.GETFEATUREINFO_IMAGE_SIZE_);\n\n  const baseParams = {\n    'SERVICE': 'WMS',\n    'VERSION': DEFAULT_WMS_VERSION,\n    'REQUEST': 'GetFeatureInfo',\n    'FORMAT': 'image/png',\n    'TRANSPARENT': true,\n    'QUERY_LAYERS': this.params_['LAYERS']\n  };\n  assign(baseParams, this.params_, params);\n\n  const x = Math.floor((coordinate[0] - extent[0]) / resolution);\n  const y = Math.floor((extent[3] - coordinate[1]) / resolution);\n  baseParams[this.v13_ ? 'I' : 'X'] = x;\n  baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n  return this.getRequestUrl_(\n    extent, ImageWMS.GETFEATUREINFO_IMAGE_SIZE_,\n    1, sourceProjectionObj || projectionObj, baseParams);\n};\n\n\n/**\n * Get the user-provided params, i.e. those passed to the constructor through\n * the \"params\" option, and possibly updated using the updateParams method.\n * @return {Object} Params.\n * @api\n */\nImageWMS.prototype.getParams = function() {\n  return this.params_;\n};\n\n\n/**\n * @inheritDoc\n */\nImageWMS.prototype.getImageInternal = function(extent, resolution, pixelRatio, projection) {\n\n  if (this.url_ === undefined) {\n    return null;\n  }\n\n  resolution = this.findNearestResolution(resolution);\n\n  if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n    pixelRatio = 1;\n  }\n\n  const imageResolution = resolution / pixelRatio;\n\n  const center = getCenter(extent);\n  const viewWidth = Math.ceil(getWidth(extent) / imageResolution);\n  const viewHeight = Math.ceil(getHeight(extent) / imageResolution);\n  const viewExtent = getForViewAndSize(center, imageResolution, 0,\n    [viewWidth, viewHeight]);\n  const requestWidth = Math.ceil(this.ratio_ * getWidth(extent) / imageResolution);\n  const requestHeight = Math.ceil(this.ratio_ * getHeight(extent) / imageResolution);\n  const requestExtent = getForViewAndSize(center, imageResolution, 0,\n    [requestWidth, requestHeight]);\n\n  const image = this.image_;\n  if (image &&\n      this.renderedRevision_ == this.getRevision() &&\n      image.getResolution() == resolution &&\n      image.getPixelRatio() == pixelRatio &&\n      containsExtent(image.getExtent(), viewExtent)) {\n    return image;\n  }\n\n  const params = {\n    'SERVICE': 'WMS',\n    'VERSION': DEFAULT_WMS_VERSION,\n    'REQUEST': 'GetMap',\n    'FORMAT': 'image/png',\n    'TRANSPARENT': true\n  };\n  assign(params, this.params_);\n\n  this.imageSize_[0] = Math.round(getWidth(requestExtent) / imageResolution);\n  this.imageSize_[1] = Math.round(getHeight(requestExtent) / imageResolution);\n\n  const url = this.getRequestUrl_(requestExtent, this.imageSize_, pixelRatio,\n    projection, params);\n\n  this.image_ = new _ol_Image_(requestExtent, resolution, pixelRatio,\n    url, this.crossOrigin_, this.imageLoadFunction_);\n\n  this.renderedRevision_ = this.getRevision();\n\n  _ol_events_.listen(this.image_, EventType.CHANGE,\n    this.handleImageChange, this);\n\n  return this.image_;\n\n};\n\n\n/**\n * Return the image load function of the source.\n * @return {ol.ImageLoadFunctionType} The image load function.\n * @api\n */\nImageWMS.prototype.getImageLoadFunction = function() {\n  return this.imageLoadFunction_;\n};\n\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {ol.Size} size Size.\n * @param {number} pixelRatio Pixel ratio.\n * @param {ol.proj.Projection} projection Projection.\n * @param {Object} params Params.\n * @return {string} Request URL.\n * @private\n */\nImageWMS.prototype.getRequestUrl_ = function(extent, size, pixelRatio, projection, params) {\n\n  assert(this.url_ !== undefined, 9); // `url` must be configured or set using `#setUrl()`\n\n  params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n  if (!('STYLES' in this.params_)) {\n    params['STYLES'] = '';\n  }\n\n  if (pixelRatio != 1) {\n    switch (this.serverType_) {\n      case WMSServerType.GEOSERVER:\n        const dpi = (90 * pixelRatio + 0.5) | 0;\n        if ('FORMAT_OPTIONS' in params) {\n          params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n        } else {\n          params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n        }\n        break;\n      case WMSServerType.MAPSERVER:\n        params['MAP_RESOLUTION'] = 90 * pixelRatio;\n        break;\n      case WMSServerType.CARMENTA_SERVER:\n      case WMSServerType.QGIS:\n        params['DPI'] = 90 * pixelRatio;\n        break;\n      default:\n        assert(false, 8); // Unknown `serverType` configured\n        break;\n    }\n  }\n\n  params['WIDTH'] = size[0];\n  params['HEIGHT'] = size[1];\n\n  const axisOrientation = projection.getAxisOrientation();\n  let bbox;\n  if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n    bbox = [extent[1], extent[0], extent[3], extent[2]];\n  } else {\n    bbox = extent;\n  }\n  params['BBOX'] = bbox.join(',');\n\n  return appendParams(/** @type {string} */ (this.url_), params);\n};\n\n\n/**\n * Return the URL used for this WMS source.\n * @return {string|undefined} URL.\n * @api\n */\nImageWMS.prototype.getUrl = function() {\n  return this.url_;\n};\n\n\n/**\n * Set the image load function of the source.\n * @param {ol.ImageLoadFunctionType} imageLoadFunction Image load function.\n * @api\n */\nImageWMS.prototype.setImageLoadFunction = function(\n  imageLoadFunction) {\n  this.image_ = null;\n  this.imageLoadFunction_ = imageLoadFunction;\n  this.changed();\n};\n\n\n/**\n * Set the URL to use for requests.\n * @param {string|undefined} url URL.\n * @api\n */\nImageWMS.prototype.setUrl = function(url) {\n  if (url != this.url_) {\n    this.url_ = url;\n    this.image_ = null;\n    this.changed();\n  }\n};\n\n\n/**\n * Update the user-provided params.\n * @param {Object} params Params.\n * @api\n */\nImageWMS.prototype.updateParams = function(params) {\n  assign(this.params_, params);\n  this.updateV13_();\n  this.image_ = null;\n  this.changed();\n};\n\n\n/**\n * @private\n */\nImageWMS.prototype.updateV13_ = function() {\n  const version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n  this.v13_ = _ol_string_.compareVersions(version, '1.3') >= 0;\n};\nexport default ImageWMS;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/ImageWMS.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/WFS\n */\nimport {inherits} from '../index.js';\nimport {assert} from '../asserts.js';\nimport GML2 from '../format/GML2.js';\nimport GML3 from '../format/GML3.js';\nimport GMLBase from '../format/GMLBase.js';\nimport _ol_format_filter_ from '../format/filter.js';\nimport XMLFeature from '../format/XMLFeature.js';\nimport XSD from '../format/XSD.js';\nimport Geometry from '../geom/Geometry.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection} from '../proj.js';\nimport _ol_xml_ from '../xml.js';\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the WFS format.\n * By default, supports WFS version 1.1.0. You can pass a GML format\n * as option if you want to read a WFS that contains GML2 (WFS 1.0.0).\n * Also see {@link ol.format.GMLBase} which is used by this format.\n *\n * @constructor\n * @param {olx.format.WFSOptions=} opt_options\n *     Optional configuration object.\n * @extends {ol.format.XMLFeature}\n * @api\n */\nconst WFS = function(opt_options) {\n  const options = opt_options ? opt_options : {};\n\n  /**\n   * @private\n   * @type {Array.<string>|string|undefined}\n   */\n  this.featureType_ = options.featureType;\n\n  /**\n   * @private\n   * @type {Object.<string, string>|string|undefined}\n   */\n  this.featureNS_ = options.featureNS;\n\n  /**\n   * @private\n   * @type {ol.format.GMLBase}\n   */\n  this.gmlFormat_ = options.gmlFormat ?\n    options.gmlFormat : new GML3();\n\n  /**\n   * @private\n   * @type {string}\n   */\n  this.schemaLocation_ = options.schemaLocation ?\n    options.schemaLocation :\n    WFS.SCHEMA_LOCATIONS[WFS.DEFAULT_VERSION];\n\n  XMLFeature.call(this);\n};\n\ninherits(WFS, XMLFeature);\n\n\n/**\n * @const\n * @type {string}\n */\nWFS.FEATURE_PREFIX = 'feature';\n\n\n/**\n * @const\n * @type {string}\n */\nWFS.XMLNS = 'http://www.w3.org/2000/xmlns/';\n\n\n/**\n * @const\n * @type {string}\n */\nWFS.OGCNS = 'http://www.opengis.net/ogc';\n\n\n/**\n * @const\n * @type {string}\n */\nWFS.WFSNS = 'http://www.opengis.net/wfs';\n\n\n/**\n * @const\n * @type {string}\n */\nWFS.FESNS = 'http://www.opengis.net/fes';\n\n\n/**\n * @const\n * @type {Object.<string, string>}\n */\nWFS.SCHEMA_LOCATIONS = {\n  '1.1.0': 'http://www.opengis.net/wfs ' +\n      'http://schemas.opengis.net/wfs/1.1.0/wfs.xsd',\n  '1.0.0': 'http://www.opengis.net/wfs ' +\n      'http://schemas.opengis.net/wfs/1.0.0/wfs.xsd'\n};\n\n\n/**\n * @const\n * @type {string}\n */\nWFS.DEFAULT_VERSION = '1.1.0';\n\n\n/**\n * @return {Array.<string>|string|undefined} featureType\n */\nWFS.prototype.getFeatureType = function() {\n  return this.featureType_;\n};\n\n\n/**\n * @param {Array.<string>|string|undefined} featureType Feature type(s) to parse.\n */\nWFS.prototype.setFeatureType = function(featureType) {\n  this.featureType_ = featureType;\n};\n\n\n/**\n * Read all features from a WFS FeatureCollection.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {Array.<ol.Feature>} Features.\n * @api\n */\nWFS.prototype.readFeatures;\n\n\n/**\n * @inheritDoc\n */\nWFS.prototype.readFeaturesFromNode = function(node, opt_options) {\n  const context = /** @type {ol.XmlNodeStackItem} */ ({\n    'featureType': this.featureType_,\n    'featureNS': this.featureNS_\n  });\n  assign(context, this.getReadOptions(node, opt_options ? opt_options : {}));\n  const objectStack = [context];\n  this.gmlFormat_.FEATURE_COLLECTION_PARSERS[GMLBase.GMLNS][\n    'featureMember'] =\n      _ol_xml_.makeArrayPusher(GMLBase.prototype.readFeaturesInternal);\n  let features = _ol_xml_.pushParseAndPop([],\n    this.gmlFormat_.FEATURE_COLLECTION_PARSERS, node,\n    objectStack, this.gmlFormat_);\n  if (!features) {\n    features = [];\n  }\n  return features;\n};\n\n\n/**\n * Read transaction response of the source.\n *\n * @param {Document|Node|Object|string} source Source.\n * @return {ol.WFSTransactionResponse|undefined} Transaction response.\n * @api\n */\nWFS.prototype.readTransactionResponse = function(source) {\n  if (_ol_xml_.isDocument(source)) {\n    return this.readTransactionResponseFromDocument(\n      /** @type {Document} */ (source));\n  } else if (_ol_xml_.isNode(source)) {\n    return this.readTransactionResponseFromNode(/** @type {Node} */ (source));\n  } else if (typeof source === 'string') {\n    const doc = _ol_xml_.parse(source);\n    return this.readTransactionResponseFromDocument(doc);\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * Read feature collection metadata of the source.\n *\n * @param {Document|Node|Object|string} source Source.\n * @return {ol.WFSFeatureCollectionMetadata|undefined}\n *     FeatureCollection metadata.\n * @api\n */\nWFS.prototype.readFeatureCollectionMetadata = function(source) {\n  if (_ol_xml_.isDocument(source)) {\n    return this.readFeatureCollectionMetadataFromDocument(\n      /** @type {Document} */ (source));\n  } else if (_ol_xml_.isNode(source)) {\n    return this.readFeatureCollectionMetadataFromNode(\n      /** @type {Node} */ (source));\n  } else if (typeof source === 'string') {\n    const doc = _ol_xml_.parse(source);\n    return this.readFeatureCollectionMetadataFromDocument(doc);\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Document} doc Document.\n * @return {ol.WFSFeatureCollectionMetadata|undefined}\n *     FeatureCollection metadata.\n */\nWFS.prototype.readFeatureCollectionMetadataFromDocument = function(doc) {\n  for (let n = doc.firstChild; n; n = n.nextSibling) {\n    if (n.nodeType == Node.ELEMENT_NODE) {\n      return this.readFeatureCollectionMetadataFromNode(n);\n    }\n  }\n  return undefined;\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWFS.FEATURE_COLLECTION_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'boundedBy': _ol_xml_.makeObjectPropertySetter(\n      GMLBase.prototype.readGeometryElement, 'bounds')\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @return {ol.WFSFeatureCollectionMetadata|undefined}\n *     FeatureCollection metadata.\n */\nWFS.prototype.readFeatureCollectionMetadataFromNode = function(node) {\n  const result = {};\n  const value = XSD.readNonNegativeIntegerString(\n    node.getAttribute('numberOfFeatures'));\n  result['numberOfFeatures'] = value;\n  return _ol_xml_.pushParseAndPop(\n    /** @type {ol.WFSFeatureCollectionMetadata} */ (result),\n    WFS.FEATURE_COLLECTION_PARSERS_, node, [], this.gmlFormat_);\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWFS.TRANSACTION_SUMMARY_PARSERS_ = {\n  'http://www.opengis.net/wfs': {\n    'totalInserted': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger),\n    'totalUpdated': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger),\n    'totalDeleted': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger)\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Transaction Summary.\n * @private\n */\nWFS.readTransactionSummary_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop(\n    {}, WFS.TRANSACTION_SUMMARY_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWFS.OGC_FID_PARSERS_ = {\n  'http://www.opengis.net/ogc': {\n    'FeatureId': _ol_xml_.makeArrayPusher(function(node, objectStack) {\n      return node.getAttribute('fid');\n    })\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nWFS.fidParser_ = function(node, objectStack) {\n  _ol_xml_.parseNode(WFS.OGC_FID_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWFS.INSERT_RESULTS_PARSERS_ = {\n  'http://www.opengis.net/wfs': {\n    'Feature': WFS.fidParser_\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Array.<string>|undefined} Insert results.\n * @private\n */\nWFS.readInsertResults_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop(\n    [], WFS.INSERT_RESULTS_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWFS.TRANSACTION_RESPONSE_PARSERS_ = {\n  'http://www.opengis.net/wfs': {\n    'TransactionSummary': _ol_xml_.makeObjectPropertySetter(\n      WFS.readTransactionSummary_, 'transactionSummary'),\n    'InsertResults': _ol_xml_.makeObjectPropertySetter(\n      WFS.readInsertResults_, 'insertIds')\n  }\n};\n\n\n/**\n * @param {Document} doc Document.\n * @return {ol.WFSTransactionResponse|undefined} Transaction response.\n */\nWFS.prototype.readTransactionResponseFromDocument = function(doc) {\n  for (let n = doc.firstChild; n; n = n.nextSibling) {\n    if (n.nodeType == Node.ELEMENT_NODE) {\n      return this.readTransactionResponseFromNode(n);\n    }\n  }\n  return undefined;\n};\n\n\n/**\n * @param {Node} node Node.\n * @return {ol.WFSTransactionResponse|undefined} Transaction response.\n */\nWFS.prototype.readTransactionResponseFromNode = function(node) {\n  return _ol_xml_.pushParseAndPop(\n    /** @type {ol.WFSTransactionResponse} */({}),\n    WFS.TRANSACTION_RESPONSE_PARSERS_, node, []);\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nWFS.QUERY_SERIALIZERS_ = {\n  'http://www.opengis.net/wfs': {\n    'PropertyName': _ol_xml_.makeChildAppender(XSD.writeStringTextNode)\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.Feature} feature Feature.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeFeature_ = function(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const featureType = context['featureType'];\n  const featureNS = context['featureNS'];\n  const gmlVersion = context['gmlVersion'];\n  const child = _ol_xml_.createElementNS(featureNS, featureType);\n  node.appendChild(child);\n  if (gmlVersion === 2) {\n    GML2.prototype.writeFeatureElement(child, feature, objectStack);\n  } else {\n    GML3.prototype.writeFeatureElement(child, feature, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {number|string} fid Feature identifier.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeOgcFidFilter_ = function(node, fid, objectStack) {\n  const filter = _ol_xml_.createElementNS(WFS.OGCNS, 'Filter');\n  const child = _ol_xml_.createElementNS(WFS.OGCNS, 'FeatureId');\n  filter.appendChild(child);\n  child.setAttribute('fid', fid);\n  node.appendChild(filter);\n};\n\n\n/**\n * @param {string|undefined} featurePrefix The prefix of the feature.\n * @param {string} featureType The type of the feature.\n * @returns {string} The value of the typeName property.\n * @private\n */\nWFS.getTypeName_ = function(featurePrefix, featureType) {\n  featurePrefix = featurePrefix ? featurePrefix :\n    WFS.FEATURE_PREFIX;\n  const prefix = featurePrefix + ':';\n  // The featureType already contains the prefix.\n  if (featureType.indexOf(prefix) === 0) {\n    return featureType;\n  } else {\n    return prefix + featureType;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.Feature} feature Feature.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeDelete_ = function(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  assert(feature.getId() !== undefined, 26); // Features must have an id set\n  const featureType = context['featureType'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const typeName = WFS.getTypeName_(featurePrefix, featureType);\n  node.setAttribute('typeName', typeName);\n  _ol_xml_.setAttributeNS(node, WFS.XMLNS, 'xmlns:' + featurePrefix,\n    featureNS);\n  const fid = feature.getId();\n  if (fid !== undefined) {\n    WFS.writeOgcFidFilter_(node, fid, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.Feature} feature Feature.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeUpdate_ = function(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  assert(feature.getId() !== undefined, 27); // Features must have an id set\n  const featureType = context['featureType'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const typeName = WFS.getTypeName_(featurePrefix, featureType);\n  const geometryName = feature.getGeometryName();\n  node.setAttribute('typeName', typeName);\n  _ol_xml_.setAttributeNS(node, WFS.XMLNS, 'xmlns:' + featurePrefix,\n    featureNS);\n  const fid = feature.getId();\n  if (fid !== undefined) {\n    const keys = feature.getKeys();\n    const values = [];\n    for (let i = 0, ii = keys.length; i < ii; i++) {\n      const value = feature.get(keys[i]);\n      if (value !== undefined) {\n        let name = keys[i];\n        if (value instanceof Geometry) {\n          name = geometryName;\n        }\n        values.push({name: name, value: value});\n      }\n    }\n    _ol_xml_.pushSerializeAndPop(/** @type {ol.XmlNodeStackItem} */ (\n      {'gmlVersion': context['gmlVersion'], node: node,\n        'hasZ': context['hasZ'], 'srsName': context['srsName']}),\n    WFS.TRANSACTION_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory('Property'), values,\n    objectStack);\n    WFS.writeOgcFidFilter_(node, fid, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Object} pair Property name and value.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeProperty_ = function(node, pair, objectStack) {\n  const name = _ol_xml_.createElementNS(WFS.WFSNS, 'Name');\n  const context = objectStack[objectStack.length - 1];\n  const gmlVersion = context['gmlVersion'];\n  node.appendChild(name);\n  XSD.writeStringTextNode(name, pair.name);\n  if (pair.value !== undefined && pair.value !== null) {\n    const value = _ol_xml_.createElementNS(WFS.WFSNS, 'Value');\n    node.appendChild(value);\n    if (pair.value instanceof Geometry) {\n      if (gmlVersion === 2) {\n        GML2.prototype.writeGeometryElement(value,\n          pair.value, objectStack);\n      } else {\n        GML3.prototype.writeGeometryElement(value,\n          pair.value, objectStack);\n      }\n    } else {\n      XSD.writeStringTextNode(value, pair.value);\n    }\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {{vendorId: string, safeToIgnore: boolean, value: string}}\n *     nativeElement The native element.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeNative_ = function(node, nativeElement, objectStack) {\n  if (nativeElement.vendorId) {\n    node.setAttribute('vendorId', nativeElement.vendorId);\n  }\n  if (nativeElement.safeToIgnore !== undefined) {\n    node.setAttribute('safeToIgnore', nativeElement.safeToIgnore);\n  }\n  if (nativeElement.value !== undefined) {\n    XSD.writeStringTextNode(node, nativeElement.value);\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nWFS.TRANSACTION_SERIALIZERS_ = {\n  'http://www.opengis.net/wfs': {\n    'Insert': _ol_xml_.makeChildAppender(WFS.writeFeature_),\n    'Update': _ol_xml_.makeChildAppender(WFS.writeUpdate_),\n    'Delete': _ol_xml_.makeChildAppender(WFS.writeDelete_),\n    'Property': _ol_xml_.makeChildAppender(WFS.writeProperty_),\n    'Native': _ol_xml_.makeChildAppender(WFS.writeNative_)\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {string} featureType Feature type.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeQuery_ = function(node, featureType, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const propertyNames = context['propertyNames'];\n  const srsName = context['srsName'];\n  let typeName;\n  // If feature prefix is not defined, we must not use the default prefix.\n  if (featurePrefix) {\n    typeName = WFS.getTypeName_(featurePrefix, featureType);\n  } else {\n    typeName = featureType;\n  }\n  node.setAttribute('typeName', typeName);\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (featureNS) {\n    _ol_xml_.setAttributeNS(node, WFS.XMLNS, 'xmlns:' + featurePrefix,\n      featureNS);\n  }\n  const item = /** @type {ol.XmlNodeStackItem} */ (assign({}, context));\n  item.node = node;\n  _ol_xml_.pushSerializeAndPop(item,\n    WFS.QUERY_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory('PropertyName'), propertyNames,\n    objectStack);\n  const filter = context['filter'];\n  if (filter) {\n    const child = _ol_xml_.createElementNS(WFS.OGCNS, 'Filter');\n    node.appendChild(child);\n    WFS.writeFilterCondition_(child, filter, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.Filter} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeFilterCondition_ = function(node, filter, objectStack) {\n  /** @type {ol.XmlNodeStackItem} */\n  const item = {node: node};\n  _ol_xml_.pushSerializeAndPop(item,\n    WFS.GETFEATURE_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory(filter.getTagName()),\n    [filter], objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.Bbox} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeBboxFilter_ = function(node, filter, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  context['srsName'] = filter.srsName;\n\n  WFS.writeOgcPropertyName_(node, filter.geometryName);\n  GML3.prototype.writeGeometryElement(node, filter.extent, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.Contains} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeContainsFilter_ = function(node, filter, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  context['srsName'] = filter.srsName;\n\n  WFS.writeOgcPropertyName_(node, filter.geometryName);\n  GML3.prototype.writeGeometryElement(node, filter.geometry, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.Intersects} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeIntersectsFilter_ = function(node, filter, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  context['srsName'] = filter.srsName;\n\n  WFS.writeOgcPropertyName_(node, filter.geometryName);\n  GML3.prototype.writeGeometryElement(node, filter.geometry, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.Within} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeWithinFilter_ = function(node, filter, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  context['srsName'] = filter.srsName;\n\n  WFS.writeOgcPropertyName_(node, filter.geometryName);\n  GML3.prototype.writeGeometryElement(node, filter.geometry, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.During} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeDuringFilter_ = function(node, filter, objectStack) {\n\n  const valueReference = _ol_xml_.createElementNS(WFS.FESNS, 'ValueReference');\n  XSD.writeStringTextNode(valueReference, filter.propertyName);\n  node.appendChild(valueReference);\n\n  const timePeriod = _ol_xml_.createElementNS(GMLBase.GMLNS, 'TimePeriod');\n\n  node.appendChild(timePeriod);\n\n  const begin = _ol_xml_.createElementNS(GMLBase.GMLNS, 'begin');\n  timePeriod.appendChild(begin);\n  WFS.writeTimeInstant_(begin, filter.begin);\n\n  const end = _ol_xml_.createElementNS(GMLBase.GMLNS, 'end');\n  timePeriod.appendChild(end);\n  WFS.writeTimeInstant_(end, filter.end);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.LogicalNary} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeLogicalFilter_ = function(node, filter, objectStack) {\n  /** @type {ol.XmlNodeStackItem} */\n  const item = {node: node};\n  const conditions = filter.conditions;\n  for (let i = 0, ii = conditions.length; i < ii; ++i) {\n    const condition = conditions[i];\n    _ol_xml_.pushSerializeAndPop(item,\n      WFS.GETFEATURE_SERIALIZERS_,\n      _ol_xml_.makeSimpleNodeFactory(condition.getTagName()),\n      [condition], objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.Not} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeNotFilter_ = function(node, filter, objectStack) {\n  /** @type {ol.XmlNodeStackItem} */\n  const item = {node: node};\n  const condition = filter.condition;\n  _ol_xml_.pushSerializeAndPop(item,\n    WFS.GETFEATURE_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory(condition.getTagName()),\n    [condition], objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.ComparisonBinary} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeComparisonFilter_ = function(node, filter, objectStack) {\n  if (filter.matchCase !== undefined) {\n    node.setAttribute('matchCase', filter.matchCase.toString());\n  }\n  WFS.writeOgcPropertyName_(node, filter.propertyName);\n  WFS.writeOgcLiteral_(node, '' + filter.expression);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.IsNull} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeIsNullFilter_ = function(node, filter, objectStack) {\n  WFS.writeOgcPropertyName_(node, filter.propertyName);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.IsBetween} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeIsBetweenFilter_ = function(node, filter, objectStack) {\n  WFS.writeOgcPropertyName_(node, filter.propertyName);\n\n  const lowerBoundary = _ol_xml_.createElementNS(WFS.OGCNS, 'LowerBoundary');\n  node.appendChild(lowerBoundary);\n  WFS.writeOgcLiteral_(lowerBoundary, '' + filter.lowerBoundary);\n\n  const upperBoundary = _ol_xml_.createElementNS(WFS.OGCNS, 'UpperBoundary');\n  node.appendChild(upperBoundary);\n  WFS.writeOgcLiteral_(upperBoundary, '' + filter.upperBoundary);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.IsLike} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeIsLikeFilter_ = function(node, filter, objectStack) {\n  node.setAttribute('wildCard', filter.wildCard);\n  node.setAttribute('singleChar', filter.singleChar);\n  node.setAttribute('escapeChar', filter.escapeChar);\n  if (filter.matchCase !== undefined) {\n    node.setAttribute('matchCase', filter.matchCase.toString());\n  }\n  WFS.writeOgcPropertyName_(node, filter.propertyName);\n  WFS.writeOgcLiteral_(node, '' + filter.pattern);\n};\n\n\n/**\n * @param {string} tagName Tag name.\n * @param {Node} node Node.\n * @param {string} value Value.\n * @private\n */\nWFS.writeOgcExpression_ = function(tagName, node, value) {\n  const property = _ol_xml_.createElementNS(WFS.OGCNS, tagName);\n  XSD.writeStringTextNode(property, value);\n  node.appendChild(property);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {string} value PropertyName value.\n * @private\n */\nWFS.writeOgcPropertyName_ = function(node, value) {\n  WFS.writeOgcExpression_('PropertyName', node, value);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {string} value PropertyName value.\n * @private\n */\nWFS.writeOgcLiteral_ = function(node, value) {\n  WFS.writeOgcExpression_('Literal', node, value);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {string} time PropertyName value.\n * @private\n */\nWFS.writeTimeInstant_ = function(node, time) {\n  const timeInstant = _ol_xml_.createElementNS(GMLBase.GMLNS, 'TimeInstant');\n  node.appendChild(timeInstant);\n\n  const timePosition = _ol_xml_.createElementNS(GMLBase.GMLNS, 'timePosition');\n  timeInstant.appendChild(timePosition);\n  XSD.writeStringTextNode(timePosition, time);\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nWFS.GETFEATURE_SERIALIZERS_ = {\n  'http://www.opengis.net/wfs': {\n    'Query': _ol_xml_.makeChildAppender(WFS.writeQuery_)\n  },\n  'http://www.opengis.net/ogc': {\n    'During': _ol_xml_.makeChildAppender(WFS.writeDuringFilter_),\n    'And': _ol_xml_.makeChildAppender(WFS.writeLogicalFilter_),\n    'Or': _ol_xml_.makeChildAppender(WFS.writeLogicalFilter_),\n    'Not': _ol_xml_.makeChildAppender(WFS.writeNotFilter_),\n    'BBOX': _ol_xml_.makeChildAppender(WFS.writeBboxFilter_),\n    'Contains': _ol_xml_.makeChildAppender(WFS.writeContainsFilter_),\n    'Intersects': _ol_xml_.makeChildAppender(WFS.writeIntersectsFilter_),\n    'Within': _ol_xml_.makeChildAppender(WFS.writeWithinFilter_),\n    'PropertyIsEqualTo': _ol_xml_.makeChildAppender(WFS.writeComparisonFilter_),\n    'PropertyIsNotEqualTo': _ol_xml_.makeChildAppender(WFS.writeComparisonFilter_),\n    'PropertyIsLessThan': _ol_xml_.makeChildAppender(WFS.writeComparisonFilter_),\n    'PropertyIsLessThanOrEqualTo': _ol_xml_.makeChildAppender(WFS.writeComparisonFilter_),\n    'PropertyIsGreaterThan': _ol_xml_.makeChildAppender(WFS.writeComparisonFilter_),\n    'PropertyIsGreaterThanOrEqualTo': _ol_xml_.makeChildAppender(WFS.writeComparisonFilter_),\n    'PropertyIsNull': _ol_xml_.makeChildAppender(WFS.writeIsNullFilter_),\n    'PropertyIsBetween': _ol_xml_.makeChildAppender(WFS.writeIsBetweenFilter_),\n    'PropertyIsLike': _ol_xml_.makeChildAppender(WFS.writeIsLikeFilter_)\n  }\n};\n\n\n/**\n * Encode filter as WFS `Filter` and return the Node.\n *\n * @param {ol.format.filter.Filter} filter Filter.\n * @return {Node} Result.\n * @api\n */\nWFS.writeFilter = function(filter) {\n  const child = _ol_xml_.createElementNS(WFS.OGCNS, 'Filter');\n  WFS.writeFilterCondition_(child, filter, []);\n  return child;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<string>} featureTypes Feature types.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeGetFeature_ = function(node, featureTypes, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const item = /** @type {ol.XmlNodeStackItem} */ (assign({}, context));\n  item.node = node;\n  _ol_xml_.pushSerializeAndPop(item,\n    WFS.GETFEATURE_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory('Query'), featureTypes,\n    objectStack);\n};\n\n\n/**\n * Encode format as WFS `GetFeature` and return the Node.\n *\n * @param {olx.format.WFSWriteGetFeatureOptions} options Options.\n * @return {Node} Result.\n * @api\n */\nWFS.prototype.writeGetFeature = function(options) {\n  const node = _ol_xml_.createElementNS(WFS.WFSNS, 'GetFeature');\n  node.setAttribute('service', 'WFS');\n  node.setAttribute('version', '1.1.0');\n  let filter;\n  if (options) {\n    if (options.handle) {\n      node.setAttribute('handle', options.handle);\n    }\n    if (options.outputFormat) {\n      node.setAttribute('outputFormat', options.outputFormat);\n    }\n    if (options.maxFeatures !== undefined) {\n      node.setAttribute('maxFeatures', options.maxFeatures);\n    }\n    if (options.resultType) {\n      node.setAttribute('resultType', options.resultType);\n    }\n    if (options.startIndex !== undefined) {\n      node.setAttribute('startIndex', options.startIndex);\n    }\n    if (options.count !== undefined) {\n      node.setAttribute('count', options.count);\n    }\n    filter = options.filter;\n    if (options.bbox) {\n      assert(options.geometryName,\n        12); // `options.geometryName` must also be provided when `options.bbox` is set\n      const bbox = _ol_format_filter_.bbox(\n        /** @type {string} */ (options.geometryName), options.bbox, options.srsName);\n      if (filter) {\n        // if bbox and filter are both set, combine the two into a single filter\n        filter = _ol_format_filter_.and(filter, bbox);\n      } else {\n        filter = bbox;\n      }\n    }\n  }\n  _ol_xml_.setAttributeNS(node, 'http://www.w3.org/2001/XMLSchema-instance',\n    'xsi:schemaLocation', this.schemaLocation_);\n  /** @type {ol.XmlNodeStackItem} */\n  const context = {\n    node: node,\n    'srsName': options.srsName,\n    'featureNS': options.featureNS ? options.featureNS : this.featureNS_,\n    'featurePrefix': options.featurePrefix,\n    'geometryName': options.geometryName,\n    'filter': filter,\n    'propertyNames': options.propertyNames ? options.propertyNames : []\n  };\n  assert(Array.isArray(options.featureTypes),\n    11); // `options.featureTypes` should be an Array\n  WFS.writeGetFeature_(node, /** @type {!Array.<string>} */ (options.featureTypes), [context]);\n  return node;\n};\n\n\n/**\n * Encode format as WFS `Transaction` and return the Node.\n *\n * @param {Array.<ol.Feature>} inserts The features to insert.\n * @param {Array.<ol.Feature>} updates The features to update.\n * @param {Array.<ol.Feature>} deletes The features to delete.\n * @param {olx.format.WFSWriteTransactionOptions} options Write options.\n * @return {Node} Result.\n * @api\n */\nWFS.prototype.writeTransaction = function(inserts, updates, deletes,\n  options) {\n  const objectStack = [];\n  const node = _ol_xml_.createElementNS(WFS.WFSNS, 'Transaction');\n  const version = options.version ?\n    options.version : WFS.DEFAULT_VERSION;\n  const gmlVersion = version === '1.0.0' ? 2 : 3;\n  node.setAttribute('service', 'WFS');\n  node.setAttribute('version', version);\n  let baseObj;\n  /** @type {ol.XmlNodeStackItem} */\n  let obj;\n  if (options) {\n    baseObj = options.gmlOptions ? options.gmlOptions : {};\n    if (options.handle) {\n      node.setAttribute('handle', options.handle);\n    }\n  }\n  const schemaLocation = WFS.SCHEMA_LOCATIONS[version];\n  _ol_xml_.setAttributeNS(node, 'http://www.w3.org/2001/XMLSchema-instance',\n    'xsi:schemaLocation', schemaLocation);\n  const featurePrefix = options.featurePrefix ? options.featurePrefix : WFS.FEATURE_PREFIX;\n  if (inserts) {\n    obj = {node: node, 'featureNS': options.featureNS,\n      'featureType': options.featureType, 'featurePrefix': featurePrefix,\n      'gmlVersion': gmlVersion, 'hasZ': options.hasZ, 'srsName': options.srsName};\n    assign(obj, baseObj);\n    _ol_xml_.pushSerializeAndPop(obj,\n      WFS.TRANSACTION_SERIALIZERS_,\n      _ol_xml_.makeSimpleNodeFactory('Insert'), inserts,\n      objectStack);\n  }\n  if (updates) {\n    obj = {node: node, 'featureNS': options.featureNS,\n      'featureType': options.featureType, 'featurePrefix': featurePrefix,\n      'gmlVersion': gmlVersion, 'hasZ': options.hasZ, 'srsName': options.srsName};\n    assign(obj, baseObj);\n    _ol_xml_.pushSerializeAndPop(obj,\n      WFS.TRANSACTION_SERIALIZERS_,\n      _ol_xml_.makeSimpleNodeFactory('Update'), updates,\n      objectStack);\n  }\n  if (deletes) {\n    _ol_xml_.pushSerializeAndPop({node: node, 'featureNS': options.featureNS,\n      'featureType': options.featureType, 'featurePrefix': featurePrefix,\n      'gmlVersion': gmlVersion, 'srsName': options.srsName},\n    WFS.TRANSACTION_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory('Delete'), deletes,\n    objectStack);\n  }\n  if (options.nativeElements) {\n    _ol_xml_.pushSerializeAndPop({node: node, 'featureNS': options.featureNS,\n      'featureType': options.featureType, 'featurePrefix': featurePrefix,\n      'gmlVersion': gmlVersion, 'srsName': options.srsName},\n    WFS.TRANSACTION_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory('Native'), options.nativeElements,\n    objectStack);\n  }\n  return node;\n};\n\n\n/**\n * Read the projection from a WFS source.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @return {?ol.proj.Projection} Projection.\n * @api\n */\nWFS.prototype.readProjection;\n\n\n/**\n * @inheritDoc\n */\nWFS.prototype.readProjectionFromDocument = function(doc) {\n  for (let n = doc.firstChild; n; n = n.nextSibling) {\n    if (n.nodeType == Node.ELEMENT_NODE) {\n      return this.readProjectionFromNode(n);\n    }\n  }\n  return null;\n};\n\n\n/**\n * @inheritDoc\n */\nWFS.prototype.readProjectionFromNode = function(node) {\n  if (node.firstElementChild &&\n      node.firstElementChild.firstElementChild) {\n    node = node.firstElementChild.firstElementChild;\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      if (!(n.childNodes.length === 0 ||\n          (n.childNodes.length === 1 &&\n          n.firstChild.nodeType === 3))) {\n        const objectStack = [{}];\n        this.gmlFormat_.readGeometryElement(n, objectStack);\n        return getProjection(objectStack.pop().srsName);\n      }\n    }\n  }\n\n  return null;\n};\nexport default WFS;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/WFS.js\n// module id = 62\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22","/**\n * @type {string} Default WMS version.\n */\nexport const DEFAULT_WMS_VERSION = '1.3.0';\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/common.js\n// module id = 66\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24","/**\n * @module ol/source/WMSServerType\n */\n\n/**\n * Available server types: `'carmentaserver'`, `'geoserver'`, `'mapserver'`,\n *     `'qgis'`. These are servers that have vendor parameters beyond the WMS\n *     specification that OpenLayers can make use of.\n * @enum {string}\n */\nexport default {\n  CARMENTA_SERVER: 'carmentaserver',\n  GEOSERVER: 'geoserver',\n  MAPSERVER: 'mapserver',\n  QGIS: 'qgis'\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/WMSServerType.js\n// module id = 67\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24","/**\n * @module ol/source/TileWMS\n */\n\nimport {DEFAULT_WMS_VERSION} from './common.js';\nimport {inherits} from '../index.js';\nimport {assert} from '../asserts.js';\nimport {buffer, createEmpty} from '../extent.js';\nimport {assign} from '../obj.js';\nimport {modulo} from '../math.js';\nimport {get as getProjection, transform, transformExtent} from '../proj.js';\nimport _ol_reproj_ from '../reproj.js';\nimport _ol_size_ from '../size.js';\nimport TileImage from '../source/TileImage.js';\nimport WMSServerType from '../source/WMSServerType.js';\nimport _ol_tilecoord_ from '../tilecoord.js';\nimport _ol_string_ from '../string.js';\nimport {appendParams} from '../uri.js';\n\n/**\n * @classdesc\n * Layer source for tile data from WMS servers.\n *\n * @constructor\n * @extends {ol.source.TileImage}\n * @param {olx.source.TileWMSOptions=} opt_options Tile WMS options.\n * @api\n */\nconst TileWMS = function(opt_options) {\n\n  const options = opt_options || {};\n\n  const params = options.params || {};\n\n  const transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;\n\n  TileImage.call(this, {\n    attributions: options.attributions,\n    cacheSize: options.cacheSize,\n    crossOrigin: options.crossOrigin,\n    opaque: !transparent,\n    projection: options.projection,\n    reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n    tileClass: options.tileClass,\n    tileGrid: options.tileGrid,\n    tileLoadFunction: options.tileLoadFunction,\n    url: options.url,\n    urls: options.urls,\n    wrapX: options.wrapX !== undefined ? options.wrapX : true,\n    transition: options.transition\n  });\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n\n  /**\n   * @private\n   * @type {!Object}\n   */\n  this.params_ = params;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.v13_ = true;\n\n  /**\n   * @private\n   * @type {ol.source.WMSServerType|undefined}\n   */\n  this.serverType_ = /** @type {ol.source.WMSServerType|undefined} */ (options.serverType);\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n  /**\n   * @private\n   * @type {ol.Extent}\n   */\n  this.tmpExtent_ = createEmpty();\n\n  this.updateV13_();\n  this.setKey(this.getKeyForParams_());\n\n};\n\ninherits(TileWMS, TileImage);\n\n\n/**\n * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n * constructed.\n * @param {ol.Coordinate} coordinate Coordinate.\n * @param {number} resolution Resolution.\n * @param {ol.ProjectionLike} projection Projection.\n * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n *     in the `LAYERS` parameter will be used. `VERSION` should not be\n *     specified here.\n * @return {string|undefined} GetFeatureInfo URL.\n * @api\n */\nTileWMS.prototype.getGetFeatureInfoUrl = function(coordinate, resolution, projection, params) {\n  const projectionObj = getProjection(projection);\n  const sourceProjectionObj = this.getProjection();\n\n  let tileGrid = this.getTileGrid();\n  if (!tileGrid) {\n    tileGrid = this.getTileGridForProjection(projectionObj);\n  }\n\n  const tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, resolution);\n\n  if (tileGrid.getResolutions().length <= tileCoord[0]) {\n    return undefined;\n  }\n\n  let tileResolution = tileGrid.getResolution(tileCoord[0]);\n  let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n  let tileSize = _ol_size_.toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n\n  const gutter = this.gutter_;\n  if (gutter !== 0) {\n    tileSize = _ol_size_.buffer(tileSize, gutter, this.tmpSize);\n    tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n  }\n\n  if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n    tileResolution = _ol_reproj_.calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, tileResolution);\n    tileExtent = transformExtent(tileExtent, projectionObj, sourceProjectionObj);\n    coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n  }\n\n  const baseParams = {\n    'SERVICE': 'WMS',\n    'VERSION': DEFAULT_WMS_VERSION,\n    'REQUEST': 'GetFeatureInfo',\n    'FORMAT': 'image/png',\n    'TRANSPARENT': true,\n    'QUERY_LAYERS': this.params_['LAYERS']\n  };\n  assign(baseParams, this.params_, params);\n\n  const x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);\n  const y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);\n\n  baseParams[this.v13_ ? 'I' : 'X'] = x;\n  baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n  return this.getRequestUrl_(tileCoord, tileSize, tileExtent,\n    1, sourceProjectionObj || projectionObj, baseParams);\n};\n\n\n/**\n * @inheritDoc\n */\nTileWMS.prototype.getGutterInternal = function() {\n  return this.gutter_;\n};\n\n\n/**\n * Get the user-provided params, i.e. those passed to the constructor through\n * the \"params\" option, and possibly updated using the updateParams method.\n * @return {Object} Params.\n * @api\n */\nTileWMS.prototype.getParams = function() {\n  return this.params_;\n};\n\n\n/**\n * @param {ol.TileCoord} tileCoord Tile coordinate.\n * @param {ol.Size} tileSize Tile size.\n * @param {ol.Extent} tileExtent Tile extent.\n * @param {number} pixelRatio Pixel ratio.\n * @param {ol.proj.Projection} projection Projection.\n * @param {Object} params Params.\n * @return {string|undefined} Request URL.\n * @private\n */\nTileWMS.prototype.getRequestUrl_ = function(tileCoord, tileSize, tileExtent,\n  pixelRatio, projection, params) {\n\n  const urls = this.urls;\n  if (!urls) {\n    return undefined;\n  }\n\n  params['WIDTH'] = tileSize[0];\n  params['HEIGHT'] = tileSize[1];\n\n  params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n  if (!('STYLES' in this.params_)) {\n    params['STYLES'] = '';\n  }\n\n  if (pixelRatio != 1) {\n    switch (this.serverType_) {\n      case WMSServerType.GEOSERVER:\n        const dpi = (90 * pixelRatio + 0.5) | 0;\n        if ('FORMAT_OPTIONS' in params) {\n          params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n        } else {\n          params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n        }\n        break;\n      case WMSServerType.MAPSERVER:\n        params['MAP_RESOLUTION'] = 90 * pixelRatio;\n        break;\n      case WMSServerType.CARMENTA_SERVER:\n      case WMSServerType.QGIS:\n        params['DPI'] = 90 * pixelRatio;\n        break;\n      default:\n        assert(false, 52); // Unknown `serverType` configured\n        break;\n    }\n  }\n\n  const axisOrientation = projection.getAxisOrientation();\n  const bbox = tileExtent;\n  if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n    let tmp;\n    tmp = tileExtent[0];\n    bbox[0] = tileExtent[1];\n    bbox[1] = tmp;\n    tmp = tileExtent[2];\n    bbox[2] = tileExtent[3];\n    bbox[3] = tmp;\n  }\n  params['BBOX'] = bbox.join(',');\n\n  let url;\n  if (urls.length == 1) {\n    url = urls[0];\n  } else {\n    const index = modulo(_ol_tilecoord_.hash(tileCoord), urls.length);\n    url = urls[index];\n  }\n  return appendParams(url, params);\n};\n\n\n/**\n * @inheritDoc\n */\nTileWMS.prototype.getTilePixelRatio = function(pixelRatio) {\n  return (!this.hidpi_ || this.serverType_ === undefined) ? 1 :\n  /** @type {number} */ (pixelRatio);\n};\n\n\n/**\n * @private\n * @return {string} The key for the current params.\n */\nTileWMS.prototype.getKeyForParams_ = function() {\n  let i = 0;\n  const res = [];\n  for (const key in this.params_) {\n    res[i++] = key + '-' + this.params_[key];\n  }\n  return res.join('/');\n};\n\n\n/**\n * @inheritDoc\n */\nTileWMS.prototype.fixedTileUrlFunction = function(tileCoord, pixelRatio, projection) {\n\n  let tileGrid = this.getTileGrid();\n  if (!tileGrid) {\n    tileGrid = this.getTileGridForProjection(projection);\n  }\n\n  if (tileGrid.getResolutions().length <= tileCoord[0]) {\n    return undefined;\n  }\n\n  if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n    pixelRatio = 1;\n  }\n\n  const tileResolution = tileGrid.getResolution(tileCoord[0]);\n  let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n  let tileSize = _ol_size_.toSize(\n    tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n  const gutter = this.gutter_;\n  if (gutter !== 0) {\n    tileSize = _ol_size_.buffer(tileSize, gutter, this.tmpSize);\n    tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n  }\n\n  if (pixelRatio != 1) {\n    tileSize = _ol_size_.scale(tileSize, pixelRatio, this.tmpSize);\n  }\n\n  const baseParams = {\n    'SERVICE': 'WMS',\n    'VERSION': DEFAULT_WMS_VERSION,\n    'REQUEST': 'GetMap',\n    'FORMAT': 'image/png',\n    'TRANSPARENT': true\n  };\n  assign(baseParams, this.params_);\n\n  return this.getRequestUrl_(tileCoord, tileSize, tileExtent,\n    pixelRatio, projection, baseParams);\n};\n\n/**\n * Update the user-provided params.\n * @param {Object} params Params.\n * @api\n */\nTileWMS.prototype.updateParams = function(params) {\n  assign(this.params_, params);\n  this.updateV13_();\n  this.setKey(this.getKeyForParams_());\n};\n\n\n/**\n * @private\n */\nTileWMS.prototype.updateV13_ = function() {\n  const version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n  this.v13_ = _ol_string_.compareVersions(version, '1.3') >= 0;\n};\nexport default TileWMS;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/TileWMS.js\n// module id = 69\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24","/**\n * @module ngeo.statemanager.Location\n */\nimport googAsserts from 'goog/asserts.js';\nimport ngeoBase from 'ngeo/index.js';\nimport ngeoUtils from 'ngeo/utils.js';\n\n/**\n * Provides a service for interacting with the URL in the\n * browser address bar.\n *\n * WARNING: because of a bug in Angular this service is not compatible with\n * the $location service. This further means that service is not compatible\n * with the $anchorScroll and $route services, and with the ng-include and\n * ng-view directives (which are based on the $anchorScroll and $route\n * services). See <https://github.com/angular/angular.js/issues/1417>.\n *\n * This file also provides an ngeo.statemanager.Location.MockProvider function that you can\n * use to mock Angular's $location provider and make it possible to use both\n * ngeoLocation and ng-include.\n *\n *     app.module.config(ngeo.statemanager.Location.MockProvider);\n *\n * The ngeo Location type.\n *\n * See our live example: [../examples/permalink.html](../examples/permalink.html)\n *\n * @param {Location} location Location.\n * @param {History} history History.\n * @constructor\n * @struct\n * @ngdoc service\n * @ngname ngeoLocation\n */\nconst exports = function(location, history) {\n  /**\n   * @type {History}\n   * @private\n   */\n  this.history_ = history;\n\n  /**\n   * @type {string|undefined}\n   * @private\n   */\n  this.schema_ = location.protocol.substring(0, location.protocol.length - 1);\n\n  /**\n   * @type {string|undefined}\n   * @private\n   */\n  this.domain_ = location.hostname;\n\n  /**\n   * @type {number|undefined}\n   * @private\n   */\n  this.port_ = location.port ? parseInt(location.port, 10) : undefined;\n\n  /**\n   * @type {string|undefined}\n   * @private\n   */\n  this.path_ = location.pathname;\n\n  /**\n   * @type {!Object.<string, string>}\n   * @private\n   */\n  this.queryData_ = ngeoUtils.decodeQueryString(location.search);\n\n  /**\n   * @type {!Object.<string, string>}\n   * @private\n   */\n  this.fragment_ = ngeoUtils.decodeQueryString(location.hash);\n};\n\n\n/**\n * @param {History} history History.\n * @param {string} state State.\n */\nexports.replaceState = function(history, state) {\n  try {\n    history.replaceState(null, '', state);\n  } catch (error) {\n    // replaceState fails on some browser if the domain in the state\n    // is not the same as location.origin\n  }\n};\n\n\n/**\n * Get the location's current path.\n * @return {string|undefined} The path.\n * @export\n */\nexports.prototype.getPath = function() {\n  return this.path_;\n};\n\n\n/**\n * Get the location's URI as a string\n * @return {string} The URI.\n * @export\n */\nexports.prototype.getUriString = function() {\n  const out = [];\n\n  if (this.schema_) {\n    out.push(this.schema_, ':');\n  }\n\n  if (this.domain_ || this.schema_ === 'file') {\n    out.push('//');\n\n    out.push(this.domain_);\n\n    if (this.port_ !== undefined) {\n      out.push(':', String(this.port_));\n    }\n  }\n\n  if (this.path_) {\n    if (this.domain_ && this.path_.charAt(0) !== '/') {\n      out.push('/');\n    }\n    out.push(this.path_);\n  }\n\n  const encodedQueryData = ngeoUtils.encodeQueryString(this.queryData_);\n  if (encodedQueryData.length > 0) {\n    out.push('?', encodedQueryData);\n  }\n\n  const encodedFragment = ngeoUtils.encodeQueryString(this.fragment_);\n  if (encodedFragment.length > 0) {\n    out.push('#', encodedFragment);\n  }\n  return out.join('');\n};\n\n\n/**\n * Check if a param exists in the location's URI.\n * @param {string} key Param key.\n * @return {boolean} True if the param exists.\n * @export\n */\nexports.prototype.hasParam = function(key) {\n  return key in this.queryData_;\n};\n\n\n/**\n * Check if a param exists in the fragment of the location's URI.\n * @param {string} key Param key.\n * @return {boolean} True if the param exists.\n * @export\n */\nexports.prototype.hasFragmentParam = function(key) {\n  return key in this.fragment_;\n};\n\n\n/**\n * Get a param in the location's URI.\n * @param {string} key Param key.\n * @return {string|undefined} Param value.\n * @export\n */\nexports.prototype.getParam = function(key) {\n  return this.queryData_[key];\n};\n\n\n/**\n * Get a param from the fragment of the location's URI.\n * @param {string} key Param key.\n * @return {string|undefined} Param value.\n * @export\n */\nexports.prototype.getFragmentParam = function(key) {\n  return this.fragment_[key];\n};\n\n\n/**\n * Get a param in the location's URI as integer. If the entry does not exist,\n * or if the value can not be parsed as integer, `undefined` is returned.\n * @param {string} key Param key.\n * @return {number|undefined} Param value.\n * @export\n */\nexports.prototype.getParamAsInt = function(key) {\n  const value = this.getParam(key);\n  if (value === undefined) {\n    return undefined;\n  }\n  googAsserts.assertString(value);\n  const valueAsInt = parseInt(value, 10);\n  return (isNaN(valueAsInt)) ? undefined : valueAsInt;\n};\n\n\n/**\n * Get a param in the location's URI as a floating point number.\n * If the entry does not exist, or if the value can not be parsed,\n * `undefined` is returned.\n * @param {string} key Param key.\n * @return {number|undefined} Param value.\n * @export\n */\nexports.prototype.getParamAsFloat = function(key) {\n  const value = this.getParam(key);\n  if (value === undefined) {\n    return undefined;\n  }\n  googAsserts.assertString(value);\n  const valueAsFloat = parseFloat(value);\n  return isNaN(valueAsFloat) ? undefined : valueAsFloat;\n};\n\n\n/**\n * Get a param from the fragment of the location's URI as integer. If the entry\n * does not exist, or if the value can not be parsed as integer, `undefined` is returned.\n * @param {string} key Param key.\n * @return {number|undefined} Param value.\n * @export\n */\nexports.prototype.getFragmentParamAsInt = function(key) {\n  const value = this.getFragmentParam(key);\n  if (value === undefined) {\n    return undefined;\n  }\n  googAsserts.assertString(value);\n  const valueAsInt = parseInt(value, 10);\n  return (isNaN(valueAsInt)) ? undefined : valueAsInt;\n};\n\n\n/**\n * Get an array with all existing param's keys in the location's URI.\n * @return {Array.<string>} Param keys.\n * @export\n */\nexports.prototype.getParamKeys = function() {\n  const keys = [];\n  for (const key in this.queryData_) {\n    keys.push(key);\n  }\n  return keys;\n};\n\n\n/**\n * Get an array with all existing param's keys from the fragment of the location's URI.\n * @return {Array.<string>} Param keys.\n * @export\n */\nexports.prototype.getFragmentParamKeys = function() {\n  const keys = [];\n  for (const key in this.fragment_) {\n    keys.push(key);\n  }\n  return keys;\n};\n\n\n/**\n * Get an array with all existing param's keys in the location's URI that start\n * with the given prefix.\n * @param {string} prefix Key prefix.\n * @return {Array.<string>} Param keys.\n * @export\n */\nexports.prototype.getParamKeysWithPrefix = function(prefix) {\n  const keys = [];\n  for (const key in this.queryData_) {\n    if (key.indexOf(prefix) == 0) {\n      keys.push(key);\n    }\n  }\n  return keys;\n};\n\n\n/**\n * Get an array with all existing param's keys from the fragment of the location's URI\n * that start with the given prefix.\n * @param {string} prefix Key prefix.\n * @return {Array.<string>} Param keys.\n * @export\n */\nexports.prototype.getFragmentParamKeysWithPrefix = function(prefix) {\n  const keys = [];\n  for (const key in this.fragment_) {\n    if (key.indexOf(prefix) == 0) {\n      keys.push(key);\n    }\n  }\n  return keys;\n};\n\n\n/**\n * Set or create a param in the location's URI.\n * @param {!Object.<string, string>} params Parameters.\n * @export\n */\nexports.prototype.updateParams = function(params) {\n  for (const key in params) {\n    this.queryData_[key] = params[key];\n  }\n};\n\n\n/**\n * Set or create a param in the fragment of the location's URI.\n * @param {!Object.<string, string>} params Parameters.\n * @export\n */\nexports.prototype.updateFragmentParams = function(params) {\n  for (const key in params) {\n    this.fragment_[key] = params[key];\n  }\n};\n\n\n/**\n * Delete a param in the location's URI.\n * @param {string} key Param key.\n * @export\n */\nexports.prototype.deleteParam = function(key) {\n  delete this.queryData_[key];\n};\n\n\n/**\n * Delete a param int the fragment of the location's URI.\n * @param {string} key Param key.\n * @export\n */\nexports.prototype.deleteFragmentParam = function(key) {\n  delete this.fragment_[key];\n};\n\n\n/**\n * Refresh the the location's URI.\n * @export\n */\nexports.prototype.refresh = function() {\n  exports.replaceState(this.history_, this.getUriString());\n};\n\n\n/**\n * Set a new path for this location.\n * @param {string} path Path.\n * @export\n */\nexports.prototype.setPath = function(path) {\n  this.path_ = path;\n};\n\n\n/**\n * The factory creating the ngeo Location service.\n *\n * @param {angular.Scope} $rootScope The root scope.\n * @param {angular.$window} $window Angular window service.\n * @return {ngeo.statemanager.Location} The ngeo location service.\n * @ngInject\n */\nexports.LocationFactory = function($rootScope, $window) {\n  const history = $window.history;\n  const service = new exports($window.location, $window.history);\n\n  let lastUri = service.getUriString();\n  $rootScope.$watch(() => {\n    const newUri = service.getUriString();\n    if (lastUri !== newUri) {\n      $rootScope.$evalAsync(() => {\n        lastUri = newUri;\n        if (history !== undefined && history.replaceState !== undefined) {\n          exports.replaceState(history, newUri);\n        }\n        $rootScope.$broadcast('ngeoLocationChange');\n      });\n    }\n  });\n\n  return service;\n};\n\n/**\n * A function that changes Angular's $location provider to avoid problem\n * when both ngeoLocation and $location are used in an application. This\n * is how you can use that function in an application:\n *\n * app.module.config(ngeo.statemanager.Location.MockProvider);\n *\n * @param {angular.$locationProvider} $locationProvider Angular location\n *     provider.\n * @ngInject\n */\nexports.MockProvider = function($locationProvider) {\n  /**\n   * @return {angular.$location} Mock object for Angular location service.\n   */\n  $locationProvider['$get'] = function() {\n    const locationMock = /** @type {angular.$location} */ ({\n      /**\n       * @return {string} Absolute URL.\n       */\n      absUrl() {\n        return '';\n      },\n      /**\n       * @param {string=} opt_path Path.\n       * @return {string} Hash.\n       */\n      hash(opt_path) {\n        return opt_path !== undefined ? this : '';\n      },\n      /**\n       * @return {string} Host.\n       */\n      host() {\n        return '';\n      },\n      /**\n       * @param {string=} opt_path Path.\n       * @return {string} Path.\n       */\n      path(opt_path) {\n        return opt_path !== undefined ? this : '';\n      },\n      /**\n       * @return {number} Port.\n       */\n      port() {\n        return 0;\n      },\n      /**\n       * @return {string} Protocol.\n       */\n      protocol() {\n        return '';\n      },\n      replace() {\n      },\n      /**\n       * @param {string=} opt_search Search.\n       * @param {Object=} opt_paramValue Parameters.\n       * @return {Object} Search.\n       */\n      search(opt_search, opt_paramValue) {\n        return opt_search !== undefined ? this : {};\n      },\n      /**\n       * @param {string=} opt_url URL.\n       * @return {string} URL.\n       */\n      url(opt_url) {\n        return '';\n      }\n    });\n    return locationMock;\n  };\n};\n\n\n/**\n * @type {!angular.Module}\n * FIXME add utils dependencies.\n * FIXME What about Mockup provider ?\n */\nexports.module = angular.module('ngeoLocation', []);\nexports.module.factory('ngeoLocation', exports.LocationFactory);\nngeoBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/statemanager/Location.js","/**\n * @module ol/format/GML3\n */\nimport {inherits} from '../index.js';\nimport {extend} from '../array.js';\nimport {createOrUpdate} from '../extent.js';\nimport {transformWithOptions} from '../format/Feature.js';\nimport GMLBase from '../format/GMLBase.js';\nimport XSD from '../format/XSD.js';\nimport Geometry from '../geom/Geometry.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Polygon from '../geom/Polygon.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection, transformExtent} from '../proj.js';\nimport _ol_xml_ from '../xml.js';\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format\n * version 3.1.1.\n * Currently only supports GML 3.1.1 Simple Features profile.\n *\n * @constructor\n * @param {olx.format.GMLOptions=} opt_options\n *     Optional configuration object.\n * @extends {ol.format.GMLBase}\n * @api\n */\nconst GML3 = function(opt_options) {\n  const options = /** @type {olx.format.GMLOptions} */\n      (opt_options ? opt_options : {});\n\n  GMLBase.call(this, options);\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.surface_ = options.surface !== undefined ? options.surface : false;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.curve_ = options.curve !== undefined ? options.curve : false;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.multiCurve_ = options.multiCurve !== undefined ?\n    options.multiCurve : true;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.multiSurface_ = options.multiSurface !== undefined ?\n    options.multiSurface : true;\n\n  /**\n   * @inheritDoc\n   */\n  this.schemaLocation = options.schemaLocation ?\n    options.schemaLocation : GML3.schemaLocation_;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.hasZ = options.hasZ !== undefined ?\n    options.hasZ : false;\n\n};\n\ninherits(GML3, GMLBase);\n\n\n/**\n * @const\n * @type {string}\n * @private\n */\nGML3.schemaLocation_ = GMLBase.GMLNS +\n    ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' +\n    '1.0.0/gmlsf.xsd';\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {ol.geom.MultiLineString|undefined} MultiLineString.\n */\nGML3.prototype.readMultiCurve_ = function(node, objectStack) {\n  /** @type {Array.<ol.geom.LineString>} */\n  const lineStrings = _ol_xml_.pushParseAndPop([],\n    this.MULTICURVE_PARSERS_, node, objectStack, this);\n  if (lineStrings) {\n    const multiLineString = new MultiLineString(null);\n    multiLineString.setLineStrings(lineStrings);\n    return multiLineString;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {ol.geom.MultiPolygon|undefined} MultiPolygon.\n */\nGML3.prototype.readMultiSurface_ = function(node, objectStack) {\n  /** @type {Array.<ol.geom.Polygon>} */\n  const polygons = _ol_xml_.pushParseAndPop([],\n    this.MULTISURFACE_PARSERS_, node, objectStack, this);\n  if (polygons) {\n    const multiPolygon = new MultiPolygon(null);\n    multiPolygon.setPolygons(polygons);\n    return multiPolygon;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGML3.prototype.curveMemberParser_ = function(node, objectStack) {\n  _ol_xml_.parseNode(this.CURVEMEMBER_PARSERS_, node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGML3.prototype.surfaceMemberParser_ = function(node, objectStack) {\n  _ol_xml_.parseNode(this.SURFACEMEMBER_PARSERS_,\n    node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<(Array.<number>)>|undefined} flat coordinates.\n */\nGML3.prototype.readPatch_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop([null],\n    this.PATCHES_PARSERS_, node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<number>|undefined} flat coordinates.\n */\nGML3.prototype.readSegment_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop([null],\n    this.SEGMENTS_PARSERS_, node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<(Array.<number>)>|undefined} flat coordinates.\n */\nGML3.prototype.readPolygonPatch_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop([null],\n    this.FLAT_LINEAR_RINGS_PARSERS_, node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<number>|undefined} flat coordinates.\n */\nGML3.prototype.readLineStringSegment_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop([null],\n    this.GEOMETRY_FLAT_COORDINATES_PARSERS_,\n    node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGML3.prototype.interiorParser_ = function(node, objectStack) {\n  /** @type {Array.<number>|undefined} */\n  const flatLinearRing = _ol_xml_.pushParseAndPop(undefined,\n    this.RING_PARSERS, node, objectStack, this);\n  if (flatLinearRing) {\n    const flatLinearRings = /** @type {Array.<Array.<number>>} */\n        (objectStack[objectStack.length - 1]);\n    flatLinearRings.push(flatLinearRing);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGML3.prototype.exteriorParser_ = function(node, objectStack) {\n  /** @type {Array.<number>|undefined} */\n  const flatLinearRing = _ol_xml_.pushParseAndPop(undefined,\n    this.RING_PARSERS, node, objectStack, this);\n  if (flatLinearRing) {\n    const flatLinearRings = /** @type {Array.<Array.<number>>} */\n        (objectStack[objectStack.length - 1]);\n    flatLinearRings[0] = flatLinearRing;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {ol.geom.Polygon|undefined} Polygon.\n */\nGML3.prototype.readSurface_ = function(node, objectStack) {\n  /** @type {Array.<Array.<number>>} */\n  const flatLinearRings = _ol_xml_.pushParseAndPop([null],\n    this.SURFACE_PARSERS_, node, objectStack, this);\n  if (flatLinearRings && flatLinearRings[0]) {\n    const polygon = new Polygon(null);\n    const flatCoordinates = flatLinearRings[0];\n    const ends = [flatCoordinates.length];\n    let i, ii;\n    for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n      extend(flatCoordinates, flatLinearRings[i]);\n      ends.push(flatCoordinates.length);\n    }\n    polygon.setFlatCoordinates(\n      GeometryLayout.XYZ, flatCoordinates, ends);\n    return polygon;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {ol.geom.LineString|undefined} LineString.\n */\nGML3.prototype.readCurve_ = function(node, objectStack) {\n  /** @type {Array.<number>} */\n  const flatCoordinates = _ol_xml_.pushParseAndPop([null],\n    this.CURVE_PARSERS_, node, objectStack, this);\n  if (flatCoordinates) {\n    const lineString = new LineString(null);\n    lineString.setFlatCoordinates(GeometryLayout.XYZ, flatCoordinates);\n    return lineString;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {ol.Extent|undefined} Envelope.\n */\nGML3.prototype.readEnvelope_ = function(node, objectStack) {\n  /** @type {Array.<number>} */\n  const flatCoordinates = _ol_xml_.pushParseAndPop([null],\n    this.ENVELOPE_PARSERS_, node, objectStack, this);\n  return createOrUpdate(flatCoordinates[1][0],\n    flatCoordinates[1][1], flatCoordinates[2][0],\n    flatCoordinates[2][1]);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<number>|undefined} Flat coordinates.\n */\nGML3.prototype.readFlatPos_ = function(node, objectStack) {\n  let s = _ol_xml_.getAllTextContent(node, false);\n  const re = /^\\s*([+\\-]?\\d*\\.?\\d+(?:[eE][+\\-]?\\d+)?)\\s*/;\n  /** @type {Array.<number>} */\n  const flatCoordinates = [];\n  let m;\n  while ((m = re.exec(s))) {\n    flatCoordinates.push(parseFloat(m[1]));\n    s = s.substr(m[0].length);\n  }\n  if (s !== '') {\n    return undefined;\n  }\n  const context = objectStack[0];\n  const containerSrs = context['srsName'];\n  let axisOrientation = 'enu';\n  if (containerSrs) {\n    const proj = getProjection(containerSrs);\n    axisOrientation = proj.getAxisOrientation();\n  }\n  if (axisOrientation === 'neu') {\n    let i, ii;\n    for (i = 0, ii = flatCoordinates.length; i < ii; i += 3) {\n      const y = flatCoordinates[i];\n      const x = flatCoordinates[i + 1];\n      flatCoordinates[i] = x;\n      flatCoordinates[i + 1] = y;\n    }\n  }\n  const len = flatCoordinates.length;\n  if (len == 2) {\n    flatCoordinates.push(0);\n  }\n  if (len === 0) {\n    return undefined;\n  }\n  return flatCoordinates;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<number>|undefined} Flat coordinates.\n */\nGML3.prototype.readFlatPosList_ = function(node, objectStack) {\n  const s = _ol_xml_.getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n  const context = objectStack[0];\n  const containerSrs = context['srsName'];\n  const contextDimension = context['srsDimension'];\n  let axisOrientation = 'enu';\n  if (containerSrs) {\n    const proj = getProjection(containerSrs);\n    axisOrientation = proj.getAxisOrientation();\n  }\n  const coords = s.split(/\\s+/);\n  // The \"dimension\" attribute is from the GML 3.0.1 spec.\n  let dim = 2;\n  if (node.getAttribute('srsDimension')) {\n    dim = XSD.readNonNegativeIntegerString(\n      node.getAttribute('srsDimension'));\n  } else if (node.getAttribute('dimension')) {\n    dim = XSD.readNonNegativeIntegerString(\n      node.getAttribute('dimension'));\n  } else if (node.parentNode.getAttribute('srsDimension')) {\n    dim = XSD.readNonNegativeIntegerString(\n      node.parentNode.getAttribute('srsDimension'));\n  } else if (contextDimension) {\n    dim = XSD.readNonNegativeIntegerString(contextDimension);\n  }\n  let x, y, z;\n  const flatCoordinates = [];\n  for (let i = 0, ii = coords.length; i < ii; i += dim) {\n    x = parseFloat(coords[i]);\n    y = parseFloat(coords[i + 1]);\n    z = (dim === 3) ? parseFloat(coords[i + 2]) : 0;\n    if (axisOrientation.substr(0, 2) === 'en') {\n      flatCoordinates.push(x, y, z);\n    } else {\n      flatCoordinates.push(y, x, z);\n    }\n  }\n  return flatCoordinates;\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'pos': _ol_xml_.makeReplacer(GML3.prototype.readFlatPos_),\n    'posList': _ol_xml_.makeReplacer(GML3.prototype.readFlatPosList_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.FLAT_LINEAR_RINGS_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'interior': GML3.prototype.interiorParser_,\n    'exterior': GML3.prototype.exteriorParser_\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.GEOMETRY_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'Point': _ol_xml_.makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readMultiPoint),\n    'LineString': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readLineString),\n    'MultiLineString': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readMultiLineString),\n    'LinearRing': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readLinearRing),\n    'Polygon': _ol_xml_.makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readMultiPolygon),\n    'Surface': _ol_xml_.makeReplacer(GML3.prototype.readSurface_),\n    'MultiSurface': _ol_xml_.makeReplacer(\n      GML3.prototype.readMultiSurface_),\n    'Curve': _ol_xml_.makeReplacer(GML3.prototype.readCurve_),\n    'MultiCurve': _ol_xml_.makeReplacer(\n      GML3.prototype.readMultiCurve_),\n    'Envelope': _ol_xml_.makeReplacer(GML3.prototype.readEnvelope_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.MULTICURVE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'curveMember': _ol_xml_.makeArrayPusher(\n      GML3.prototype.curveMemberParser_),\n    'curveMembers': _ol_xml_.makeArrayPusher(\n      GML3.prototype.curveMemberParser_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.MULTISURFACE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': _ol_xml_.makeArrayPusher(\n      GML3.prototype.surfaceMemberParser_),\n    'surfaceMembers': _ol_xml_.makeArrayPusher(\n      GML3.prototype.surfaceMemberParser_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.CURVEMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'LineString': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.readLineString),\n    'Curve': _ol_xml_.makeArrayPusher(GML3.prototype.readCurve_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.SURFACEMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'Polygon': _ol_xml_.makeArrayPusher(GMLBase.prototype.readPolygon),\n    'Surface': _ol_xml_.makeArrayPusher(GML3.prototype.readSurface_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.SURFACE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'patches': _ol_xml_.makeReplacer(GML3.prototype.readPatch_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.CURVE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'segments': _ol_xml_.makeReplacer(GML3.prototype.readSegment_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.ENVELOPE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': _ol_xml_.makeArrayPusher(\n      GML3.prototype.readFlatPosList_),\n    'upperCorner': _ol_xml_.makeArrayPusher(\n      GML3.prototype.readFlatPosList_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.PATCHES_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'PolygonPatch': _ol_xml_.makeReplacer(\n      GML3.prototype.readPolygonPatch_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.SEGMENTS_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'LineStringSegment': _ol_xml_.makeReplacer(\n      GML3.prototype.readLineStringSegment_)\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Point} value Point geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writePos_ = function(node, value, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsDimension = hasZ ? 3 : 2;\n  node.setAttribute('srsDimension', srsDimension);\n  const srsName = context['srsName'];\n  let axisOrientation = 'enu';\n  if (srsName) {\n    axisOrientation = getProjection(srsName).getAxisOrientation();\n  }\n  const point = value.getCoordinates();\n  let coords;\n  // only 2d for simple features profile\n  if (axisOrientation.substr(0, 2) === 'en') {\n    coords = (point[0] + ' ' + point[1]);\n  } else {\n    coords = (point[1] + ' ' + point[0]);\n  }\n  if (hasZ) {\n    // For newly created points, Z can be undefined.\n    const z = point[2] || 0;\n    coords += ' ' + z;\n  }\n  XSD.writeStringTextNode(node, coords);\n};\n\n\n/**\n * @param {Array.<number>} point Point geometry.\n * @param {string=} opt_srsName Optional srsName\n * @param {boolean=} opt_hasZ whether the geometry has a Z coordinate (is 3D) or not.\n * @return {string} The coords string.\n * @private\n */\nGML3.prototype.getCoords_ = function(point, opt_srsName, opt_hasZ) {\n  let axisOrientation = 'enu';\n  if (opt_srsName) {\n    axisOrientation = getProjection(opt_srsName).getAxisOrientation();\n  }\n  let coords = ((axisOrientation.substr(0, 2) === 'en') ?\n    point[0] + ' ' + point[1] :\n    point[1] + ' ' + point[0]);\n  if (opt_hasZ) {\n    // For newly created points, Z can be undefined.\n    const z = point[2] || 0;\n    coords += ' ' + z;\n  }\n\n  return coords;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LineString|ol.geom.LinearRing} value Geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writePosList_ = function(node, value, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsDimension = hasZ ? 3 : 2;\n  node.setAttribute('srsDimension', srsDimension);\n  const srsName = context['srsName'];\n  // only 2d for simple features profile\n  const points = value.getCoordinates();\n  const len = points.length;\n  const parts = new Array(len);\n  let point;\n  for (let i = 0; i < len; ++i) {\n    point = points[i];\n    parts[i] = this.getCoords_(point, srsName, hasZ);\n  }\n  XSD.writeStringTextNode(node, parts.join(' '));\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Point} geometry Point geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writePoint_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const pos = _ol_xml_.createElementNS(node.namespaceURI, 'pos');\n  node.appendChild(pos);\n  this.writePos_(pos, geometry, objectStack);\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML3.ENVELOPE_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': _ol_xml_.makeChildAppender(XSD.writeStringTextNode),\n    'upperCorner': _ol_xml_.makeChildAppender(XSD.writeStringTextNode)\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.Extent} extent Extent.\n * @param {Array.<*>} objectStack Node stack.\n */\nGML3.prototype.writeEnvelope = function(node, extent, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const keys = ['lowerCorner', 'upperCorner'];\n  const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n  _ol_xml_.pushSerializeAndPop(/** @type {ol.XmlNodeStackItem} */\n    ({node: node}), GML3.ENVELOPE_SERIALIZERS_,\n    _ol_xml_.OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack, keys, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LinearRing} geometry LinearRing geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeLinearRing_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const posList = _ol_xml_.createElementNS(node.namespaceURI, 'posList');\n  node.appendChild(posList);\n  this.writePosList_(posList, geometry, objectStack);\n};\n\n\n/**\n * @param {*} value Value.\n * @param {Array.<*>} objectStack Object stack.\n * @param {string=} opt_nodeName Node name.\n * @return {Node} Node.\n * @private\n */\nGML3.prototype.RING_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {\n  const context = objectStack[objectStack.length - 1];\n  const parentNode = context.node;\n  const exteriorWritten = context['exteriorWritten'];\n  if (exteriorWritten === undefined) {\n    context['exteriorWritten'] = true;\n  }\n  return _ol_xml_.createElementNS(parentNode.namespaceURI,\n    exteriorWritten !== undefined ? 'interior' : 'exterior');\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Polygon} geometry Polygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeSurfaceOrPolygon_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  if (node.nodeName !== 'PolygonPatch' && srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n    const rings = geometry.getLinearRings();\n    _ol_xml_.pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName},\n      GML3.RING_SERIALIZERS_,\n      this.RING_NODE_FACTORY_,\n      rings, objectStack, undefined, this);\n  } else if (node.nodeName === 'Surface') {\n    const patches = _ol_xml_.createElementNS(node.namespaceURI, 'patches');\n    node.appendChild(patches);\n    this.writeSurfacePatches_(\n      patches, geometry, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LineString} geometry LineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeCurveOrLineString_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  if (node.nodeName !== 'LineStringSegment' && srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (node.nodeName === 'LineString' ||\n      node.nodeName === 'LineStringSegment') {\n    const posList = _ol_xml_.createElementNS(node.namespaceURI, 'posList');\n    node.appendChild(posList);\n    this.writePosList_(posList, geometry, objectStack);\n  } else if (node.nodeName === 'Curve') {\n    const segments = _ol_xml_.createElementNS(node.namespaceURI, 'segments');\n    node.appendChild(segments);\n    this.writeCurveSegments_(segments,\n      geometry, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.MultiPolygon} geometry MultiPolygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeMultiSurfaceOrPolygon_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  const surface = context['surface'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const polygons = geometry.getPolygons();\n  _ol_xml_.pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName, surface: surface},\n    GML3.SURFACEORPOLYGONMEMBER_SERIALIZERS_,\n    this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons,\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.MultiPoint} geometry MultiPoint geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeMultiPoint_ = function(node, geometry,\n  objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  const hasZ = context['hasZ'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const points = geometry.getPoints();\n  _ol_xml_.pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName},\n    GML3.POINTMEMBER_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory('pointMember'), points,\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.MultiLineString} geometry MultiLineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeMultiCurveOrLineString_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  const curve = context['curve'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const lines = geometry.getLineStrings();\n  _ol_xml_.pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName, curve: curve},\n    GML3.LINESTRINGORCURVEMEMBER_SERIALIZERS_,\n    this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines,\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LinearRing} ring LinearRing geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeRing_ = function(node, ring, objectStack) {\n  const linearRing = _ol_xml_.createElementNS(node.namespaceURI, 'LinearRing');\n  node.appendChild(linearRing);\n  this.writeLinearRing_(linearRing, ring, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Polygon} polygon Polygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeSurfaceOrPolygonMember_ = function(node, polygon, objectStack) {\n  const child = this.GEOMETRY_NODE_FACTORY_(\n    polygon, objectStack);\n  if (child) {\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Point} point Point geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writePointMember_ = function(node, point, objectStack) {\n  const child = _ol_xml_.createElementNS(node.namespaceURI, 'Point');\n  node.appendChild(child);\n  this.writePoint_(child, point, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LineString} line LineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeLineStringOrCurveMember_ = function(node, line, objectStack) {\n  const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n  if (child) {\n    node.appendChild(child);\n    this.writeCurveOrLineString_(child, line, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Polygon} polygon Polygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeSurfacePatches_ = function(node, polygon, objectStack) {\n  const child = _ol_xml_.createElementNS(node.namespaceURI, 'PolygonPatch');\n  node.appendChild(child);\n  this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LineString} line LineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeCurveSegments_ = function(node, line, objectStack) {\n  const child = _ol_xml_.createElementNS(node.namespaceURI,\n    'LineStringSegment');\n  node.appendChild(child);\n  this.writeCurveOrLineString_(child, line, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Geometry|ol.Extent} geometry Geometry.\n * @param {Array.<*>} objectStack Node stack.\n */\nGML3.prototype.writeGeometryElement = function(node, geometry, objectStack) {\n  const context = /** @type {olx.format.WriteOptions} */ (objectStack[objectStack.length - 1]);\n  const item = assign({}, context);\n  item.node = node;\n  let value;\n  if (Array.isArray(geometry)) {\n    if (context.dataProjection) {\n      value = transformExtent(\n        geometry, context.featureProjection, context.dataProjection);\n    } else {\n      value = geometry;\n    }\n  } else {\n    value = transformWithOptions(/** @type {ol.geom.Geometry} */ (geometry), true, context);\n  }\n  _ol_xml_.pushSerializeAndPop(/** @type {ol.XmlNodeStackItem} */\n    (item), GML3.GEOMETRY_SERIALIZERS_,\n    this.GEOMETRY_NODE_FACTORY_, [value],\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.Feature} feature Feature.\n * @param {Array.<*>} objectStack Node stack.\n */\nGML3.prototype.writeFeatureElement = function(node, feature, objectStack) {\n  const fid = feature.getId();\n  if (fid) {\n    node.setAttribute('fid', fid);\n  }\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const featureNS = context['featureNS'];\n  const geometryName = feature.getGeometryName();\n  if (!context.serializers) {\n    context.serializers = {};\n    context.serializers[featureNS] = {};\n  }\n  const properties = feature.getProperties();\n  const keys = [];\n  const values = [];\n  for (const key in properties) {\n    const value = properties[key];\n    if (value !== null) {\n      keys.push(key);\n      values.push(value);\n      if (key == geometryName || value instanceof Geometry) {\n        if (!(key in context.serializers[featureNS])) {\n          context.serializers[featureNS][key] = _ol_xml_.makeChildAppender(\n            this.writeGeometryElement, this);\n        }\n      } else {\n        if (!(key in context.serializers[featureNS])) {\n          context.serializers[featureNS][key] = _ol_xml_.makeChildAppender(\n            XSD.writeStringTextNode);\n        }\n      }\n    }\n  }\n  const item = assign({}, context);\n  item.node = node;\n  _ol_xml_.pushSerializeAndPop(/** @type {ol.XmlNodeStackItem} */\n    (item), context.serializers,\n    _ol_xml_.makeSimpleNodeFactory(undefined, featureNS),\n    values,\n    objectStack, keys);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<ol.Feature>} features Features.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeFeatureMembers_ = function(node, features, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const featureType = context['featureType'];\n  const featureNS = context['featureNS'];\n  const serializers = {};\n  serializers[featureNS] = {};\n  serializers[featureNS][featureType] = _ol_xml_.makeChildAppender(\n    this.writeFeatureElement, this);\n  const item = assign({}, context);\n  item.node = node;\n  _ol_xml_.pushSerializeAndPop(/** @type {ol.XmlNodeStackItem} */\n    (item),\n    serializers,\n    _ol_xml_.makeSimpleNodeFactory(featureType, featureNS), features,\n    objectStack);\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML3.SURFACEORPOLYGONMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember_),\n    'polygonMember': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember_)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML3.POINTMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'pointMember': _ol_xml_.makeChildAppender(\n      GML3.prototype.writePointMember_)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML3.LINESTRINGORCURVEMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember_),\n    'curveMember': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember_)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML3.RING_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'exterior': _ol_xml_.makeChildAppender(GML3.prototype.writeRing_),\n    'interior': _ol_xml_.makeChildAppender(GML3.prototype.writeRing_)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML3.GEOMETRY_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'Curve': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeCurveOrLineString_),\n    'MultiCurve': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString_),\n    'Point': _ol_xml_.makeChildAppender(GML3.prototype.writePoint_),\n    'MultiPoint': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeMultiPoint_),\n    'LineString': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeCurveOrLineString_),\n    'MultiLineString': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString_),\n    'LinearRing': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeLinearRing_),\n    'Polygon': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygon_),\n    'MultiPolygon': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon_),\n    'Surface': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygon_),\n    'MultiSurface': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon_),\n    'Envelope': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeEnvelope)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, string>}\n * @private\n */\nGML3.MULTIGEOMETRY_TO_MEMBER_NODENAME_ = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember'\n};\n\n\n/**\n * @const\n * @param {*} value Value.\n * @param {Array.<*>} objectStack Object stack.\n * @param {string=} opt_nodeName Node name.\n * @return {Node|undefined} Node.\n * @private\n */\nGML3.prototype.MULTIGEOMETRY_MEMBER_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {\n  const parentNode = objectStack[objectStack.length - 1].node;\n  return _ol_xml_.createElementNS('http://www.opengis.net/gml',\n    GML3.MULTIGEOMETRY_TO_MEMBER_NODENAME_[parentNode.nodeName]);\n};\n\n\n/**\n * @const\n * @param {*} value Value.\n * @param {Array.<*>} objectStack Object stack.\n * @param {string=} opt_nodeName Node name.\n * @return {Node|undefined} Node.\n * @private\n */\nGML3.prototype.GEOMETRY_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {\n  const context = objectStack[objectStack.length - 1];\n  const multiSurface = context['multiSurface'];\n  const surface = context['surface'];\n  const curve = context['curve'];\n  const multiCurve = context['multiCurve'];\n  let nodeName;\n  if (!Array.isArray(value)) {\n    nodeName = /** @type {ol.geom.Geometry} */ (value).getType();\n    if (nodeName === 'MultiPolygon' && multiSurface === true) {\n      nodeName = 'MultiSurface';\n    } else if (nodeName === 'Polygon' && surface === true) {\n      nodeName = 'Surface';\n    } else if (nodeName === 'LineString' && curve === true) {\n      nodeName = 'Curve';\n    } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n      nodeName = 'MultiCurve';\n    }\n  } else {\n    nodeName = 'Envelope';\n  }\n  return _ol_xml_.createElementNS('http://www.opengis.net/gml',\n    nodeName);\n};\n\n\n/**\n * Encode a geometry in GML 3.1.1 Simple Features.\n *\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Options.\n * @return {Node} Node.\n * @override\n * @api\n */\nGML3.prototype.writeGeometryNode = function(geometry, opt_options) {\n  opt_options = this.adaptOptions(opt_options);\n  const geom = _ol_xml_.createElementNS('http://www.opengis.net/gml', 'geom');\n  const context = {node: geom, hasZ: this.hasZ, srsName: this.srsName,\n    curve: this.curve_, surface: this.surface_,\n    multiSurface: this.multiSurface_, multiCurve: this.multiCurve_};\n  if (opt_options) {\n    assign(context, opt_options);\n  }\n  this.writeGeometryElement(geom, geometry, [context]);\n  return geom;\n};\n\n\n/**\n * Encode an array of features in GML 3.1.1 Simple Features.\n *\n * @function\n * @param {Array.<ol.Feature>} features Features.\n * @param {olx.format.WriteOptions=} opt_options Options.\n * @return {string} Result.\n * @api\n */\nGML3.prototype.writeFeatures;\n\n\n/**\n * Encode an array of features in the GML 3.1.1 format as an XML node.\n *\n * @param {Array.<ol.Feature>} features Features.\n * @param {olx.format.WriteOptions=} opt_options Options.\n * @return {Node} Node.\n * @override\n * @api\n */\nGML3.prototype.writeFeaturesNode = function(features, opt_options) {\n  opt_options = this.adaptOptions(opt_options);\n  const node = _ol_xml_.createElementNS('http://www.opengis.net/gml',\n    'featureMembers');\n  _ol_xml_.setAttributeNS(node, 'http://www.w3.org/2001/XMLSchema-instance',\n    'xsi:schemaLocation', this.schemaLocation);\n  const context = {\n    srsName: this.srsName,\n    hasZ: this.hasZ,\n    curve: this.curve_,\n    surface: this.surface_,\n    multiSurface: this.multiSurface_,\n    multiCurve: this.multiCurve_,\n    featureNS: this.featureNS,\n    featureType: this.featureType\n  };\n  if (opt_options) {\n    assign(context, opt_options);\n  }\n  this.writeFeatureMembers_(node, features, [context]);\n  return node;\n};\nexport default GML3;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/GML3.js\n// module id = 76\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22","/**\n * @module ol/geom/GeometryCollection\n */\nimport {inherits} from '../index.js';\nimport _ol_events_ from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {createOrUpdateEmpty, closestSquaredDistanceXY, extend, getCenter} from '../extent.js';\nimport Geometry from '../geom/Geometry.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport {clear} from '../obj.js';\n\n/**\n * @classdesc\n * An array of {@link ol.geom.Geometry} objects.\n *\n * @constructor\n * @extends {ol.geom.Geometry}\n * @param {Array.<ol.geom.Geometry>=} opt_geometries Geometries.\n * @api\n */\nconst GeometryCollection = function(opt_geometries) {\n\n  Geometry.call(this);\n\n  /**\n   * @private\n   * @type {Array.<ol.geom.Geometry>}\n   */\n  this.geometries_ = opt_geometries ? opt_geometries : null;\n\n  this.listenGeometriesChange_();\n};\n\ninherits(GeometryCollection, Geometry);\n\n\n/**\n * @param {Array.<ol.geom.Geometry>} geometries Geometries.\n * @private\n * @return {Array.<ol.geom.Geometry>} Cloned geometries.\n */\nGeometryCollection.cloneGeometries_ = function(geometries) {\n  const clonedGeometries = [];\n  let i, ii;\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\n    clonedGeometries.push(geometries[i].clone());\n  }\n  return clonedGeometries;\n};\n\n\n/**\n * @private\n */\nGeometryCollection.prototype.unlistenGeometriesChange_ = function() {\n  let i, ii;\n  if (!this.geometries_) {\n    return;\n  }\n  for (i = 0, ii = this.geometries_.length; i < ii; ++i) {\n    _ol_events_.unlisten(\n      this.geometries_[i], EventType.CHANGE,\n      this.changed, this);\n  }\n};\n\n\n/**\n * @private\n */\nGeometryCollection.prototype.listenGeometriesChange_ = function() {\n  let i, ii;\n  if (!this.geometries_) {\n    return;\n  }\n  for (i = 0, ii = this.geometries_.length; i < ii; ++i) {\n    _ol_events_.listen(\n      this.geometries_[i], EventType.CHANGE,\n      this.changed, this);\n  }\n};\n\n\n/**\n * Make a complete copy of the geometry.\n * @return {!ol.geom.GeometryCollection} Clone.\n * @override\n * @api\n */\nGeometryCollection.prototype.clone = function() {\n  const geometryCollection = new GeometryCollection(null);\n  geometryCollection.setGeometries(this.geometries_);\n  return geometryCollection;\n};\n\n\n/**\n * @inheritDoc\n */\nGeometryCollection.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {\n  if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n    return minSquaredDistance;\n  }\n  const geometries = this.geometries_;\n  let i, ii;\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\n    minSquaredDistance = geometries[i].closestPointXY(\n      x, y, closestPoint, minSquaredDistance);\n  }\n  return minSquaredDistance;\n};\n\n\n/**\n * @inheritDoc\n */\nGeometryCollection.prototype.containsXY = function(x, y) {\n  const geometries = this.geometries_;\n  let i, ii;\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\n    if (geometries[i].containsXY(x, y)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * @inheritDoc\n */\nGeometryCollection.prototype.computeExtent = function(extent) {\n  createOrUpdateEmpty(extent);\n  const geometries = this.geometries_;\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\n    extend(extent, geometries[i].getExtent());\n  }\n  return extent;\n};\n\n\n/**\n * Return the geometries that make up this geometry collection.\n * @return {Array.<ol.geom.Geometry>} Geometries.\n * @api\n */\nGeometryCollection.prototype.getGeometries = function() {\n  return GeometryCollection.cloneGeometries_(this.geometries_);\n};\n\n\n/**\n * @return {Array.<ol.geom.Geometry>} Geometries.\n */\nGeometryCollection.prototype.getGeometriesArray = function() {\n  return this.geometries_;\n};\n\n\n/**\n * @inheritDoc\n */\nGeometryCollection.prototype.getSimplifiedGeometry = function(squaredTolerance) {\n  if (this.simplifiedGeometryRevision != this.getRevision()) {\n    clear(this.simplifiedGeometryCache);\n    this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n    this.simplifiedGeometryRevision = this.getRevision();\n  }\n  if (squaredTolerance < 0 ||\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n       squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)) {\n    return this;\n  }\n  const key = squaredTolerance.toString();\n  if (this.simplifiedGeometryCache.hasOwnProperty(key)) {\n    return this.simplifiedGeometryCache[key];\n  } else {\n    const simplifiedGeometries = [];\n    const geometries = this.geometries_;\n    let simplified = false;\n    let i, ii;\n    for (i = 0, ii = geometries.length; i < ii; ++i) {\n      const geometry = geometries[i];\n      const simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);\n      simplifiedGeometries.push(simplifiedGeometry);\n      if (simplifiedGeometry !== geometry) {\n        simplified = true;\n      }\n    }\n    if (simplified) {\n      const simplifiedGeometryCollection = new GeometryCollection(null);\n      simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);\n      this.simplifiedGeometryCache[key] = simplifiedGeometryCollection;\n      return simplifiedGeometryCollection;\n    } else {\n      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n      return this;\n    }\n  }\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nGeometryCollection.prototype.getType = function() {\n  return GeometryType.GEOMETRY_COLLECTION;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nGeometryCollection.prototype.intersectsExtent = function(extent) {\n  const geometries = this.geometries_;\n  let i, ii;\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\n    if (geometries[i].intersectsExtent(extent)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * @return {boolean} Is empty.\n */\nGeometryCollection.prototype.isEmpty = function() {\n  return this.geometries_.length === 0;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nGeometryCollection.prototype.rotate = function(angle, anchor) {\n  const geometries = this.geometries_;\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\n    geometries[i].rotate(angle, anchor);\n  }\n  this.changed();\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nGeometryCollection.prototype.scale = function(sx, opt_sy, opt_anchor) {\n  let anchor = opt_anchor;\n  if (!anchor) {\n    anchor = getCenter(this.getExtent());\n  }\n  const geometries = this.geometries_;\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\n    geometries[i].scale(sx, opt_sy, anchor);\n  }\n  this.changed();\n};\n\n\n/**\n * Set the geometries that make up this geometry collection.\n * @param {Array.<ol.geom.Geometry>} geometries Geometries.\n * @api\n */\nGeometryCollection.prototype.setGeometries = function(geometries) {\n  this.setGeometriesArray(\n    GeometryCollection.cloneGeometries_(geometries));\n};\n\n\n/**\n * @param {Array.<ol.geom.Geometry>} geometries Geometries.\n */\nGeometryCollection.prototype.setGeometriesArray = function(geometries) {\n  this.unlistenGeometriesChange_();\n  this.geometries_ = geometries;\n  this.listenGeometriesChange_();\n  this.changed();\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nGeometryCollection.prototype.applyTransform = function(transformFn) {\n  const geometries = this.geometries_;\n  let i, ii;\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\n    geometries[i].applyTransform(transformFn);\n  }\n  this.changed();\n};\n\n\n/**\n * Translate the geometry.\n * @param {number} deltaX Delta X.\n * @param {number} deltaY Delta Y.\n * @override\n * @api\n */\nGeometryCollection.prototype.translate = function(deltaX, deltaY) {\n  const geometries = this.geometries_;\n  let i, ii;\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\n    geometries[i].translate(deltaX, deltaY);\n  }\n  this.changed();\n};\n\n\n/**\n * @inheritDoc\n */\nGeometryCollection.prototype.disposeInternal = function() {\n  this.unlistenGeometriesChange_();\n  Geometry.prototype.disposeInternal.call(this);\n};\nexport default GeometryCollection;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/geom/GeometryCollection.js\n// module id = 84\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 12 14 15 22","/**\n * @module ol/format/OWS\n */\nimport {inherits} from '../index.js';\nimport XLink from '../format/XLink.js';\nimport XML from '../format/XML.js';\nimport XSD from '../format/XSD.js';\nimport _ol_xml_ from '../xml.js';\n\n/**\n * @constructor\n * @extends {ol.format.XML}\n */\nconst OWS = function() {\n  XML.call(this);\n};\n\ninherits(OWS, XML);\n\n\n/**\n * @inheritDoc\n */\nOWS.prototype.readFromDocument = function(doc) {\n  for (let n = doc.firstChild; n; n = n.nextSibling) {\n    if (n.nodeType == Node.ELEMENT_NODE) {\n      return this.readFromNode(n);\n    }\n  }\n  return null;\n};\n\n\n/**\n * @inheritDoc\n */\nOWS.prototype.readFromNode = function(node) {\n  const owsObject = _ol_xml_.pushParseAndPop({},\n    OWS.PARSERS_, node, []);\n  return owsObject ? owsObject : null;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The address.\n */\nOWS.readAddress_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    OWS.ADDRESS_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The values.\n */\nOWS.readAllowedValues_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    OWS.ALLOWED_VALUES_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The constraint.\n */\nOWS.readConstraint_ = function(node, objectStack) {\n  const name = node.getAttribute('name');\n  if (!name) {\n    return undefined;\n  }\n  return _ol_xml_.pushParseAndPop({'name': name},\n    OWS.CONSTRAINT_PARSERS_, node,\n    objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The contact info.\n */\nOWS.readContactInfo_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    OWS.CONTACT_INFO_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The DCP.\n */\nOWS.readDcp_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    OWS.DCP_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The GET object.\n */\nOWS.readGet_ = function(node, objectStack) {\n  const href = XLink.readHref(node);\n  if (!href) {\n    return undefined;\n  }\n  return _ol_xml_.pushParseAndPop({'href': href},\n    OWS.REQUEST_METHOD_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The HTTP object.\n */\nOWS.readHttp_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({}, OWS.HTTP_PARSERS_,\n    node, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The operation.\n */\nOWS.readOperation_ = function(node, objectStack) {\n  const name = node.getAttribute('name');\n  const value = _ol_xml_.pushParseAndPop({},\n    OWS.OPERATION_PARSERS_, node, objectStack);\n  if (!value) {\n    return undefined;\n  }\n  const object = /** @type {Object} */\n      (objectStack[objectStack.length - 1]);\n  object[name] = value;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The operations metadata.\n */\nOWS.readOperationsMetadata_ = function(node,\n  objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    OWS.OPERATIONS_METADATA_PARSERS_, node,\n    objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The phone.\n */\nOWS.readPhone_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    OWS.PHONE_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The service identification.\n */\nOWS.readServiceIdentification_ = function(node,\n  objectStack) {\n  return _ol_xml_.pushParseAndPop(\n    {}, OWS.SERVICE_IDENTIFICATION_PARSERS_, node,\n    objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The service contact.\n */\nOWS.readServiceContact_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop(\n    {}, OWS.SERVICE_CONTACT_PARSERS_, node,\n    objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The service provider.\n */\nOWS.readServiceProvider_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop(\n    {}, OWS.SERVICE_PROVIDER_PARSERS_, node,\n    objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {string|undefined} The value.\n */\nOWS.readValue_ = function(node, objectStack) {\n  return XSD.readString(node);\n};\n\n\n/**\n * @const\n * @type {Array.<string>}\n * @private\n */\nOWS.NAMESPACE_URIS_ = [\n  null,\n  'http://www.opengis.net/ows/1.1'\n];\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'ServiceIdentification': _ol_xml_.makeObjectPropertySetter(\n      OWS.readServiceIdentification_),\n    'ServiceProvider': _ol_xml_.makeObjectPropertySetter(\n      OWS.readServiceProvider_),\n    'OperationsMetadata': _ol_xml_.makeObjectPropertySetter(\n      OWS.readOperationsMetadata_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.ADDRESS_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'DeliveryPoint': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'City': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n    'AdministrativeArea': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'PostalCode': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n    'Country': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n    'ElectronicMailAddress': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.ALLOWED_VALUES_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'Value': _ol_xml_.makeObjectPropertyPusher(OWS.readValue_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.CONSTRAINT_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'AllowedValues': _ol_xml_.makeObjectPropertySetter(\n      OWS.readAllowedValues_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.CONTACT_INFO_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'Phone': _ol_xml_.makeObjectPropertySetter(OWS.readPhone_),\n    'Address': _ol_xml_.makeObjectPropertySetter(OWS.readAddress_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.DCP_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'HTTP': _ol_xml_.makeObjectPropertySetter(OWS.readHttp_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.HTTP_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'Get': _ol_xml_.makeObjectPropertyPusher(OWS.readGet_),\n    'Post': undefined // TODO\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.OPERATION_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'DCP': _ol_xml_.makeObjectPropertySetter(OWS.readDcp_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.OPERATIONS_METADATA_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'Operation': OWS.readOperation_\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.PHONE_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'Voice': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n    'Facsimile': _ol_xml_.makeObjectPropertySetter(XSD.readString)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.REQUEST_METHOD_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'Constraint': _ol_xml_.makeObjectPropertyPusher(\n      OWS.readConstraint_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.SERVICE_CONTACT_PARSERS_ =\n    _ol_xml_.makeStructureNS(\n      OWS.NAMESPACE_URIS_, {\n        'IndividualName': _ol_xml_.makeObjectPropertySetter(\n          XSD.readString),\n        'PositionName': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n        'ContactInfo': _ol_xml_.makeObjectPropertySetter(\n          OWS.readContactInfo_)\n      });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.SERVICE_IDENTIFICATION_PARSERS_ =\n    _ol_xml_.makeStructureNS(\n      OWS.NAMESPACE_URIS_, {\n        'Abstract': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n        'AccessConstraints': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n        'Fees': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n        'Title': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n        'ServiceTypeVersion': _ol_xml_.makeObjectPropertySetter(\n          XSD.readString),\n        'ServiceType': _ol_xml_.makeObjectPropertySetter(XSD.readString)\n      });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.SERVICE_PROVIDER_PARSERS_ =\n    _ol_xml_.makeStructureNS(\n      OWS.NAMESPACE_URIS_, {\n        'ProviderName': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n        'ProviderSite': _ol_xml_.makeObjectPropertySetter(XLink.readHref),\n        'ServiceContact': _ol_xml_.makeObjectPropertySetter(\n          OWS.readServiceContact_)\n      });\nexport default OWS;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/OWS.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/WMTSCapabilities\n */\nimport {inherits} from '../index.js';\nimport {boundingExtent} from '../extent.js';\nimport OWS from '../format/OWS.js';\nimport XLink from '../format/XLink.js';\nimport XML from '../format/XML.js';\nimport XSD from '../format/XSD.js';\nimport _ol_xml_ from '../xml.js';\n\n/**\n * @classdesc\n * Format for reading WMTS capabilities data.\n *\n * @constructor\n * @extends {ol.format.XML}\n * @api\n */\nconst WMTSCapabilities = function() {\n  XML.call(this);\n\n  /**\n   * @type {ol.format.OWS}\n   * @private\n   */\n  this.owsParser_ = new OWS();\n};\n\ninherits(WMTSCapabilities, XML);\n\n\n/**\n * Read a WMTS capabilities document.\n *\n * @function\n * @param {Document|Node|string} source The XML source.\n * @return {Object} An object representing the WMTS capabilities.\n * @api\n */\nWMTSCapabilities.prototype.read;\n\n\n/**\n * @inheritDoc\n */\nWMTSCapabilities.prototype.readFromDocument = function(doc) {\n  for (let n = doc.firstChild; n; n = n.nextSibling) {\n    if (n.nodeType == Node.ELEMENT_NODE) {\n      return this.readFromNode(n);\n    }\n  }\n  return null;\n};\n\n\n/**\n * @inheritDoc\n */\nWMTSCapabilities.prototype.readFromNode = function(node) {\n  const version = node.getAttribute('version').trim();\n  let WMTSCapabilityObject = this.owsParser_.readFromNode(node);\n  if (!WMTSCapabilityObject) {\n    return null;\n  }\n  WMTSCapabilityObject['version'] = version;\n  WMTSCapabilityObject = _ol_xml_.pushParseAndPop(WMTSCapabilityObject,\n    WMTSCapabilities.PARSERS_, node, []);\n  return WMTSCapabilityObject ? WMTSCapabilityObject : null;\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Attribution object.\n */\nWMTSCapabilities.readContents_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    WMTSCapabilities.CONTENTS_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Layers object.\n */\nWMTSCapabilities.readLayer_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    WMTSCapabilities.LAYER_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Tile Matrix Set object.\n */\nWMTSCapabilities.readTileMatrixSet_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    WMTSCapabilities.TMS_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Style object.\n */\nWMTSCapabilities.readStyle_ = function(node, objectStack) {\n  const style = _ol_xml_.pushParseAndPop({},\n    WMTSCapabilities.STYLE_PARSERS_, node, objectStack);\n  if (!style) {\n    return undefined;\n  }\n  const isDefault = node.getAttribute('isDefault') === 'true';\n  style['isDefault'] = isDefault;\n  return style;\n\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Tile Matrix Set Link object.\n */\nWMTSCapabilities.readTileMatrixSetLink_ = function(node,\n  objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    WMTSCapabilities.TMS_LINKS_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Dimension object.\n */\nWMTSCapabilities.readDimensions_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    WMTSCapabilities.DIMENSION_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Resource URL object.\n */\nWMTSCapabilities.readResourceUrl_ = function(node, objectStack) {\n  const format = node.getAttribute('format');\n  const template = node.getAttribute('template');\n  const resourceType = node.getAttribute('resourceType');\n  const resource = {};\n  if (format) {\n    resource['format'] = format;\n  }\n  if (template) {\n    resource['template'] = template;\n  }\n  if (resourceType) {\n    resource['resourceType'] = resourceType;\n  }\n  return resource;\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} WGS84 BBox object.\n */\nWMTSCapabilities.readWgs84BoundingBox_ = function(node, objectStack) {\n  const coordinates = _ol_xml_.pushParseAndPop([],\n    WMTSCapabilities.WGS84_BBOX_READERS_, node, objectStack);\n  if (coordinates.length != 2) {\n    return undefined;\n  }\n  return boundingExtent(coordinates);\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Legend object.\n */\nWMTSCapabilities.readLegendUrl_ = function(node, objectStack) {\n  const legend = {};\n  legend['format'] = node.getAttribute('format');\n  legend['href'] = XLink.readHref(node);\n  return legend;\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Coordinates object.\n */\nWMTSCapabilities.readCoordinates_ = function(node, objectStack) {\n  const coordinates = XSD.readString(node).split(' ');\n  if (!coordinates || coordinates.length != 2) {\n    return undefined;\n  }\n  const x = +coordinates[0];\n  const y = +coordinates[1];\n  if (isNaN(x) || isNaN(y)) {\n    return undefined;\n  }\n  return [x, y];\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} TileMatrix object.\n */\nWMTSCapabilities.readTileMatrix_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    WMTSCapabilities.TM_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} TileMatrixSetLimits Object.\n */\nWMTSCapabilities.readTileMatrixLimitsList_ = function(node,\n  objectStack) {\n  return _ol_xml_.pushParseAndPop([],\n    WMTSCapabilities.TMS_LIMITS_LIST_PARSERS_, node,\n    objectStack);\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} TileMatrixLimits Array.\n */\nWMTSCapabilities.readTileMatrixLimits_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    WMTSCapabilities.TMS_LIMITS_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @const\n * @private\n * @type {Array.<string>}\n */\nWMTSCapabilities.NAMESPACE_URIS_ = [\n  null,\n  'http://www.opengis.net/wmts/1.0'\n];\n\n\n/**\n * @const\n * @private\n * @type {Array.<string>}\n */\nWMTSCapabilities.OWS_NAMESPACE_URIS_ = [\n  null,\n  'http://www.opengis.net/ows/1.1'\n];\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'Contents': _ol_xml_.makeObjectPropertySetter(\n      WMTSCapabilities.readContents_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.CONTENTS_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'Layer': _ol_xml_.makeObjectPropertyPusher(\n      WMTSCapabilities.readLayer_),\n    'TileMatrixSet': _ol_xml_.makeObjectPropertyPusher(\n      WMTSCapabilities.readTileMatrixSet_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.LAYER_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'Style': _ol_xml_.makeObjectPropertyPusher(\n      WMTSCapabilities.readStyle_),\n    'Format': _ol_xml_.makeObjectPropertyPusher(\n      XSD.readString),\n    'TileMatrixSetLink': _ol_xml_.makeObjectPropertyPusher(\n      WMTSCapabilities.readTileMatrixSetLink_),\n    'Dimension': _ol_xml_.makeObjectPropertyPusher(\n      WMTSCapabilities.readDimensions_),\n    'ResourceURL': _ol_xml_.makeObjectPropertyPusher(\n      WMTSCapabilities.readResourceUrl_)\n  }, _ol_xml_.makeStructureNS(WMTSCapabilities.OWS_NAMESPACE_URIS_, {\n    'Title': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'Abstract': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'WGS84BoundingBox': _ol_xml_.makeObjectPropertySetter(\n      WMTSCapabilities.readWgs84BoundingBox_),\n    'Identifier': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString)\n  }));\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.STYLE_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'LegendURL': _ol_xml_.makeObjectPropertyPusher(\n      WMTSCapabilities.readLegendUrl_)\n  }, _ol_xml_.makeStructureNS(WMTSCapabilities.OWS_NAMESPACE_URIS_, {\n    'Title': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'Identifier': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString)\n  }));\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.TMS_LINKS_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'TileMatrixSet': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'TileMatrixSetLimits': _ol_xml_.makeObjectPropertySetter(\n      WMTSCapabilities.readTileMatrixLimitsList_)\n  });\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.TMS_LIMITS_LIST_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'TileMatrixLimits': _ol_xml_.makeArrayPusher(\n      WMTSCapabilities.readTileMatrixLimits_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.TMS_LIMITS_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'TileMatrix': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'MinTileRow': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger),\n    'MaxTileRow': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger),\n    'MinTileCol': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger),\n    'MaxTileCol': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.DIMENSION_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'Default': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'Value': _ol_xml_.makeObjectPropertyPusher(\n      XSD.readString)\n  }, _ol_xml_.makeStructureNS(WMTSCapabilities.OWS_NAMESPACE_URIS_, {\n    'Identifier': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString)\n  }));\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.WGS84_BBOX_READERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.OWS_NAMESPACE_URIS_, {\n    'LowerCorner': _ol_xml_.makeArrayPusher(\n      WMTSCapabilities.readCoordinates_),\n    'UpperCorner': _ol_xml_.makeArrayPusher(\n      WMTSCapabilities.readCoordinates_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.TMS_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'WellKnownScaleSet': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'TileMatrix': _ol_xml_.makeObjectPropertyPusher(\n      WMTSCapabilities.readTileMatrix_)\n  }, _ol_xml_.makeStructureNS(WMTSCapabilities.OWS_NAMESPACE_URIS_, {\n    'SupportedCRS': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'Identifier': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString)\n  }));\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.TM_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'TopLeftCorner': _ol_xml_.makeObjectPropertySetter(\n      WMTSCapabilities.readCoordinates_),\n    'ScaleDenominator': _ol_xml_.makeObjectPropertySetter(\n      XSD.readDecimal),\n    'TileWidth': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger),\n    'TileHeight': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger),\n    'MatrixWidth': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger),\n    'MatrixHeight': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger)\n  }, _ol_xml_.makeStructureNS(WMTSCapabilities.OWS_NAMESPACE_URIS_, {\n    'Identifier': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString)\n  }));\nexport default WMTSCapabilities;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/WMTSCapabilities.js\n// module id = null\n// module chunks = "],"sourceRoot":""}